/*
Uploadify v3.2
Copyright (c) 2012 Reactive Apps, Ronnie Garcia
Released under the MIT License <http://www.opensource.org/licenses/mit-license.php>

SWFUpload: http://www.swfupload.org, http://swfupload.googlecode.com
mmSWFUpload 1.0: Flash upload dialog - http://profandesign.se/swfupload/,  http://www.vinterwebb.se/
SWFUpload is (c) 2006-2007 Lars Huring, Olov Nilz√©n and Mammon Media and is released under the MIT License:
http://www.opensource.org/licenses/mit-license.php
SWFUpload 2 is (c) 2007-2008 Jake Roberts and is released under the MIT License:
http://www.opensource.org/licenses/mit-license.php

SWFObject v2.2 <http://code.google.com/p/swfobject/> 
is released under the MIT License <http://www.opensource.org/licenses/mit-license.php>
*/
var swfobject = function () { var ae = "undefined", aG = "object", aJ = "Shockwave Flash", aR = "ShockwaveFlash.ShockwaveFlash", aE = "application/x-shockwave-flash", aH = "SWFObjectExprInst", aS = "onreadystatechange", aB = window, ap = document, aK = navigator, aL = false, aN = [al], aA = [], az = [], ao = [], au, aF, ag, aa, aq = false, X = false, ay, ak, aw = true, ax = function () { var a = typeof ap.getElementById != ae && typeof ap.getElementsByTagName != ae && typeof ap.createElement != ae, h = aK.userAgent.toLowerCase(), j = aK.platform.toLowerCase(), e = j ? /win/.test(j) : /win/.test(h), c = j ? /mac/.test(j) : /mac/.test(h), f = /webkit/.test(h) ? parseFloat(h.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false, i = ! +"\v1", g = [0, 0, 0], b = null; if (typeof aK.plugins != ae && typeof aK.plugins[aJ] == aG) { b = aK.plugins[aJ].description; if (b && !(typeof aK.mimeTypes != ae && aK.mimeTypes[aE] && !aK.mimeTypes[aE].enabledPlugin)) { aL = true; i = false; b = b.replace(/^.*\s+(\S+\s+\S+$)/, "$1"); g[0] = parseInt(b.replace(/^(.*)\..*$/, "$1"), 10); g[1] = parseInt(b.replace(/^.*\.(.*)\s.*$/, "$1"), 10); g[2] = /[a-zA-Z]/.test(b) ? parseInt(b.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0 } } else { if (typeof aB.ActiveXObject != ae) { try { var d = new ActiveXObject(aR); if (d) { b = d.GetVariable("$version"); if (b) { i = true; b = b.split(" ")[1].split(","); g = [parseInt(b[0], 10), parseInt(b[1], 10), parseInt(b[2], 10)] } } } catch (k) { } } } return { w3: a, pv: g, wk: f, ie: i, win: e, mac: c } }(), ar = function () { if (!ax.w3) { return } if ((typeof ap.readyState != ae && ap.readyState == "complete") || (typeof ap.readyState == ae && (ap.getElementsByTagName("body")[0] || ap.body))) { ah() } if (!aq) { if (typeof ap.addEventListener != ae) { ap.addEventListener("DOMContentLoaded", ah, false) } if (ax.ie && ax.win) { ap.attachEvent(aS, function () { if (ap.readyState == "complete") { ap.detachEvent(aS, arguments.callee); ah() } }); if (aB == top) { (function () { if (aq) { return } try { ap.documentElement.doScroll("left") } catch (a) { setTimeout(arguments.callee, 0); return } ah() })() } } if (ax.wk) { (function () { if (aq) { return } if (!/loaded|complete/.test(ap.readyState)) { setTimeout(arguments.callee, 0); return } ah() })() } aI(ah) } }(); function ah() { if (aq) { return } try { var d = ap.getElementsByTagName("body")[0].appendChild(ac("span")); d.parentNode.removeChild(d) } catch (a) { return } aq = true; var b = aN.length; for (var c = 0; c < b; c++) { aN[c]() } } function at(a) { if (aq) { a() } else { aN[aN.length] = a } } function aI(b) { if (typeof aB.addEventListener != ae) { aB.addEventListener("load", b, false) } else { if (typeof ap.addEventListener != ae) { ap.addEventListener("load", b, false) } else { if (typeof aB.attachEvent != ae) { an(aB, "onload", b) } else { if (typeof aB.onload == "function") { var a = aB.onload; aB.onload = function () { a(); b() } } else { aB.onload = b } } } } } function al() { if (aL) { aP() } else { am() } } function aP() { var b = ap.getElementsByTagName("body")[0]; var a = ac(aG); a.setAttribute("type", aE); var d = b.appendChild(a); if (d) { var c = 0; (function () { if (typeof d.GetVariable != ae) { var e = d.GetVariable("$version"); if (e) { e = e.split(" ")[1].split(","); ax.pv = [parseInt(e[0], 10), parseInt(e[1], 10), parseInt(e[2], 10)] } } else { if (c < 10) { c++; setTimeout(arguments.callee, 10); return } } b.removeChild(a); d = null; am() })() } else { am() } } function am() { var g = aA.length; if (g > 0) { for (var f = 0; f < g; f++) { var k = aA[f].id; var b = aA[f].callbackFn; var a = { success: false, id: k }; if (ax.pv[0] > 0) { var e = ab(k); if (e) { if (ai(aA[f].swfVersion) && !(ax.wk && ax.wk < 312)) { aQ(k, true); if (b) { a.success = true; a.ref = aU(k); b(a) } } else { if (aA[f].expressInstall && Y()) { var i = {}; i.data = aA[f].expressInstall; i.width = e.getAttribute("width") || "0"; i.height = e.getAttribute("height") || "0"; if (e.getAttribute("class")) { i.styleclass = e.getAttribute("class") } if (e.getAttribute("align")) { i.align = e.getAttribute("align") } var h = {}; var j = e.getElementsByTagName("param"); var c = j.length; for (var d = 0; d < c; d++) { if (j[d].getAttribute("name").toLowerCase() != "movie") { h[j[d].getAttribute("name")] = j[d].getAttribute("value") } } aD(i, h, k, b) } else { aC(e); if (b) { b(a) } } } } } else { aQ(k, true); if (b) { var l = aU(k); if (l && typeof l.SetVariable != ae) { a.success = true; a.ref = l } b(a) } } } } } function aU(a) { var b = null; var c = ab(a); if (c && c.nodeName == "OBJECT") { if (typeof c.SetVariable != ae) { b = c } else { var d = c.getElementsByTagName(aG)[0]; if (d) { b = d } } } return b } function Y() { return !X && ai("6.0.65") && (ax.win || ax.mac) && !(ax.wk && ax.wk < 312) } function aD(a, b, f, h) { X = true; ag = h || null; aa = { success: false, id: f }; var e = ab(f); if (e) { if (e.nodeName == "OBJECT") { au = aj(e); aF = null } else { au = e; aF = f } a.id = aH; if (typeof a.width == ae || (!/%$/.test(a.width) && parseInt(a.width, 10) < 310)) { a.width = "310" } if (typeof a.height == ae || (!/%$/.test(a.height) && parseInt(a.height, 10) < 137)) { a.height = "137" } ap.title = ap.title.slice(0, 47) + " - Flash Player Installation"; var d = ax.ie && ax.win ? "ActiveX" : "PlugIn", c = "MMredirectURL=" + aB.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + d + "&MMdoctitle=" + ap.title; if (typeof b.flashvars != ae) { b.flashvars += "&" + c } else { b.flashvars = c } if (ax.ie && ax.win && e.readyState != 4) { var g = ac("div"); f += "SWFObjectNew"; g.setAttribute("id", f); e.parentNode.insertBefore(g, e); e.style.display = "none"; (function () { if (e.readyState == 4) { e.parentNode.removeChild(e) } else { setTimeout(arguments.callee, 10) } })() } aM(a, b, f) } } function aC(b) { if (ax.ie && ax.win && b.readyState != 4) { var a = ac("div"); b.parentNode.insertBefore(a, b); a.parentNode.replaceChild(aj(b), a); b.style.display = "none"; (function () { if (b.readyState == 4) { b.parentNode.removeChild(b) } else { setTimeout(arguments.callee, 10) } })() } else { b.parentNode.replaceChild(aj(b), b) } } function aj(b) { var a = ac("div"); if (ax.win && ax.ie) { a.innerHTML = b.innerHTML } else { var e = b.getElementsByTagName(aG)[0]; if (e) { var c = e.childNodes; if (c) { var d = c.length; for (var f = 0; f < d; f++) { if (!(c[f].nodeType == 1 && c[f].nodeName == "PARAM") && !(c[f].nodeType == 8)) { a.appendChild(c[f].cloneNode(true)) } } } } } return a } function aM(i, g, k) { var j, a = ab(k); if (ax.wk && ax.wk < 312) { return j } if (a) { if (typeof i.id == ae) { i.id = k } if (ax.ie && ax.win) { var h = ""; for (var e in i) { if (i[e] != Object.prototype[e]) { if (e.toLowerCase() == "data") { g.movie = i[e] } else { if (e.toLowerCase() == "styleclass") { h += ' class="' + i[e] + '"' } else { if (e.toLowerCase() != "classid") { h += " " + e + '="' + i[e] + '"' } } } } } var f = ""; for (var d in g) { if (g[d] != Object.prototype[d]) { f += '<param name="' + d + '" value="' + g[d] + '" />' } } a.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + h + ">" + f + "</object>"; az[az.length] = i.id; j = ab(i.id) } else { var l = ac(aG); l.setAttribute("type", aE); for (var c in i) { if (i[c] != Object.prototype[c]) { if (c.toLowerCase() == "styleclass") { l.setAttribute("class", i[c]) } else { if (c.toLowerCase() != "classid") { l.setAttribute(c, i[c]) } } } } for (var b in g) { if (g[b] != Object.prototype[b] && b.toLowerCase() != "movie") { af(l, b, g[b]) } } a.parentNode.replaceChild(l, a); j = l } } return j } function af(d, b, c) { var a = ac("param"); a.setAttribute("name", b); a.setAttribute("value", c); d.appendChild(a) } function aT(b) { var a = ab(b); if (a && a.nodeName == "OBJECT") { if (ax.ie && ax.win) { a.style.display = "none"; (function () { if (a.readyState == 4) { Z(b) } else { setTimeout(arguments.callee, 10) } })() } else { a.parentNode.removeChild(a) } } } function Z(c) { var b = ab(c); if (b) { for (var a in b) { if (typeof b[a] == "function") { b[a] = null } } b.parentNode.removeChild(b) } } function ab(c) { var a = null; try { a = ap.getElementById(c) } catch (b) { } return a } function ac(a) { return ap.createElement(a) } function an(c, a, b) { c.attachEvent(a, b); ao[ao.length] = [c, a, b] } function ai(c) { var b = ax.pv, a = c.split("."); a[0] = parseInt(a[0], 10); a[1] = parseInt(a[1], 10) || 0; a[2] = parseInt(a[2], 10) || 0; return (b[0] > a[0] || (b[0] == a[0] && b[1] > a[1]) || (b[0] == a[0] && b[1] == a[1] && b[2] >= a[2])) ? true : false } function aO(c, f, d, b) { if (ax.ie && ax.mac) { return } var a = ap.getElementsByTagName("head")[0]; if (!a) { return } var e = (d && typeof d == "string") ? d : "screen"; if (b) { ay = null; ak = null } if (!ay || ak != e) { var g = ac("style"); g.setAttribute("type", "text/css"); g.setAttribute("media", e); ay = a.appendChild(g); if (ax.ie && ax.win && typeof ap.styleSheets != ae && ap.styleSheets.length > 0) { ay = ap.styleSheets[ap.styleSheets.length - 1] } ak = e } if (ax.ie && ax.win) { if (ay && typeof ay.addRule == aG) { ay.addRule(c, f) } } else { if (ay && typeof ap.createTextNode != ae) { ay.appendChild(ap.createTextNode(c + " {" + f + "}")) } } } function aQ(c, a) { if (!aw) { return } var b = a ? "visible" : "hidden"; if (aq && ab(c)) { ab(c).style.visibility = b } else { aO("#" + c, "visibility:" + b) } } function av(b) { var c = /[\\\"<>\.;]/; var a = c.exec(b) != null; return a && typeof encodeURIComponent != ae ? encodeURIComponent(b) : b } var ad = function () { if (ax.ie && ax.win) { window.attachEvent("onunload", function () { var c = ao.length; for (var b = 0; b < c; b++) { ao[b][0].detachEvent(ao[b][1], ao[b][2]) } var f = az.length; for (var a = 0; a < f; a++) { aT(az[a]) } for (var e in ax) { ax[e] = null } ax = null; for (var d in swfobject) { swfobject[d] = null } swfobject = null }) } }(); return { registerObject: function (b, c, a, e) { if (ax.w3 && b && c) { var d = {}; d.id = b; d.swfVersion = c; d.expressInstall = a; d.callbackFn = e; aA[aA.length] = d; aQ(b, false) } else { if (e) { e({ success: false, id: b }) } } }, getObjectById: function (a) { if (ax.w3) { return aU(a) } }, embedSWF: function (b, h, e, g, j, a, k, d, f, c) { var i = { success: false, id: h }; if (ax.w3 && !(ax.wk && ax.wk < 312) && b && h && e && g && j) { aQ(h, false); at(function () { e += ""; g += ""; var m = {}; if (f && typeof f === aG) { for (var o in f) { m[o] = f[o] } } m.data = b; m.width = e; m.height = g; var p = {}; if (d && typeof d === aG) { for (var n in d) { p[n] = d[n] } } if (k && typeof k === aG) { for (var l in k) { if (typeof p.flashvars != ae) { p.flashvars += "&" + l + "=" + k[l] } else { p.flashvars = l + "=" + k[l] } } } if (ai(j)) { var q = aM(m, p, h); if (m.id == h) { aQ(h, true) } i.success = true; i.ref = q } else { if (a && Y()) { m.data = a; aD(m, p, h, c); return } else { aQ(h, true) } } if (c) { c(i) } }) } else { if (c) { c(i) } } }, switchOffAutoHideShow: function () { aw = false }, ua: ax, getFlashPlayerVersion: function () { return { major: ax.pv[0], minor: ax.pv[1], release: ax.pv[2] } }, hasFlashPlayerVersion: ai, createSWF: function (c, b, a) { if (ax.w3) { return aM(c, b, a) } else { return undefined } }, showExpressInstall: function (d, a, b, c) { if (ax.w3 && Y()) { aD(d, a, b, c) } }, removeSWF: function (a) { if (ax.w3) { aT(a) } }, createCSS: function (a, d, c, b) { if (ax.w3) { aO(a, d, c, b) } }, addDomLoadEvent: at, addLoadEvent: aI, getQueryParamValue: function (a) { var d = ap.location.search || ap.location.hash; if (d) { if (/\?/.test(d)) { d = d.split("?")[1] } if (a == null) { return av(d) } var c = d.split("&"); for (var b = 0; b < c.length; b++) { if (c[b].substring(0, c[b].indexOf("=")) == a) { return av(c[b].substring((c[b].indexOf("=") + 1))) } } } return "" }, expressInstallCallback: function () { if (X) { var a = ab(aH); if (a && au) { a.parentNode.replaceChild(au, a); if (aF) { aQ(aF, true); if (ax.ie && ax.win) { au.style.display = "block" } } if (ag) { ag(aa) } } X = false } } } }(); var SWFUpload; if (SWFUpload == undefined) { SWFUpload = function (b) { this.initSWFUpload(b) } } SWFUpload.prototype.initSWFUpload = function (d) { try { this.customSettings = {}; this.settings = d; this.eventQueue = []; this.movieName = "SWFUpload_" + SWFUpload.movieCount++; this.movieElement = null; SWFUpload.instances[this.movieName] = this; this.initSettings(); this.loadFlash(); this.displayDebugInfo() } catch (c) { delete SWFUpload.instances[this.movieName]; throw c } }; SWFUpload.instances = {}; SWFUpload.movieCount = 0; SWFUpload.version = "2.2.0 2009-03-25"; SWFUpload.QUEUE_ERROR = { QUEUE_LIMIT_EXCEEDED: -100, FILE_EXCEEDS_SIZE_LIMIT: -110, ZERO_BYTE_FILE: -120, INVALID_FILETYPE: -130 }; SWFUpload.UPLOAD_ERROR = { HTTP_ERROR: -200, MISSING_UPLOAD_URL: -210, IO_ERROR: -220, SECURITY_ERROR: -230, UPLOAD_LIMIT_EXCEEDED: -240, UPLOAD_FAILED: -250, SPECIFIED_FILE_ID_NOT_FOUND: -260, FILE_VALIDATION_FAILED: -270, FILE_CANCELLED: -280, UPLOAD_STOPPED: -290 }; SWFUpload.FILE_STATUS = { QUEUED: -1, IN_PROGRESS: -2, ERROR: -3, COMPLETE: -4, CANCELLED: -5 }; SWFUpload.BUTTON_ACTION = { SELECT_FILE: -100, SELECT_FILES: -110, START_UPLOAD: -120 }; SWFUpload.CURSOR = { ARROW: -1, HAND: -2 }; SWFUpload.WINDOW_MODE = { WINDOW: "window", TRANSPARENT: "transparent", OPAQUE: "opaque" }; SWFUpload.completeURL = function (d) { if (typeof (d) !== "string" || d.match(/^https?:\/\//i) || d.match(/^\//)) { return d } var f = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : ""); var e = window.location.pathname.lastIndexOf("/"); if (e <= 0) { return "" } else { path = window.location.pathname.substr(0, e) + "/" } return path + d }; SWFUpload.prototype.initSettings = function () { this.ensureDefault = function (d, c) { this.settings[d] = (this.settings[d] == undefined) ? c : this.settings[d] }; this.ensureDefault("upload_url", ""); this.ensureDefault("preserve_relative_urls", false); this.ensureDefault("file_post_name", "Filedata"); this.ensureDefault("post_params", {}); this.ensureDefault("use_query_string", false); this.ensureDefault("requeue_on_error", false); this.ensureDefault("http_success", []); this.ensureDefault("assume_success_timeout", 0); this.ensureDefault("file_types", "*.*"); this.ensureDefault("file_types_description", "All Files"); this.ensureDefault("file_size_limit", 0); this.ensureDefault("file_upload_limit", 0); this.ensureDefault("file_queue_limit", 0); this.ensureDefault("flash_url", "swfupload.swf"); this.ensureDefault("prevent_swf_caching", true); this.ensureDefault("button_image_url", ""); this.ensureDefault("button_width", 1); this.ensureDefault("button_height", 1); this.ensureDefault("button_text", ""); this.ensureDefault("button_text_style", "color: #000000; font-size: 16pt;"); this.ensureDefault("button_text_top_padding", 0); this.ensureDefault("button_text_left_padding", 0); this.ensureDefault("button_action", SWFUpload.BUTTON_ACTION.SELECT_FILES); this.ensureDefault("button_disabled", false); this.ensureDefault("button_placeholder_id", ""); this.ensureDefault("button_placeholder", null); this.ensureDefault("button_cursor", SWFUpload.CURSOR.ARROW); this.ensureDefault("button_window_mode", SWFUpload.WINDOW_MODE.WINDOW); this.ensureDefault("debug", false); this.settings.debug_enabled = this.settings.debug; this.settings.return_upload_start_handler = this.returnUploadStart; this.ensureDefault("swfupload_loaded_handler", null); this.ensureDefault("file_dialog_start_handler", null); this.ensureDefault("file_queued_handler", null); this.ensureDefault("file_queue_error_handler", null); this.ensureDefault("file_dialog_complete_handler", null); this.ensureDefault("upload_start_handler", null); this.ensureDefault("upload_progress_handler", null); this.ensureDefault("upload_error_handler", null); this.ensureDefault("upload_success_handler", null); this.ensureDefault("upload_complete_handler", null); this.ensureDefault("debug_handler", this.debugMessage); this.ensureDefault("custom_settings", {}); this.customSettings = this.settings.custom_settings; if (!!this.settings.prevent_swf_caching) { this.settings.flash_url = this.settings.flash_url + (this.settings.flash_url.indexOf("?") < 0 ? "?" : "&") + "preventswfcaching=" + new Date().getTime() } if (!this.settings.preserve_relative_urls) { this.settings.upload_url = SWFUpload.completeURL(this.settings.upload_url); this.settings.button_image_url = "" } delete this.ensureDefault }; SWFUpload.prototype.loadFlash = function () { var c, d; if (document.getElementById(this.movieName) !== null) { throw "ID " + this.movieName + " is already in use. The Flash Object could not be added" } c = document.getElementById(this.settings.button_placeholder_id) || this.settings.button_placeholder; if (c == undefined) { throw "Could not find the placeholder element: " + this.settings.button_placeholder_id } d = document.createElement("div"); d.innerHTML = this.getFlashHTML(); c.parentNode.replaceChild(d.firstChild, c); if (window[this.movieName] == undefined) { window[this.movieName] = this.getMovieElement() } }; SWFUpload.prototype.getFlashHTML = function () { return ['<object id="', this.movieName, '" type="application/x-shockwave-flash" data="', this.settings.flash_url, '" width="', this.settings.button_width, '" height="', this.settings.button_height, '" class="swfupload">', '<param name="wmode" value="', this.settings.button_window_mode, '" />', '<param name="movie" value="', this.settings.flash_url, '" />', '<param name="quality" value="high" />', '<param name="menu" value="false" />', '<param name="allowScriptAccess" value="always" />', '<param name="flashvars" value="' + this.getFlashVars() + '" />', "</object>"].join("") }; SWFUpload.prototype.getFlashVars = function () { var d = this.buildParamString(); var c = this.settings.http_success.join(","); return ["movieName=", encodeURIComponent(this.movieName), "&amp;uploadURL=", encodeURIComponent(this.settings.upload_url), "&amp;useQueryString=", encodeURIComponent(this.settings.use_query_string), "&amp;requeueOnError=", encodeURIComponent(this.settings.requeue_on_error), "&amp;httpSuccess=", encodeURIComponent(c), "&amp;assumeSuccessTimeout=", encodeURIComponent(this.settings.assume_success_timeout), "&amp;params=", encodeURIComponent(d), "&amp;filePostName=", encodeURIComponent(this.settings.file_post_name), "&amp;fileTypes=", encodeURIComponent(this.settings.file_types), "&amp;fileTypesDescription=", encodeURIComponent(this.settings.file_types_description), "&amp;fileSizeLimit=", encodeURIComponent(this.settings.file_size_limit), "&amp;fileUploadLimit=", encodeURIComponent(this.settings.file_upload_limit), "&amp;fileQueueLimit=", encodeURIComponent(this.settings.file_queue_limit), "&amp;debugEnabled=", encodeURIComponent(this.settings.debug_enabled), "&amp;buttonImageURL=", encodeURIComponent(this.settings.button_image_url), "&amp;buttonWidth=", encodeURIComponent(this.settings.button_width), "&amp;buttonHeight=", encodeURIComponent(this.settings.button_height), "&amp;buttonText=", encodeURIComponent(this.settings.button_text), "&amp;buttonTextTopPadding=", encodeURIComponent(this.settings.button_text_top_padding), "&amp;buttonTextLeftPadding=", encodeURIComponent(this.settings.button_text_left_padding), "&amp;buttonTextStyle=", encodeURIComponent(this.settings.button_text_style), "&amp;buttonAction=", encodeURIComponent(this.settings.button_action), "&amp;buttonDisabled=", encodeURIComponent(this.settings.button_disabled), "&amp;buttonCursor=", encodeURIComponent(this.settings.button_cursor)].join("") }; SWFUpload.prototype.getMovieElement = function () { if (this.movieElement == undefined) { this.movieElement = document.getElementById(this.movieName) } if (this.movieElement === null) { throw "Could not find Flash element" } return this.movieElement }; SWFUpload.prototype.buildParamString = function () { var f = this.settings.post_params; var e = []; if (typeof (f) === "object") { for (var d in f) { if (f.hasOwnProperty(d)) { e.push(encodeURIComponent(d.toString()) + "=" + encodeURIComponent(f[d].toString())) } } } return e.join("&amp;") }; SWFUpload.prototype.destroy = function () { try { this.cancelUpload(null, false); var f = null; f = this.getMovieElement(); if (f && typeof (f.CallFunction) === "unknown") { for (var h in f) { try { if (typeof (f[h]) === "function") { f[h] = null } } catch (j) { } } try { f.parentNode.removeChild(f) } catch (g) { } } window[this.movieName] = null; SWFUpload.instances[this.movieName] = null; delete SWFUpload.instances[this.movieName]; this.movieElement = null; this.settings = null; this.customSettings = null; this.eventQueue = null; this.movieName = null; return true } catch (i) { return false } }; SWFUpload.prototype.displayDebugInfo = function () { this.debug(["---SWFUpload Instance Info---\n", "Version: ", SWFUpload.version, "\n", "Movie Name: ", this.movieName, "\n", "Settings:\n", "\t", "upload_url:               ", this.settings.upload_url, "\n", "\t", "flash_url:                ", this.settings.flash_url, "\n", "\t", "use_query_string:         ", this.settings.use_query_string.toString(), "\n", "\t", "requeue_on_error:         ", this.settings.requeue_on_error.toString(), "\n", "\t", "http_success:             ", this.settings.http_success.join(", "), "\n", "\t", "assume_success_timeout:   ", this.settings.assume_success_timeout, "\n", "\t", "file_post_name:           ", this.settings.file_post_name, "\n", "\t", "post_params:              ", this.settings.post_params.toString(), "\n", "\t", "file_types:               ", this.settings.file_types, "\n", "\t", "file_types_description:   ", this.settings.file_types_description, "\n", "\t", "file_size_limit:          ", this.settings.file_size_limit, "\n", "\t", "file_upload_limit:        ", this.settings.file_upload_limit, "\n", "\t", "file_queue_limit:         ", this.settings.file_queue_limit, "\n", "\t", "debug:                    ", this.settings.debug.toString(), "\n", "\t", "prevent_swf_caching:      ", this.settings.prevent_swf_caching.toString(), "\n", "\t", "button_placeholder_id:    ", this.settings.button_placeholder_id.toString(), "\n", "\t", "button_placeholder:       ", (this.settings.button_placeholder ? "Set" : "Not Set"), "\n", "\t", "button_image_url:         ", this.settings.button_image_url.toString(), "\n", "\t", "button_width:             ", this.settings.button_width.toString(), "\n", "\t", "button_height:            ", this.settings.button_height.toString(), "\n", "\t", "button_text:              ", this.settings.button_text.toString(), "\n", "\t", "button_text_style:        ", this.settings.button_text_style.toString(), "\n", "\t", "button_text_top_padding:  ", this.settings.button_text_top_padding.toString(), "\n", "\t", "button_text_left_padding: ", this.settings.button_text_left_padding.toString(), "\n", "\t", "button_action:            ", this.settings.button_action.toString(), "\n", "\t", "button_disabled:          ", this.settings.button_disabled.toString(), "\n", "\t", "custom_settings:          ", this.settings.custom_settings.toString(), "\n", "Event Handlers:\n", "\t", "swfupload_loaded_handler assigned:  ", (typeof this.settings.swfupload_loaded_handler === "function").toString(), "\n", "\t", "file_dialog_start_handler assigned: ", (typeof this.settings.file_dialog_start_handler === "function").toString(), "\n", "\t", "file_queued_handler assigned:       ", (typeof this.settings.file_queued_handler === "function").toString(), "\n", "\t", "file_queue_error_handler assigned:  ", (typeof this.settings.file_queue_error_handler === "function").toString(), "\n", "\t", "upload_start_handler assigned:      ", (typeof this.settings.upload_start_handler === "function").toString(), "\n", "\t", "upload_progress_handler assigned:   ", (typeof this.settings.upload_progress_handler === "function").toString(), "\n", "\t", "upload_error_handler assigned:      ", (typeof this.settings.upload_error_handler === "function").toString(), "\n", "\t", "upload_success_handler assigned:    ", (typeof this.settings.upload_success_handler === "function").toString(), "\n", "\t", "upload_complete_handler assigned:   ", (typeof this.settings.upload_complete_handler === "function").toString(), "\n", "\t", "debug_handler assigned:             ", (typeof this.settings.debug_handler === "function").toString(), "\n"].join("")) }; SWFUpload.prototype.addSetting = function (e, f, d) { if (f == undefined) { return (this.settings[e] = d) } else { return (this.settings[e] = f) } }; SWFUpload.prototype.getSetting = function (b) { if (this.settings[b] != undefined) { return this.settings[b] } return "" }; SWFUpload.prototype.callFlash = function (functionName, argumentArray) { argumentArray = argumentArray || []; var movieElement = this.getMovieElement(); var returnValue, returnString; try { returnString = movieElement.CallFunction('<invoke name="' + functionName + '" returntype="javascript">' + __flash__argumentsToXML(argumentArray, 0) + "</invoke>"); returnValue = eval(returnString) } catch (ex) { throw "Call to " + functionName + " failed" } if (returnValue != undefined && typeof returnValue.post === "object") { returnValue = this.unescapeFilePostParams(returnValue) } return returnValue }; SWFUpload.prototype.selectFile = function () { this.callFlash("SelectFile") }; SWFUpload.prototype.selectFiles = function () { this.callFlash("SelectFiles") }; SWFUpload.prototype.startUpload = function (b) { this.callFlash("StartUpload", [b]) }; SWFUpload.prototype.cancelUpload = function (c, d) { if (d !== false) { d = true } this.callFlash("CancelUpload", [c, d]) }; SWFUpload.prototype.stopUpload = function () { this.callFlash("StopUpload") }; SWFUpload.prototype.getStats = function () { return this.callFlash("GetStats") }; SWFUpload.prototype.setStats = function (b) { this.callFlash("SetStats", [b]) }; SWFUpload.prototype.getFile = function (b) { if (typeof (b) === "number") { return this.callFlash("GetFileByIndex", [b]) } else { return this.callFlash("GetFile", [b]) } }; SWFUpload.prototype.addFileParam = function (d, e, f) { return this.callFlash("AddFileParam", [d, e, f]) }; SWFUpload.prototype.removeFileParam = function (c, d) { this.callFlash("RemoveFileParam", [c, d]) }; SWFUpload.prototype.setUploadURL = function (b) { this.settings.upload_url = b.toString(); this.callFlash("SetUploadURL", [b]) }; SWFUpload.prototype.setPostParams = function (b) { this.settings.post_params = b; this.callFlash("SetPostParams", [b]) }; SWFUpload.prototype.addPostParam = function (c, d) { this.settings.post_params[c] = d; this.callFlash("SetPostParams", [this.settings.post_params]) }; SWFUpload.prototype.removePostParam = function (b) { delete this.settings.post_params[b]; this.callFlash("SetPostParams", [this.settings.post_params]) }; SWFUpload.prototype.setFileTypes = function (c, d) { this.settings.file_types = c; this.settings.file_types_description = d; this.callFlash("SetFileTypes", [c, d]) }; SWFUpload.prototype.setFileSizeLimit = function (b) { this.settings.file_size_limit = b; this.callFlash("SetFileSizeLimit", [b]) }; SWFUpload.prototype.setFileUploadLimit = function (b) { this.settings.file_upload_limit = b; this.callFlash("SetFileUploadLimit", [b]) }; SWFUpload.prototype.setFileQueueLimit = function (b) { this.settings.file_queue_limit = b; this.callFlash("SetFileQueueLimit", [b]) }; SWFUpload.prototype.setFilePostName = function (b) { this.settings.file_post_name = b; this.callFlash("SetFilePostName", [b]) }; SWFUpload.prototype.setUseQueryString = function (b) { this.settings.use_query_string = b; this.callFlash("SetUseQueryString", [b]) }; SWFUpload.prototype.setRequeueOnError = function (b) { this.settings.requeue_on_error = b; this.callFlash("SetRequeueOnError", [b]) }; SWFUpload.prototype.setHTTPSuccess = function (b) { if (typeof b === "string") { b = b.replace(" ", "").split(",") } this.settings.http_success = b; this.callFlash("SetHTTPSuccess", [b]) }; SWFUpload.prototype.setAssumeSuccessTimeout = function (b) { this.settings.assume_success_timeout = b; this.callFlash("SetAssumeSuccessTimeout", [b]) }; SWFUpload.prototype.setDebugEnabled = function (b) { this.settings.debug_enabled = b; this.callFlash("SetDebugEnabled", [b]) }; SWFUpload.prototype.setButtonImageURL = function (b) { if (b == undefined) { b = "" } this.settings.button_image_url = b; this.callFlash("SetButtonImageURL", [b]) }; SWFUpload.prototype.setButtonDimensions = function (f, d) { this.settings.button_width = f; this.settings.button_height = d; var e = this.getMovieElement(); if (e != undefined) { e.style.width = f + "px"; e.style.height = d + "px" } this.callFlash("SetButtonDimensions", [f, d]) }; SWFUpload.prototype.setButtonText = function (b) { this.settings.button_text = b; this.callFlash("SetButtonText", [b]) }; SWFUpload.prototype.setButtonTextPadding = function (d, c) { this.settings.button_text_top_padding = c; this.settings.button_text_left_padding = d; this.callFlash("SetButtonTextPadding", [d, c]) }; SWFUpload.prototype.setButtonTextStyle = function (b) { this.settings.button_text_style = b; this.callFlash("SetButtonTextStyle", [b]) }; SWFUpload.prototype.setButtonDisabled = function (b) { this.settings.button_disabled = b; this.callFlash("SetButtonDisabled", [b]) }; SWFUpload.prototype.setButtonAction = function (b) { this.settings.button_action = b; this.callFlash("SetButtonAction", [b]) }; SWFUpload.prototype.setButtonCursor = function (b) { this.settings.button_cursor = b; this.callFlash("SetButtonCursor", [b]) }; SWFUpload.prototype.queueEvent = function (e, f) { if (f == undefined) { f = [] } else { if (!(f instanceof Array)) { f = [f] } } var d = this; if (typeof this.settings[e] === "function") { this.eventQueue.push(function () { this.settings[e].apply(this, f) }); setTimeout(function () { d.executeNextEvent() }, 0) } else { if (this.settings[e] !== null) { throw "Event handler " + e + " is unknown or is not a function" } } }; SWFUpload.prototype.executeNextEvent = function () { var b = this.eventQueue ? this.eventQueue.shift() : null; if (typeof (b) === "function") { b.apply(this) } }; SWFUpload.prototype.unescapeFilePostParams = function (i) { var k = /[$]([0-9a-f]{4})/i; var l = {}; var j; if (i != undefined) { for (var g in i.post) { if (i.post.hasOwnProperty(g)) { j = g; var h; while ((h = k.exec(j)) !== null) { j = j.replace(h[0], String.fromCharCode(parseInt("0x" + h[1], 16))) } l[j] = i.post[g] } } i.post = l } return i }; SWFUpload.prototype.testExternalInterface = function () { try { return this.callFlash("TestExternalInterface") } catch (b) { return false } }; SWFUpload.prototype.flashReady = function () { var b = this.getMovieElement(); if (!b) { this.debug("Flash called back ready but the flash movie can't be found."); return } this.cleanUp(b); this.queueEvent("swfupload_loaded_handler") }; SWFUpload.prototype.cleanUp = function (e) { try { if (this.movieElement && typeof (e.CallFunction) === "unknown") { this.debug("Removing Flash functions hooks (this should only run in IE and should prevent memory leaks)"); for (var g in e) { try { if (typeof (e[g]) === "function") { e[g] = null } } catch (f) { } } } } catch (h) { } window.__flash__removeCallback = function (a, b) { try { if (a) { a[b] = null } } catch (c) { } } }; SWFUpload.prototype.fileDialogStart = function () { this.queueEvent("file_dialog_start_handler") }; SWFUpload.prototype.fileQueued = function (b) { b = this.unescapeFilePostParams(b); this.queueEvent("file_queued_handler", b) }; SWFUpload.prototype.fileQueueError = function (d, f, e) { d = this.unescapeFilePostParams(d); this.queueEvent("file_queue_error_handler", [d, f, e]) }; SWFUpload.prototype.fileDialogComplete = function (e, f, d) { this.queueEvent("file_dialog_complete_handler", [e, f, d]) }; SWFUpload.prototype.uploadStart = function (b) { b = this.unescapeFilePostParams(b); this.queueEvent("return_upload_start_handler", b) }; SWFUpload.prototype.returnUploadStart = function (c) { var d; if (typeof this.settings.upload_start_handler === "function") { c = this.unescapeFilePostParams(c); d = this.settings.upload_start_handler.call(this, c) } else { if (this.settings.upload_start_handler != undefined) { throw "upload_start_handler must be a function" } } if (d === undefined) { d = true } d = !!d; this.callFlash("ReturnUploadStart", [d]) }; SWFUpload.prototype.uploadProgress = function (d, f, e) { d = this.unescapeFilePostParams(d); this.queueEvent("upload_progress_handler", [d, f, e]) }; SWFUpload.prototype.uploadError = function (d, f, e) { d = this.unescapeFilePostParams(d); this.queueEvent("upload_error_handler", [d, f, e]) }; SWFUpload.prototype.uploadSuccess = function (e, d, f) { e = this.unescapeFilePostParams(e); this.queueEvent("upload_success_handler", [e, d, f]) }; SWFUpload.prototype.uploadComplete = function (b) { b = this.unescapeFilePostParams(b); this.queueEvent("upload_complete_handler", b) }; SWFUpload.prototype.debug = function (b) { this.queueEvent("debug_handler", b) }; SWFUpload.prototype.debugMessage = function (g) { if (this.settings.debug) { var e, h = []; if (typeof g === "object" && typeof g.name === "string" && typeof g.message === "string") { for (var f in g) { if (g.hasOwnProperty(f)) { h.push(f + ": " + g[f]) } } e = h.join("\n") || ""; h = e.split("\n"); e = "EXCEPTION: " + h.join("\nEXCEPTION: "); SWFUpload.Console.writeLine(e) } else { SWFUpload.Console.writeLine(g) } } }; SWFUpload.Console = {}; SWFUpload.Console.writeLine = function (h) { var f, e; try { f = document.getElementById("SWFUpload_Console"); if (!f) { e = document.createElement("form"); document.getElementsByTagName("body")[0].appendChild(e); f = document.createElement("textarea"); f.id = "SWFUpload_Console"; f.style.fontFamily = "monospace"; f.setAttribute("wrap", "off"); f.wrap = "off"; f.style.overflow = "auto"; f.style.width = "700px"; f.style.height = "350px"; f.style.margin = "5px"; e.appendChild(f) } f.value += h + "\n"; f.scrollTop = f.scrollHeight - f.clientHeight } catch (g) { alert("Exception: " + g.name + " Message: " + g.message) } }; (function (a) { var c = { init: function (d, e) { return this.each(function () { var i = a(this); var g = i.clone(); var m = a.extend({ id: i.attr("id"), swf: "uploadify.swf", uploader: "uploadify.php", auto: true, buttonClass: "", buttonCursor: "hand", buttonImage: null, buttonText: "SELECT FILES", checkExisting: false, debug: false, fileObjName: "Filedata", fileSizeLimit: 0, fileTypeDesc: "All Files", fileTypeExts: "*.*", height: 30, itemTemplate: false, method: "post", multi: true, formData: {}, preventCaching: true, progressData: "percentage", queueID: false, queueSizeLimit: 999, removeCompleted: true, removeTimeout: 3, requeueErrors: false, successTimeout: 30, uploadLimit: 0, width: 120, overrideEvents: [] }, d); var o = { assume_success_timeout: m.successTimeout, button_placeholder_id: m.id, button_width: m.width, button_height: m.height, button_text: null, button_text_style: null, button_text_top_padding: 0, button_text_left_padding: 0, button_action: (m.multi ? SWFUpload.BUTTON_ACTION.SELECT_FILES : SWFUpload.BUTTON_ACTION.SELECT_FILE), button_disabled: false, button_cursor: (m.buttonCursor == "arrow" ? SWFUpload.CURSOR.ARROW : SWFUpload.CURSOR.HAND), button_window_mode: SWFUpload.WINDOW_MODE.TRANSPARENT, debug: m.debug, requeue_on_error: m.requeueErrors, file_post_name: m.fileObjName, file_size_limit: m.fileSizeLimit, file_types: m.fileTypeExts, file_types_description: m.fileTypeDesc, file_queue_limit: m.queueSizeLimit, file_upload_limit: m.uploadLimit, flash_url: m.swf, prevent_swf_caching: m.preventCaching, post_params: m.formData, upload_url: m.uploader, use_query_string: (m.method == "get"), file_dialog_complete_handler: b.onDialogClose, file_dialog_start_handler: b.onDialogOpen, file_queued_handler: b.onSelect, file_queue_error_handler: b.onSelectError, swfupload_loaded_handler: m.onSWFReady, upload_complete_handler: b.onUploadComplete, upload_error_handler: b.onUploadError, upload_progress_handler: b.onUploadProgress, upload_start_handler: b.onUploadStart, upload_success_handler: b.onUploadSuccess }; if (e) { o = a.extend(o, e) } o = a.extend(o, m); var l = swfobject.getFlashPlayerVersion(); var k = (l.major >= 9); if (k) { window["uploadify_" + m.id] = new SWFUpload(o); var n = window["uploadify_" + m.id]; i.data("uploadify", n); var j = a("<div />", { id: m.id, "class": "uploadify", css: { height: m.height + "px", width: m.width + "px" } }); a("#" + n.movieName).wrap(j); j = a("#" + m.id); j.data("uploadify", n); var f = a("<div />", { id: m.id + "-button", "class": "uploadify-button " + m.buttonClass }); if (m.buttonImage) { f.css({ "background-image": "url('" + m.buttonImage + "')", "text-indent": "-9999px" }) } f.html('<span class="uploadify-button-text">' + m.buttonText + "</span>").css({ height: m.height + "px", "line-height": m.height + "px", width: m.width + "px" }); j.append(f); a("#" + n.movieName).css({ position: "absolute", "z-index": 1 }); if (!m.queueID) { var h = a("<div />", { id: m.id + "-queue", "class": "uploadify-queue" }); j.after(h); n.settings.queueID = m.id + "-queue"; n.settings.defaultQueue = true } n.queueData = { files: {}, filesSelected: 0, filesQueued: 0, filesReplaced: 0, filesCancelled: 0, filesErrored: 0, uploadsSuccessful: 0, uploadsErrored: 0, averageSpeed: 0, queueLength: 0, queueSize: 0, uploadSize: 0, queueBytesUploaded: 0, uploadQueue: [], errorMsg: "‰ª•‰∏ãÊñá‰ª∂‰∏çËÉΩÊ∑ªÂä†Âà∞ÈòüÂàó‰∏≠Ôºö" }; n.original = g; n.wrapper = j; n.button = f; n.queue = h; if (m.onInit) { m.onInit.call(i, n) } } else { if (m.onFallback) { m.onFallback.call(i) } } }) }, queueLength: function () { var d = a(this).data("uploadify"); if (d != null) { return a(this).data("uploadify").queueData.queueLength } else { return 0 } }, cancel: function (e, f) { var d = arguments; this.each(function () { var g = a(this), m = g.data("uploadify"), l = m.settings, h = -1; if (d[0]) { if (d[0] == "*") { var k = m.queueData.queueLength; a("#" + l.queueID).find(".uploadify-queue-item").each(function () { h++; if (d[1] === true) { m.cancelUpload(a(this).attr("id"), false) } else { m.cancelUpload(a(this).attr("id")) } a(this).find(".data").removeClass("data").html(" - Cancelled"); a(this).find(".uploadify-progress-bar").remove(); a(this).delay(1000 + 100 * h).fadeOut(500, function () { a(this).remove() }) }); m.queueData.queueSize = 0; m.queueData.queueLength = 0; if (l.onClearQueue) { l.onClearQueue.call(g, k) } } else { for (var j = 0; j < d.length; j++) { m.cancelUpload(d[j]); a("#" + d[j]).find(".data").removeClass("data").html(" - Cancelled"); a("#" + d[j]).find(".uploadify-progress-bar").remove(); a("#" + d[j]).delay(1000 + 100 * j).fadeOut(500, function () { a(this).remove() }) } } } else { var i = a("#" + l.queueID).find(".uploadify-queue-item").get(0); $item = a(i); m.cancelUpload($item.attr("id")); $item.find(".data").removeClass("data").html(" - Cancelled"); $item.find(".uploadify-progress-bar").remove(); $item.delay(1000).fadeOut(500, function () { a(this).remove() }) } }) }, destroy: function () { this.each(function () { var d = a(this), f = d.data("uploadify"), e = f.settings; f.destroy(); if (e.defaultQueue) { a("#" + e.queueID).remove() } a("#" + e.id).replaceWith(f.original); if (e.onDestroy) { e.onDestroy.call(this) } delete f }) }, disable: function (d) { this.each(function () { var e = a(this), g = e.data("uploadify"), f = g.settings; if (d) { g.button.addClass("disabled"); if (f.onDisable) { f.onDisable.call(this) } } else { g.button.removeClass("disabled"); if (f.onEnable) { f.onEnable.call(this) } } g.setButtonDisabled(d) }) }, settings: function (e, h, f) { var d = arguments; var g = h; this.each(function () { var i = a(this), l = i.data("uploadify"), k = l.settings; if (typeof (d[0]) == "object") { for (var j in h) { setData(j, h[j]) } } if (d.length === 1) { g = k[e] } else { switch (e) { case "uploader": l.setUploadURL(h); break; case "formData": if (!f) { h = a.extend(k.formData, h) } l.setPostParams(k.formData); break; case "method": if (h == "get") { l.setUseQueryString(true) } else { l.setUseQueryString(false) } break; case "fileObjName": l.setFilePostName(h); break; case "fileTypeExts": l.setFileTypes(h, k.fileTypeDesc); break; case "fileTypeDesc": l.setFileTypes(k.fileTypeExts, h); break; case "fileSizeLimit": l.setFileSizeLimit(h); break; case "uploadLimit": l.setFileUploadLimit(h); break; case "queueSizeLimit": l.setFileQueueLimit(h); break; case "buttonImage": l.button.css("background-image", settingValue); break; case "buttonCursor": if (h == "arrow") { l.setButtonCursor(SWFUpload.CURSOR.ARROW) } else { l.setButtonCursor(SWFUpload.CURSOR.HAND) } break; case "buttonText": a("#" + k.id + "-button").find(".uploadify-button-text").html(h); break; case "width": l.setButtonDimensions(h, k.height); break; case "height": l.setButtonDimensions(k.width, h); break; case "multi": if (h) { l.setButtonAction(SWFUpload.BUTTON_ACTION.SELECT_FILES) } else { l.setButtonAction(SWFUpload.BUTTON_ACTION.SELECT_FILE) } break } k[e] = h } }); if (d.length === 1) { return g } }, stop: function () { this.each(function () { var d = a(this), e = d.data("uploadify"); e.queueData.averageSpeed = 0; e.queueData.uploadSize = 0; e.queueData.bytesUploaded = 0; e.queueData.uploadQueue = []; e.stopUpload() }) }, upload: function () { var d = arguments; this.each(function () { var e = a(this), g = e.data("uploadify"); g.queueData.averageSpeed = 0; g.queueData.uploadSize = 0; g.queueData.bytesUploaded = 0; g.queueData.uploadQueue = []; if (d[0]) { if (d[0] == "*") { g.queueData.uploadSize = g.queueData.queueSize; g.queueData.uploadQueue.push("*"); g.startUpload() } else { for (var f = 0; f < d.length; f++) { g.queueData.uploadSize += g.queueData.files[d[f]].size; g.queueData.uploadQueue.push(d[f]) } g.startUpload(g.queueData.uploadQueue.shift()) } } else { g.startUpload() } }) } }; var b = { onDialogOpen: function () { var d = this.settings; this.queueData.errorMsg = "‰ª•‰∏ãÊñá‰ª∂‰∏çËÉΩÊ∑ªÂä†Âà∞ÈòüÂàó‰∏≠Ôºö"; this.queueData.filesReplaced = 0; this.queueData.filesCancelled = 0; if (d.onDialogOpen) { d.onDialogOpen.call(this) } }, onDialogClose: function (e, d, f) { var g = this.settings; this.queueData.filesErrored = e - d; this.queueData.filesSelected = e; this.queueData.filesQueued = d - this.queueData.filesCancelled; this.queueData.queueLength = f; if (a.inArray("onDialogClose", g.overrideEvents) < 0) { if (this.queueData.filesErrored > 0) { alert(this.queueData.errorMsg) } } if (g.onDialogClose) { g.onDialogClose.call(this, this.queueData) } if (g.auto) { a("#" + g.id).uploadify("upload", "*") } }, onSelect: function (f) { var m = this.settings; var k = {}; for (var j in this.queueData.files) { k = this.queueData.files[j]; if (k.uploaded != true && k.name == f.name) { var l = confirm('The file named "' + f.name + '" is already in the queue.\nDo you want to replace the existing item in the queue?'); if (!l) { this.cancelUpload(f.id); this.queueData.filesCancelled++; return false } else { a("#" + k.id).remove(); this.cancelUpload(k.id); this.queueData.filesReplaced++ } } } var h = Math.round(f.size / 1024); var o = "KB"; if (h > 1000) { h = Math.round(h / 1000); o = "MB" } var i = h.toString().split("."); h = i[0]; if (i.length > 1) { h += "." + i[1].substr(0, 2) } h += o; var g = f.name; if (g.length > 25) { g = g.substr(0, 25) + "..." } itemData = { fileID: f.id, instanceID: m.id, fileName: g, fileSize: h }; if (m.itemTemplate == false) { m.itemTemplate = '<div id="${fileID}" class="uploadify-queue-item">					<div class="cancel">						<a href="javascript:$(\'#${instanceID}\').uploadify(\'cancel\', \'${fileID}\')">X</a>					</div>					<span class="fileName">${fileName} (${fileSize})</span><span class="data"></span>					<div class="uploadify-progress">						<div class="uploadify-progress-bar"><!--Progress Bar--></div>					</div>				</div>' } if (a.inArray("onSelect", m.overrideEvents) < 0) { itemHTML = m.itemTemplate; for (var e in itemData) { itemHTML = itemHTML.replace(new RegExp("\\$\\{" + e + "\\}", "g"), itemData[e]) } a("#" + m.queueID).append(itemHTML) } this.queueData.queueSize += f.size; this.queueData.files[f.id] = f; if (m.onSelect) { m.onSelect.apply(this, arguments) } }, onSelectError: function (f, d, e) { var g = this.settings; if (a.inArray("onSelectError", g.overrideEvents) < 0) { switch (d) { case SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED: if (g.queueSizeLimit > e) { this.queueData.errorMsg += "\nThe number of files selected exceeds the remaining upload limit (" + e + ")." } else { this.queueData.errorMsg += "\nThe number of files selected exceeds the queue size limit (" + g.queueSizeLimit + ")." } break; case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT: this.queueData.errorMsg += '\nÊñá‰ª∂ "' + f.name + '" Â§ßÂ∞èË∂ÖÂá∫Á≥ªÁªüÈôêÂà∂ (' + g.fileSizeLimit + ")ÔºåËØ∑ÈáçÊñ∞‰∏ä‰º†„ÄÇ"; break; case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE: this.queueData.errorMsg += '\nThe file "' + f.name + '" is empty.'; break; case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT: this.queueData.errorMsg += '\nThe file "' + f.name + '" is not an accepted file type (' + g.fileTypeDesc + ")."; break } } if (d != SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED) { delete this.queueData.files[f.id] } if (g.onSelectError) { g.onSelectError.apply(this, arguments) } }, onQueueComplete: function () { if (this.settings.onQueueComplete) { this.settings.onQueueComplete.call(this, this.settings.queueData) } }, onUploadComplete: function (d) { var e = this.settings, g = this; var f = this.getStats(); this.queueData.queueLength = f.files_queued; if (this.queueData.uploadQueue[0] == "*") { if (this.queueData.queueLength > 0) { this.startUpload() } else { this.queueData.uploadQueue = []; if (e.onQueueComplete) { e.onQueueComplete.call(this, this.queueData) } } } else { if (this.queueData.uploadQueue.length > 0) { this.startUpload(this.queueData.uploadQueue.shift()) } else { this.queueData.uploadQueue = []; if (e.onQueueComplete) { e.onQueueComplete.call(this, this.queueData) } } } if (a.inArray("onUploadComplete", e.overrideEvents) < 0) { if (e.removeCompleted) { switch (d.filestatus) { case SWFUpload.FILE_STATUS.COMPLETE: setTimeout(function () { if (a("#" + d.id)) { g.queueData.queueSize -= d.size; g.queueData.queueLength -= 1; delete g.queueData.files[d.id]; a("#" + d.id).fadeOut(500, function () { a(this).remove() }) } }, e.removeTimeout * 1000); break; case SWFUpload.FILE_STATUS.ERROR: if (!e.requeueErrors) { setTimeout(function () { if (a("#" + d.id)) { g.queueData.queueSize -= d.size; g.queueData.queueLength -= 1; delete g.queueData.files[d.id]; a("#" + d.id).fadeOut(500, function () { a(this).remove() }) } }, e.removeTimeout * 1000) } break } } else { d.uploaded = true } } if (e.onUploadComplete) { e.onUploadComplete.call(this, d) } }, onUploadError: function (g, d, e) { var h = this.settings; var f = "Error"; switch (d) { case SWFUpload.UPLOAD_ERROR.HTTP_ERROR: f = "HTTP Error (" + e + ")"; break; case SWFUpload.UPLOAD_ERROR.MISSING_UPLOAD_URL: f = "Missing Upload URL"; break; case SWFUpload.UPLOAD_ERROR.IO_ERROR: f = "IO Error"; break; case SWFUpload.UPLOAD_ERROR.SECURITY_ERROR: f = "Security Error"; break; case SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED: alert("The upload limit has been reached (" + e + ")."); f = "Exceeds Upload Limit"; break; case SWFUpload.UPLOAD_ERROR.UPLOAD_FAILED: f = "Failed"; break; case SWFUpload.UPLOAD_ERROR.SPECIFIED_FILE_ID_NOT_FOUND: break; case SWFUpload.UPLOAD_ERROR.FILE_VALIDATION_FAILED: f = "Validation Error"; break; case SWFUpload.UPLOAD_ERROR.FILE_CANCELLED: f = "Cancelled"; this.queueData.queueSize -= g.size; this.queueData.queueLength -= 1; if (g.status == SWFUpload.FILE_STATUS.IN_PROGRESS || a.inArray(g.id, this.queueData.uploadQueue) >= 0) { this.queueData.uploadSize -= g.size } if (h.onCancel) { h.onCancel.call(this, g) } delete this.queueData.files[g.id]; break; case SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED: f = "Stopped"; break } if (a.inArray("onUploadError", h.overrideEvents) < 0) { if (d != SWFUpload.UPLOAD_ERROR.FILE_CANCELLED && d != SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED) { a("#" + g.id).addClass("uploadify-error") } a("#" + g.id).find(".uploadify-progress-bar").css("width", "1px"); if (d != SWFUpload.UPLOAD_ERROR.SPECIFIED_FILE_ID_NOT_FOUND && g.status != SWFUpload.FILE_STATUS.COMPLETE) { a("#" + g.id).find(".data").html(" - " + f) } } var i = this.getStats(); this.queueData.uploadsErrored = i.upload_errors; if (h.onUploadError) { h.onUploadError.call(this, g, d, e, f) } }, onUploadProgress: function (d, e, f) { var n = this.settings; var p = new Date(); var k = p.getTime(); var i = k - this.timer; if (i > 500) { this.timer = k } var h = e - this.bytesLoaded; this.bytesLoaded = e; var m = this.queueData.queueBytesUploaded + e; var l = Math.round(e / f * 100); var o = "KB/s"; var j = 0; var g = (h / 1024) / (i / 1000); g = Math.floor(g * 10) / 10; if (this.queueData.averageSpeed > 0) { this.queueData.averageSpeed = Math.floor((this.queueData.averageSpeed + g) / 2) } else { this.queueData.averageSpeed = Math.floor(g) } if (g > 1000) { j = (g * 0.001); this.queueData.averageSpeed = Math.floor(j); o = "MB/s" } if (a.inArray("onUploadProgress", n.overrideEvents) < 0) { if (n.progressData == "percentage") { a("#" + d.id).find(".data").html(" - " + l + "%") } else { if (n.progressData == "speed" && i > 500) { a("#" + d.id).find(".data").html(" - " + this.queueData.averageSpeed + o) } } a("#" + d.id).find(".uploadify-progress-bar").css("width", l + "%") } if (n.onUploadProgress) { n.onUploadProgress.call(this, d, e, f, m, this.queueData.uploadSize) } }, onUploadStart: function (d) { var e = this.settings; var f = new Date(); this.timer = f.getTime(); this.bytesLoaded = 0; if (this.queueData.uploadQueue.length == 0) { this.queueData.uploadSize = d.size } if (e.checkExisting) { a.ajax({ type: "POST", async: false, url: e.checkExisting, data: { filename: d.name }, success: function (g) { if (g == 1) { var h = confirm('A file with the name "' + d.name + '" already exists on the server.\nWould you like to replace the existing file?'); if (!h) { this.cancelUpload(d.id); a("#" + d.id).remove(); if (this.queueData.uploadQueue.length > 0 && this.queueData.queueLength > 0) { if (this.queueData.uploadQueue[0] == "*") { this.startUpload() } else { this.startUpload(this.queueData.uploadQueue.shift()) } } } } } }) } if (e.onUploadStart) { e.onUploadStart.call(this, d) } }, onUploadSuccess: function (e, d, f) { var g = this.settings; var h = this.getStats(); this.queueData.uploadsSuccessful = h.successful_uploads; this.queueData.queueBytesUploaded += e.size; if (a.inArray("onUploadSuccess", g.overrideEvents) < 0) { a("#" + e.id).find(".data").html(" - Complete") } if (g.onUploadSuccess) { g.onUploadSuccess.call(this, e, d, f) } } }; a.fn.uploadify = function (d) { if (c[d]) { return c[d].apply(this, Array.prototype.slice.call(arguments, 1)) } else { if (typeof d === "object" || !d) { return c.init.apply(this, arguments) } else { a.error("The method " + d + " does not exist in $.uploadify") } } } })($);