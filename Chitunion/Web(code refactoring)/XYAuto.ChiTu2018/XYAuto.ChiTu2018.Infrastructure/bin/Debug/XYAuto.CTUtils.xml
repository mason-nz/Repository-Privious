<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XYAuto.CTUtils</name>
    </assembly>
    <members>
        <member name="T:XYAuto.CTUtils.Caching.HttpCacheHelper">
            <summary>
            注释：HttpRuntime.Cache 类的基本封装
            作者：masj
            日期：2018/5/14 19:25:10
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Caching.HttpCacheHelper.GetCache(System.String)">
            <summary>  
            获取当前应用程序指定CacheKey的Cache值  
            </summary>  
            <param name="cacheKey">指定缓存的key</param>  
            <returns>返回指定key中的缓存内容</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Caching.HttpCacheHelper.SetCache(System.String,System.Object)">
            <summary>  
            设置当前应用程序指定CacheKey的Cache值
            </summary>  
            <param name="cacheKey">指定缓存的key</param>  
            <param name="objObject">添加缓存内容</param>  
        </member>
        <member name="M:XYAuto.CTUtils.Caching.HttpCacheHelper.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>  
            设置当前应用程序指定CacheKey的Cache值
            </summary>  
            <param name="cacheKey">指定缓存的key</param>  
            <param name="objObject">添加缓存内容</param>
            <param name="absoluteExpiration">设置绝对过期时间</param>
            <param name="slidingExpiration">设置可调过期时间，默认为：TimeSpan.Zero</param>  
        </member>
        <member name="M:XYAuto.CTUtils.Caching.HttpCacheHelper.RemoveKeyCache(System.String)">
            <summary>  
            清除单一键缓存
            </summary>
            <param name="cacheKey">指定缓存的key</param>  
        </member>
        <member name="M:XYAuto.CTUtils.Caching.HttpCacheHelper.RemoveAllCache">
            <summary>  
            清除所有缓存  
            </summary>  
        </member>
        <member name="T:XYAuto.CTUtils.Config.ConfigurationUtil">
            <summary>
            注释：获取项目配置文件中配置信息相关
            作者：masj
            日期：2018/5/14 10:50:28
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Config.ConfigurationUtil.GetAppSettingValue(System.String)">
            <summary>
            获取配置文件指定Key的内容
            </summary>
            <param name="configKey">指定Key</param>
            <returns>返回具体配置内容，若找不到配置，则抛出异常</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Config.ConfigurationUtil.GetAppSettingValue(System.String,System.Boolean)">
            <summary>
            获取配置文件指定Key的内容
            </summary>
            <param name="configKey">指定Key</param>
            <param name="isThrowExceptionIfNotExist">是否抛出异常</param>
            <returns>返回具体配置内容，根据指定的参数来决定是否抛出异常</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Config.ConfigurationUtil.GetAppSettingValue(System.String,System.String)">
            <summary>
            获取配置文件指定Key的内容
            </summary>
            <param name="configKey">指定Key</param>
            <param name="defaultValue">若发现指定key中，没有配置内容，则取此参数作为默认值</param>
            <returns>返回具体配置内容，若找不到配置，返回默认值</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Config.ConfigurationUtil.GetConnectionString(System.String)">
            <summary>
            获取配置文件指定Key的内容
            </summary>
            <param name="configName">指定Key</param>
            <returns>返回具体配置内容，若找不到配置，则抛出异常</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Config.ConfigurationUtil.GetConnectionString(System.String,System.Boolean)">
            <summary>
            获取配置文件指定Key的内容
            </summary>
            <param name="configName">指定Key</param>
            <param name="isThrowExceptionIfNotExist">是否抛出异常</param>
            <returns>返回具体配置内容，根据指定的参数来决定是否抛出异常</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Config.ConfigurationUtil.GetConnectionString(System.String,System.String)">
            <summary>
            获取配置文件指定Key的内容
            </summary>
            <param name="configName">指定Key</param>
            <param name="defaultValue">若发现指定key中，没有配置内容，则取此参数作为默认值</param>
            <returns>返回具体配置内容，若找不到配置，返回默认值</returns>
        </member>
        <member name="T:XYAuto.CTUtils.Email.CTMail">
            <summary>
            注释：CTMail
            作者：masj
            日期：2018/5/14 10:45:42
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Email.CTMail.Attachments">
            <summary>
            获取或设置邮件的附件
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Email.CTMail.From">
            <summary>
            获取或设置此电子邮件的发信人地址，默认为“信息系统研发中心[isdc@bitauto.com]”
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Email.CTMail.To">
            <summary>
            获取包含此电子邮件的收件人的地址集合。
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Email.CTMail.CC">
            <summary>
            获取包含此电子邮件的抄送 (CC) 收件人的地址集合。
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Email.CTMail.Bcc">
            <summary>
            获取包含此电子邮件的密件抄送 (BCC) 收件人的地址集合。
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Email.CTMail.Subject">
            <summary>
            获取或设置此电子邮件的主题。
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Email.CTMail.TemplateName">
            <summary>
            获取或设置此电子邮件的模板名称。
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Email.CTMail.TemplatePath">
            <summary>
            获取或设置此电子邮件的模板路径，如果为空则使用config中设置
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Email.CTMail.Parameters">
            <summary>
            获取此电子邮件的参数集合。
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Email.CTMail.GetBody">
            <summary>
            获取邮件主体内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Email.CTMail.GetMail">
            <summary>
            获取邮件
            </summary>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Email.CTMail.Send">
            <summary>
            发送电子邮件（同步）
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Email.CTMail.SendAsync(System.Action{System.String})">
            <summary>
            发送电子邮件（异步）
            </summary>
            <param name="_actinCompletedCallback">邮件发送完成回调函数</param>
        </member>
        <member name="M:XYAuto.CTUtils.Email.CTMail.SendCompletedCallback(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            异步操作完成后执行回调方法
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XYAuto.CTUtils.Email.CTMail.Send(System.String,System.String,System.String)">
            <summary>
            发送电子邮件
            </summary>
            <param name="host">邮件服务器</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="T:XYAuto.CTUtils.Email.EmailHelper">
            <summary>
            注释：发送邮件相关
            作者：masj
            日期：2018/5/14 10:40:44
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Email.EmailHelper.SendErrorMail(System.String,System.String,System.String[])">
            <summary>
            发送报错邮件
            </summary>
            <param name="mailBody">邮件内容</param>
            <param name="subject">邮件标题</param>
            <param name="reciver">接收者Email</param>
        </member>
        <member name="M:XYAuto.CTUtils.Email.EmailHelper.SendMail(System.Tuple{System.String,System.String},System.String,System.String[])">
            <summary>
            发送邮件
            </summary>
            <param name="mailBody">邮件内容（分为2部分，第一个参数为邮件接收者名称；第二个参数为邮件正文内容）</param>
            <param name="subject">邮件标题</param>
            <param name="reciver">接收者Email</param>
        </member>
        <member name="M:XYAuto.CTUtils.Email.EmailHelper.SendMail(System.String,System.String[],System.String[],System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="mailBody1">邮件内容1</param>
            <param name="mailBody2">邮件内容2</param>
            <param name="subject">邮件标题</param>
            <param name="reciver">接收者Email</param>
        </member>
        <member name="M:XYAuto.CTUtils.Email.EmailHelper.SendMailByTemplateAndAttach(System.String,System.String[],System.String,System.String[],System.String[],System.String)">
            <summary>
            
            </summary>
            <param name="templateName">模板名称</param>
            <param name="mailBody">邮件内容</param>
            <param name="subject">邮件标题</param>
            <param name="reciver">接收者Email</param>
            <param name="copyto">抄送人Email</param>
            <param name="attachPath">附件路径</param>
        </member>
        <member name="M:XYAuto.CTUtils.Email.EmailHelper.AddAttachments(System.String)">
            <summary>  
            添加附件  
            </summary>  
            <param name="attachmentsPath">附件的路径集合，以分号分隔</param>  
        </member>
        <member name="T:XYAuto.CTUtils.Html.EncodeHelper">
            <summary>
            注释：EncodeHelper
            作者：masj
            日期：2018/5/14 16:12:14
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Html.EncodeHelper.EscapeString(System.String)">
            <summary>
            ASPNET实现javascript的escape 
            </summary>
            <param name="str">字符串</param>
            <returns>返回加密后字符串</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.EncodeHelper.UnEscapeString(System.String)">
            <summary>
            ASPNET实现javascript的unescape
            </summary>
            <param name="s">字符串</param>
            <returns>返回解密后字符串</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.EncodeHelper.HtmlEncode(System.String)">
            <summary>
            HTML特殊字符转换(包含：大于、小于、空格、反斜杠换行等)
            </summary>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.EncodeHelper.HtmlDecode(System.String)">
            <summary>
            HTML特殊字符(包含：大于、小于、空格、反斜杠换行等)
            </summary>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <member name="T:XYAuto.CTUtils.Html.HtmlHelper">
            <summary>
            注释：HtmlHelper
            作者：masj
            日期：2018/5/9 15:47:30
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.GetQueryStringByUrl(System.String,System.String)">
            <summary>  
            获取url字符串参数，返回参数值字符串  
            </summary>  
            <param name="name">参数名称</param>  
            <param name="url">url字符串</param>  
            <returns>返回指定的参数内容，若查不到则返回字符串空</returns>  
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.GetQueryListByUrl(System.String)">
            <summary>
            根据URL获取参数列表
            </summary>
            <param name="url">URL</param>
            <returns>返回参数列表，若没有参数则返回空集合</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.HttpGetRequest(System.String,System.Net.CookieCollection)">
            <summary>
            创建Get方式的HTTP请求
            </summary>
            <param name="url">请求UrL地址</param>
            <param name="cookies">携带Cookies参数</param>
            <returns>返回HttpWebResponse对象</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.HttpGetRequestToString(System.String,System.Net.CookieCollection)">
            <summary>
            创建Get方式的HTTP请求，且返回ResponseString
            </summary>
            <param name="url">请求UrL地址</param>
            <param name="cookies">携带Cookies参数</param>
            <returns>返回Response字符串，若出现异常则返回null</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            验证证书
            <summary>
            验证证书
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.HttpPostRequest(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Net.CookieCollection,System.Int32)">
            <summary>
            创建Post方式的HTTP请求
            </summary>
            <param name="url">请求UrL地址</param>
            <param name="parameters">参数字典</param>
            <param name="cookies">携带Cookies参数，默认为null</param>
            <param name="requestContentType">请求类型，默认为application/x-www-form-urlencoded</param>
            <returns>返回HttpWebResponse对象</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.HttpPostRequest(System.String,System.String,System.Net.CookieCollection,System.Int32)">
            <summary>
            创建Post方式的HTTP请求
            </summary>
            <param name="url">请求UrL地址</param>
            <param name="queryjson">参数json字符串</param>
            <param name="cookies">携带Cookies参数，默认为null</param>
            <param name="requestContentType">请求类型，默认为application/x-www-form-urlencoded</param>
            <returns>返回HttpWebResponse对象</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.HttpPostRequestToString(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Net.CookieCollection,System.Int32)">
            <summary>
            创建Post方式的HTTP请求
            </summary>
            <param name="url">请求UrL地址</param>
            <param name="parameters">参数字典</param>
            <param name="cookies">携带Cookies参数，默认为null</param>
            <param name="requestContentType">请求类型，默认为application/x-www-form-urlencoded</param>
            <returns>返回Response字符串，若出现异常则返回null</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.HttpPostRequestToString(System.String,System.String,System.Net.CookieCollection,System.Int32)">
            <summary>
            创建Post方式的HTTP请求
            </summary>
            <param name="url">请求UrL地址</param>
            <param name="queryjson">参数json字符串</param>
            <param name="cookies">携带Cookies参数，默认为null</param>
            <param name="requestContentType">请求类型，默认为application/x-www-form-urlencoded</param>
            <returns>返回Response字符串，若出现异常则返回null</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.HttpPostRequestByMultipart(System.String,System.Int32,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建Post方式的HTTP请求（上传文件）
            </summary>
            <param name="url">请求URL</param>
            <param name="timeOut">请求超时时间</param>
            <param name="fileKeyName">form-data中的name</param>
            <param name="filePath">form-data中的filename</param>
            <param name="stringDict">写入的字符串字典</param>
            <returns>返回请求的字符串内容</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.SendPostRequest(System.String,System.Net.HttpWebRequest)">
            发送POST数据  
            <summary>
            发送POST数据  
            </summary>
            <param name="queryjson"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.CreateQueryJson(System.Collections.Generic.IDictionary{System.String,System.String})">
            创建查询json字符串
            <summary>
            创建查询json字符串
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.CreatePostRequest(System.String,System.Net.CookieCollection,System.Int32)">
            创建HttpWebRequest
            <summary>
            创建HttpWebRequest
            </summary>
            <param name="url"></param>
            <param name="cookies"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.HtmlHelper.GetResponseString(System.Net.HttpWebResponse)">
            获取请求的数据
            <summary>
            获取请求的数据
            </summary>
        </member>
        <member name="T:XYAuto.CTUtils.Html.RequestContentType">
            <summary>
            注释：RequestContentType
            作者：masj
            日期：2018/5/15 20:05:55
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
            <summary>
            Post提交时，ContentType枚举类型
            </summary>
        </member>
        <member name="F:XYAuto.CTUtils.Html.RequestContentType.Json">
            <summary>
            application/json
            </summary>
        </member>
        <member name="F:XYAuto.CTUtils.Html.RequestContentType.Form">
            <summary>
            application/x-www-form-urlencoded
            </summary>
        </member>
        <member name="F:XYAuto.CTUtils.Html.RequestContentType.Multipart">
            <summary>
            multipart/form-data
            </summary>
        </member>
        <member name="T:XYAuto.CTUtils.Html.RequestHelper">
            <summary>
            注释：RequestHelper
            作者：masj
            日期：2018/5/14 16:06:31
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Html.RequestHelper.GetCurrentRequestFormStr(System.String)">
            <summary>
            获取请求参数从表单中查找
            </summary>
            <param name="r">参数名</param>
            <returns>返回参数值，若找不到则返回字符串空</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.RequestHelper.GetCurrentRequestStr(System.String)">
            <summary>
            获取请求参数从表单或QueryString中查找
            </summary>
            <param name="r">参数名</param>
            <returns>返回参数值，若找不到则返回字符串空</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.RequestHelper.GetCurrentRequestInt(System.String)">
            <summary>
            获取请求参数从表单或QueryString中查找
            </summary>
            <param name="r">参数名</param>
            <returns>返回参数值，若找不到则返回-1</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.RequestHelper.GetCurrentRequestFormInt(System.String)">
            <summary>
            获取请求参数从表单中查找
            </summary>
            <param name="r">参数名</param>
            <returns>返回参数值，若找不到则返回-1</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.RequestHelper.GetCurrentRequestQueryStr(System.String)">
            <summary>
            获取请求参数从QueryString中查找
            </summary>
            <param name="r">参数名</param>
            <returns>返回参数值，若找不到则返回字符串空</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Html.RequestHelper.GetIpAddress(System.String)">
            <summary>
            获取当前发出请求的客户端[IP]地址
            </summary>
            <param name="defaultVal">若获取不到IP，则按照给定的默认值来返回</param>
            <returns>返回IP地址，若找不到则返回NULL</returns>
        </member>
        <member name="T:XYAuto.CTUtils.Image.FastDFSHelper">
            <summary>
            注释：基于FastDFS，图片文件本地化上传操作，
            调用次方法需要自行把Git目录中：Lib/WebPConvert/NoesisWebP.dll 文件复制到bin目录，为了解决webp格式图片转换Image对象的问题
            作者：masj
            日期：2018/5/15 10:18:40
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Image.FastDFSHelper.Delete(System.String)">
            <summary>
            删除图片
            </summary>
            <param name="imgUrl">图片url地址</param>
            <returns>成功返回true，否则返回false</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Image.FastDFSHelper.CleanImg(System.String)">
            <summary>
            本地化图片
            </summary>
            <param name="imgUrl">图片URL地址</param>
            <returns>返回本地化图片对象（包含图片url，宽高等）</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Image.FastDFSHelper.CutHeadImage(System.String,System.Int32,System.Int32)">
            <summary>
            根据原有图片URL，裁剪3：2比例图片
            </summary>
            <param name="imgUrl">图片URL</param>
            <param name="width">裁图宽度，默认300</param>
            <param name="height">裁图高度，默认200</param>
            <returns>裁剪后的图片URL，若出现异常，则返回空</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Image.FastDFSHelper.CutForCustom(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            指定长宽裁剪
            按模版比例最大范围的裁剪图片并缩放至模版尺寸
            </summary>
            <param name="initImage">原图Image对象</param>
            <param name="maxWidth">最大宽(单位:px)</param>
            <param name="maxHeight">最大高(单位:px)</param>
            <param name="quality">质量（范围0-100）</param>
            <returns>返回裁剪后的Image对象</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Image.FastDFSHelper.CleanToBmpImg(System.Drawing.Image,System.String)">
            <summary>
            清洗图片（替换url，改为自己的连接）
            </summary>
            <param name="image">img对象</param>
            <param name="suffixName">后缀名</param>
        </member>
        <member name="M:XYAuto.CTUtils.Image.FastDFSHelper.GetImageByUrl(System.String)">
            <summary>
            根据图片URL，获取的Image对象
            </summary>
            <param name="imgUrl">图片URL</param>
            <returns>返回Image对象</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Image.FastDFSHelper.GetImageByWebp(System.String)">
            <summary>
            本地化webp格式的图片（调用了第三方类库Noesis.Drawing.Imaging.WebP.dll，其中NoesisWebP.dll文件要手动放到bin目录中）
            </summary>
            <param name="imgUrl">webp格式的图片的URL</param>
            <returns>返回Image对象</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Image.FastDFSHelper.CleanImg(System.Drawing.Image,System.String)">
            <summary>
            根据图片URL，Image对象，本地化图片
            </summary>
            <param name="img">Image对象</param>
            <param name="imgUrl">图片URL,若图片为gif格式，需要传原始图片URL，其他格式不用传</param>
            <returns>返回本地化图片的URL</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Image.FastDFSHelper.ImageToByteArray(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            根据图片URL，及Image对象，获取文件字节数组
            </summary>
            <param name="image">Image对象</param>
            <param name="imageFormat">ImageFormat对象</param>
            <param name="imgUrl">图片URL</param>
            <returns>返回图片文件字节数组</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Image.FastDFSHelper.GetImageExtension(System.Drawing.Image,System.String@)">
            <summary>
            根据Image对象，获取扩展名
            </summary>
            <param name="image">Image对象</param>
            <param name="extName">输出扩展名，如：.jpg</param>
            <returns>返回ImageFormats对象</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Image.FastDFSHelper.GetImageFormats">
            <summary>
            获取图片类型字典
            </summary>
            <returns>返回字典对象</returns>
        </member>
        <member name="P:XYAuto.CTUtils.Image.CleanImg.ImgUrl">
            <summary>
            处理后图片URL
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Image.CleanImg.ImgWidth">
            <summary>
            处理后图片宽度
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Image.CleanImg.ImgHeight">
            <summary>
            处理后图片高度
            </summary>
        </member>
        <member name="T:XYAuto.CTUtils.Image.ZXingHelper">
            <summary>
            注释：基于ZXing.net第三方开源库，用户二维码图片生成及读取图片内容等
            作者：masj
            日期：2018/5/16 15:31:44
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Image.ZXingHelper.ReadQrCodeText(System.Drawing.Image)">
            <summary>
            读取二维码内容文本 
            </summary>
            <param name="img">Image对象</param>
            <returns>二维码内容文本，若找不到返回字符串空</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Image.ZXingHelper.ReadQrCodeText(System.String)">
            <summary>
            读取二维码内容文本 
            </summary>
            <param name="url">图片URL</param>
            <returns>返回二维码图片对象（包含二维码内容、图片URL、图片宽、图片高等）</returns>
        </member>
        <member name="T:XYAuto.CTUtils.Image.QrCodeImg">
            <summary>
            二维码图片对象
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Image.QrCodeImg.QrCodeText">
            <summary>
            图片中二维码内容
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Image.QrCodeImg.ImgUrl">
            <summary>
            图片URL
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Image.QrCodeImg.ImgWidth">
            <summary>
            处理后图片宽度
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Image.QrCodeImg.ImgHeight">
            <summary>
            处理后图片高度
            </summary>
        </member>
        <member name="T:XYAuto.CTUtils.Log.Log4NetHelper">
            <summary>
            注释：Log4NetHelper
            作者：masj
            日期：2018/5/9 15:25:24
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
            <remarks>
            <para>
            使用此类，可以无效引用Log4net框架，目前工具集成Log4net框架（2.0.8）
            使用方式有2种：
            1、XYAuto.CTUtils.Log.Log4NetHelper.Default.Info(i);其中程序会优先找web.config文件，若找不到则总项目更目录按照文件名称生效查找第一个config文件
            2、XYAuto.CTUtils.Log.Log4NetHelper log = new Log4NetHelper(log名称, 配置文件物理路径);
            log.Custom.Info("Custom:" + i);
            </para>
            </remarks>
        </member>
        <member name="P:XYAuto.CTUtils.Log.Log4NetHelper.Custom">
            <summary>
            私有对象
            </summary>
        </member>
        <member name="P:XYAuto.CTUtils.Log.Log4NetHelper.FilePath">
            <summary>
            私有对象
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Log.Log4NetHelper.Default(System.String)">
            <summary>
            获取指定配置key=BaseLog，中的信息创建Logger
            </summary>
            <param name="loggerName">指定Loger的名称，若不指定则取根配置</param>
            <returns>返回log4net.ILog对象</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Log.Log4NetHelper.GetDefaultConfigFilePath">
            <summary>
            获取
            </summary>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Log.Log4NetHelper.#ctor(System.String,System.String)">
            <summary>
            自定义loger名称，返回log4net.ILog对象
            </summary>
            <param name="logName">loger名称</param>
            <param name="configPhysicalPath">配置文件物理路径，若不传，则在默认的配置文件中查找</param>
        </member>
        <member name="T:XYAuto.CTUtils.Security.DESEncryptor">
            <summary>
            注释：DES对称加密类，提供加解密功能
            作者：masj
            日期：2018/5/14 17:00:34
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Security.DESEncryptor.ToDESEncrypt(System.String,System.String)">
            <summary>
            DES加密算法
            </summary>
            <param name="encryptString">要加密的字符串</param>
            <param name="sKey">加密码Key</param>
            <returns>正确返回加密后的结果，错误返回源字符串</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Security.DESEncryptor.ToDESDecrypt(System.String,System.String)">
            <summary>
            DES解密算法
            </summary>
            <param name="decryptString">要解密的字符串</param>
            <param name="sKey">加密Key</param>
            <returns>正确返回加密后的结果，错误返回源字符串</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Security.DESEncryptor.MD5Hash(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="strText">原文</param>
            <returns>加密后的内容</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Security.DESEncryptor.MD5Hash(System.String,System.Text.Encoding)">
            <summary>
            MD5加密
            </summary>
            <param name="strText">原文</param>
            <param name="encoding">编码格式</param>
            <returns>加密后的内容</returns>
        </member>
        <member name="T:XYAuto.CTUtils.Sys.ConverHelper">
            <summary>
            注释：ConverHelper
            作者：masj
            日期：2018/5/14 15:00:36
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.ObjectToString(System.Object)">
            转字符串
            <summary>
            转字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.ObjectToDateTime(System.Object)">
            转时间
            <summary>
            转时间
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.ObjectToInteger(System.Object)">
            转数字
            <summary>
            转数字
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.ObjectToDecimal(System.Object)">
            转数字
            <summary>
            转数字
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.ObjectToDouble(System.Object)">
            转数字
            <summary>
            转数字
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.ObjectToLong(System.Object)">
            转数字
            <summary>
            转数字
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.BoolToInt(System.Nullable{System.Boolean})">
            bool和int互转
            <summary>
            bool和int互转
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.IntToBool(System.Nullable{System.Int32})">
            bool和int互转
            <summary>
            bool和int互转
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.ObjectToDateTimeOrNull(System.Object)">
            转时间
            <summary>
            转时间
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.ObjectToIntegerOrNull(System.Object)">
            转数字
            <summary>
            转数字
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.ObjectToLongOrNull(System.Object)">
            转数字
            <summary>
            转数字
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.GetDateTimeStr(System.DateTime)">
            时间转换字符串
            <summary>
            时间转换字符串
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.ConvertDateTimeToLong(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="time"> DateTime时间格式</param>
            <returns>Unix时间戳格式</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.ConvertDateTimeToInt(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="time"> DateTime时间格式</param>
            <returns>Unix时间戳格式</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.ConverHelper.ConvertDateTimeByTimeStamp(System.Int64)">
            <summary>        
            时间戳转为C#格式时间        
            </summary>        
            <param name="timeStamp"></param>        
            <returns></returns>        
        </member>
        <member name="T:XYAuto.CTUtils.Sys.EnumHelper">
            <summary>
            注释：EnumHelper
            作者：masj
            日期：2018/5/14 14:53:43
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.EnumHelper.GetEnumDesc(System.Enum)">
            <summary>
            获取枚举对应的文本描述
            </summary>
            <param name="enumValue">枚举类型</param>
            <returns>返回此枚举值的描述信息，若查不到则返回此枚举值的名称</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.EnumHelper.GetEnumDesc(System.Type,System.Int32)">
            <summary>
            根据枚举类型以及枚举值，获取此枚举的文本描述
            </summary>
            <param name="type">枚举类型</param>
            <param name="value">枚举值</param>
            <returns>返回此枚举值的描述信息，若查不到则返回字符串空</returns>
        </member>
        <member name="T:XYAuto.CTUtils.Sys.GenerateRandomType">
            <summary>
            注释：GenerateRandomType
            作者：masj
            日期：2018/5/16 20:15:47
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="F:XYAuto.CTUtils.Sys.GenerateRandomType.Num">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:XYAuto.CTUtils.Sys.GenerateRandomType.LowerLetterAndNum">
            <summary>
            小写字母加数字
            </summary>
        </member>
        <member name="F:XYAuto.CTUtils.Sys.GenerateRandomType.UpperLetterAndNum">
            <summary>
            大写字母加数字
            </summary>
        </member>
        <member name="F:XYAuto.CTUtils.Sys.GenerateRandomType.LetterAndNum">
            <summary>
            字母（大小写不区分）加数字
            </summary>
        </member>
        <member name="T:XYAuto.CTUtils.Sys.RandomHelper">
            <summary>
            注释：RandomHelper
            作者：masj
            日期：2018/5/16 20:08:12
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.RandomHelper.GenerateRandomCode(System.Int32,XYAuto.CTUtils.Sys.GenerateRandomType)">
            <summary>
            根据类型及长度生成随机字符
            </summary>
            <param name="length">生成随机字符长度</param>
            <param name="type">生成类型</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.RandomHelper.GetChar(System.Random,XYAuto.CTUtils.Sys.GenerateRandomType)">
            <summary>
            
            </summary>
            <param name="rnd"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XYAuto.CTUtils.Sys.VerifyHelper">
            <summary>
            注释：验证相关，如身份证号码
            作者：masj
            日期：2018/5/14 18:43:31
            版权所有：Copyright  2018 行圆汽车-分发业务中心
            </summary>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.VerifyHelper.CheckIDCard(System.String)">
            <summary>
            验证身份证号码（兼容15和18位）
            </summary>
            <param name="id">身份证号码</param>
            <returns>验证通过返回true，否则返回false</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.VerifyHelper.IsTelephone(System.String)">
            <summary>
            验证电话号码（包括手机和座机）
            </summary>
            <param name="strTelephone">电话号码（包括手机和座机）</param>
            <returns>验证成功返回true,失败返回false</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.VerifyHelper.IsTelephoneAnd400Tel(System.String)">
            <summary>
            验证电话号码（包括手机和座机、400电话）
            </summary>
            <param name="strTelephone">电话号码（包括手机和座机、400电话）</param>
            <returns>验证成功返回true,失败返回false</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.VerifyHelper.IsTelNumber(System.String)">
            <summary>
            验证座机
            </summary>
            <param name="strHandset">座机</param>
            <returns>验证成功返回true,失败返回false</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.VerifyHelper.IsHandset(System.String)">
            <summary>
            验证手机
            </summary>
            <param name="strHandset">手机</param>
            <returns>验证成功返回true,失败返回false</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.VerifyHelper.Is400Tel(System.String)">
            <summary>
            验证400电话
            </summary>
            <param name="strHandset">400电话</param>
            <returns>验证成功返回true,失败返回false</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.VerifyHelper.IsEmail(System.String)">
            <summary>
            验证邮箱
            </summary>
            <param name="strEmail">邮箱</param>
            <returns>验证成功返回true,失败返回false</returns>
        </member>
        <member name="M:XYAuto.CTUtils.Sys.VerifyHelper.IsUrl(System.String)">
            <summary>
            验证Url
            </summary>
            <param name="strUrl">Url</param>
            <returns>验证成功返回true,失败返回false</returns>
        </member>
        <member name="T:ZXing.Aztec.Internal.AztecDetectorResult">
            <summary>
            Extends <see cref="T:ZXing.Common.DetectorResult" /> with more information specific to the Aztec format,
            like the number of layers and whether it's compact.
            </summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.AztecDetectorResult.Compact">
            <summary>
            Gets a value indicating whether this Aztec code is compact.
            </summary>
            <value>
              <c>true</c> if compact; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Aztec.Internal.AztecDetectorResult.NbDatablocks">
            <summary>
            Gets the nb datablocks.
            </summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.AztecDetectorResult.NbLayers">
            <summary>
            Gets the nb layers.
            </summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.AztecDetectorResult.#ctor(ZXing.Common.BitMatrix,ZXing.ResultPoint[],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Aztec.Internal.AztecDetectorResult"/> class.
            </summary>
            <param name="bits">The bits.</param>
            <param name="points">The points.</param>
            <param name="compact">if set to <c>true</c> [compact].</param>
            <param name="nbDatablocks">The nb datablocks.</param>
            <param name="nbLayers">The nb layers.</param>
        </member>
        <member name="T:ZXing.Aztec.Internal.Decoder">
            <summary>
            The main class which implements Aztec Code decoding -- as opposed to locating and extracting
            the Aztec Code from an image.
            </summary>
            <author>David Olivier</author>
        </member>
        <member name="M:ZXing.Aztec.Internal.Decoder.decode(ZXing.Aztec.Internal.AztecDetectorResult)">
            <summary>
            Decodes the specified detector result.
            </summary>
            <param name="detectorResult">The detector result.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Decoder.highLevelDecode(System.Boolean[])">
            <summary>
            This method is used for testing the high-level encoder
            </summary>
            <param name="correctedBits"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Decoder.getEncodedData(System.Boolean[])">
            <summary>
            Gets the string encoded in the aztec code bits
            </summary>
            <param name="correctedBits">The corrected bits.</param>
            <returns>the decoded string</returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Decoder.getTable(System.Char)">
            <summary>
            gets the table corresponding to the char passed
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Decoder.getCharacter(System.String[],System.Int32)">
            <summary>
            Gets the character (or string) corresponding to the passed code in the given table
            </summary>
            <param name="table">the table used</param>
            <param name="code">the code of the character</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Decoder.correctBits(System.Boolean[])">
             <summary>
            Performs RS error correction on an array of bits.
             </summary>
             <param name="rawbits">The rawbits.</param>
             <returns>the corrected array</returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Decoder.extractBits(ZXing.Common.BitMatrix)">
            <summary>
            Gets the array of bits from an Aztec Code matrix
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>the array of bits</returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Decoder.readCode(System.Boolean[],System.Int32,System.Int32)">
            <summary>
            Reads a code of given length and at given index in an array of bits
            </summary>
            <param name="rawbits">The rawbits.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Decoder.readByte(System.Boolean[],System.Int32)">
            <summary>
            Reads a code of length 8 in an array of bits, padding with zeros
            </summary>
            <param name="rawbits"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Decoder.convertBoolArrayToByteArray(System.Boolean[])">
            <summary>
            Packs a bit array into bytes, most significant bit first
            </summary>
            <param name="boolArr"></param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Aztec.Internal.Detector">
            <summary>
            Encapsulates logic that can detect an Aztec Code in an image, even if the Aztec Code
            is rotated or skewed, or partially obscured.
            </summary>
            <author>David Olivier</author>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.#ctor(ZXing.Common.BitMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Aztec.Internal.Detector"/> class.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.detect">
            <summary>
            Detects an Aztec Code in an image.
            </summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.detect(System.Boolean)">
            <summary>
            Detects an Aztec Code in an image.
            </summary>
            <param name="isMirror">if true, image is a mirror-image of original.</param>
            <returns>
            encapsulating results of detecting an Aztec Code
            </returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.extractParameters(ZXing.ResultPoint[])">
            <summary>
            Extracts the number of data layers and data blocks from the layer around the bull's eye 
            </summary>
            <param name="bullsEyeCorners">bullEyeCornerPoints the array of bull's eye corners</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.getCorrectedParameterData(System.Int64,System.Boolean)">
            <summary>
            Corrects the parameter bits using Reed-Solomon algorithm
            </summary>
            <param name="parameterData">paremeter bits</param>
            <param name="compact">compact true if this is a compact Aztec code</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.getBullsEyeCorners(ZXing.Aztec.Internal.Detector.Point)">
            <summary>
            Finds the corners of a bull-eye centered on the passed point
            This returns the centers of the diagonal points just outside the bull's eye
            Returns [topRight, bottomRight, bottomLeft, topLeft]
            </summary>
            <param name="pCenter">Center point</param>
            <returns>The corners of the bull-eye</returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.getMatrixCenter">
            <summary>
            Finds a candidate center point of an Aztec code from an image
            </summary>
            <returns>the center point</returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.getMatrixCornerPoints(ZXing.ResultPoint[])">
            <summary>
            Gets the Aztec code corners from the bull's eye corners and the parameters.
            </summary>
            <param name="bullsEyeCorners">the array of bull's eye corners</param>
            <returns>the array of aztec code corners</returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.sampleGrid(ZXing.Common.BitMatrix,ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint)">
            <summary>
            Creates a BitMatrix by sampling the provided image.
            topLeft, topRight, bottomRight, and bottomLeft are the centers of the squares on the
            diagonal just outside the bull's eye.
            </summary>
            <param name="image">The image.</param>
            <param name="topLeft">The top left.</param>
            <param name="bottomLeft">The bottom left.</param>
            <param name="bottomRight">The bottom right.</param>
            <param name="topRight">The top right.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.sampleLine(ZXing.ResultPoint,ZXing.ResultPoint,System.Int32)">
            <summary>
            Samples a line
            </summary>
            <param name="p1">start point (inclusive)</param>
            <param name="p2">end point (exclusive)</param>
            <param name="size">number of bits</param>
            <returns> the array of bits as an int (first bit is high-order bit of result)</returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.isWhiteOrBlackRectangle(ZXing.Aztec.Internal.Detector.Point,ZXing.Aztec.Internal.Detector.Point,ZXing.Aztec.Internal.Detector.Point,ZXing.Aztec.Internal.Detector.Point)">
            <summary>
            Determines whether [is white or black rectangle] [the specified p1].
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <returns>true if the border of the rectangle passed in parameter is compound of white points only
            or black points only</returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.getColor(ZXing.Aztec.Internal.Detector.Point,ZXing.Aztec.Internal.Detector.Point)">
            <summary>
            Gets the color of a segment
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>1 if segment more than 90% black, -1 if segment is more than 90% white, 0 else</returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.getFirstDifferent(ZXing.Aztec.Internal.Detector.Point,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Gets the coordinate of the first point with a different color in the given direction
            </summary>
            <param name="init">The init.</param>
            <param name="color">if set to <c>true</c> [color].</param>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Detector.expandSquare(ZXing.ResultPoint[],System.Single,System.Single)">
            <summary>
            Expand the square represented by the corner points by pushing out equally in all directions
            </summary>
            <param name="cornerPoints">the corners of the square, which has the bull's eye at its center</param>
            <param name="oldSide">the original length of the side of the square in the target bit matrix</param>
            <param name="newSide">the new length of the size of the square in the target bit matrix</param>
            <returns>the corners of the expanded square</returns>
        </member>
        <member name="T:ZXing.Aztec.Internal.AztecCode">
            <summary>
            Aztec 2D code representation
            </summary>
            <author>Rustam Abdullaev</author>
        </member>
        <member name="P:ZXing.Aztec.Internal.AztecCode.isCompact">
            <summary>
            Compact or full symbol indicator
            </summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.AztecCode.Size">
            <summary>
            Size in pixels (width and height)
            </summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.AztecCode.Layers">
            <summary>
            Number of levels
            </summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.AztecCode.CodeWords">
            <summary>
            Number of data codewords
            </summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.AztecCode.Matrix">
            <summary>
            The symbol image
            </summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.BinaryShiftToken">
            <summary>
            represents a token for a binary shift
            </summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.BinaryShiftToken.#ctor(ZXing.Aztec.Internal.Token,System.Int32,System.Int32)">
            <summary>
            initializing constructor
            </summary>
            <param name="previous"></param>
            <param name="binaryShiftStart"></param>
            <param name="binaryShiftByteCount"></param>
        </member>
        <member name="M:ZXing.Aztec.Internal.BinaryShiftToken.appendTo(ZXing.Common.BitArray,System.Byte[])">
            <summary>
            appends the byte array to the BitArray
            </summary>
            <param name="bitArray"></param>
            <param name="text"></param>
        </member>
        <member name="M:ZXing.Aztec.Internal.BinaryShiftToken.ToString">
            <summary>
            string representation
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZXing.Aztec.Internal.Encoder">
            <summary>
            Generates Aztec 2D barcodes.
            </summary>
            <author>Rustam Abdullaev</author>
        </member>
        <member name="M:ZXing.Aztec.Internal.Encoder.encode(System.Byte[])">
            <summary>
            Encodes the given binary content as an Aztec symbol
            </summary>
            <param name="data">input data string</param>
            <returns>Aztec symbol matrix with metadata</returns>
        </member>
        <member name="M:ZXing.Aztec.Internal.Encoder.encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes the given binary content as an Aztec symbol
            </summary>
            <param name="data">input data string</param>
            <param name="minECCPercent">minimal percentage of error check words (According to ISO/IEC 24778:2008,
            a minimum of 23% + 3 words is recommended)</param>
            <param name="userSpecifiedLayers">if non-zero, a user-specified value for the number of layers</param>
            <returns>
            Aztec symbol matrix with metadata
            </returns>
        </member>
        <member name="T:ZXing.Aztec.Internal.HighLevelEncoder">
            <summary>
            This produces nearly optimal encodings of text into the first-level of
            encoding used by Aztec code.
            It uses a dynamic algorithm.  For each prefix of the string, it determines
            a set of encodings that could lead to this prefix.  We repeatedly add a
            character and generate a new set of optimal encodings until we have read
            through the entire input.
            @author Frank Yellin
            @author Rustam Abdullaev
            </summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.HighLevelEncoder.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ZXing.Aztec.Internal.HighLevelEncoder.encode">
            <summary>
            Convert the text represented by this High Level Encoder into a BitArray.
            </summary>
            <returns>text represented by this encoder encoded as a <see cref="T:ZXing.Common.BitArray"/></returns>
        </member>
        <member name="T:ZXing.Aztec.Internal.State">
            <summary>
            State represents all information about a sequence necessary to generate the current output.
            Note that a state is immutable.
            </summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.State.latchAndAppend(System.Int32,System.Int32)">
            <summary>
            Create a new state representing this state with a latch to a (not
            necessary different) mode, and then a code.
            </summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.State.shiftAndAppend(System.Int32,System.Int32)">
            <summary>
            Create a new state representing this state, with a temporary shift
            to a different mode to output a single value.
            </summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.State.addBinaryShiftChar(System.Int32)">
            <summary>
            Create a new state representing this state, but an additional character
            output in Binary Shift mode.
            </summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.State.endBinaryShift(System.Int32)">
            <summary>
            Create the state identical to this one, but we are no longer in
            Binary Shift mode.
            </summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.State.isBetterThanOrEqualTo(ZXing.Aztec.Internal.State)">
            <summary>
            Returns true if "this" state is better (or equal) to be in than "that"
            state under all possible circumstances.
            </summary>
        </member>
        <member name="T:ZXing.Aztec.AztecReader">
            <summary>
            This implementation can detect and decode Aztec codes in an image.
            </summary>
            <author>David Olivier</author>
        </member>
        <member name="M:ZXing.Aztec.AztecReader.decode(ZXing.BinaryBitmap)">
            <summary>
            Locates and decodes a barcode in some format within an image.
            </summary>
            <param name="image">image of barcode to decode</param>
            <returns>
            a String representing the content encoded by the Data Matrix code
            </returns>
        </member>
        <member name="M:ZXing.Aztec.AztecReader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
             Locates and decodes a Data Matrix code in an image.
            </summary>
            <param name="image">image of barcode to decode</param>
            <param name="hints">passed as a {@link java.util.Hashtable} from {@link com.google.zxing.DecodeHintType}
            to arbitrary data. The
            meaning of the data depends upon the hint type. The implementation may or may not do
            anything with these hints.</param>
            <returns>
            String which the barcode encodes
            </returns>
        </member>
        <member name="M:ZXing.Aztec.AztecReader.reset">
            <summary>
            Resets any internal state the implementation has after a decode, to prepare it
            for reuse.
            </summary>
        </member>
        <member name="T:ZXing.Aztec.AztecResultMetadata">
            <summary>
            Aztec result meta data.
            </summary>
        </member>
        <member name="P:ZXing.Aztec.AztecResultMetadata.Compact">
            <summary>
            Gets a value indicating whether this Aztec code is compact.
            </summary>
            <value>
              <c>true</c> if compact; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Aztec.AztecResultMetadata.Datablocks">
            <summary>
            Gets the nb datablocks.
            </summary>
        </member>
        <member name="P:ZXing.Aztec.AztecResultMetadata.Layers">
            <summary>
            Gets the nb layers.
            </summary>
        </member>
        <member name="M:ZXing.Aztec.AztecResultMetadata.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="compact"></param>
            <param name="datablocks"></param>
            <param name="layers"></param>
        </member>
        <member name="T:ZXing.Aztec.AztecWriter">
            <summary>
            Renders an Aztec code as a <see cref="T:ZXing.Common.BitMatrix" />
            </summary>
        </member>
        <member name="M:ZXing.Aztec.AztecWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32)">
            <summary>
            Encode a barcode using the default settings.
            </summary>
            <param name="contents">The contents to encode in the barcode</param>
            <param name="format">The barcode format to generate</param>
            <param name="width">The preferred width in pixels</param>
            <param name="height">The preferred height in pixels</param>
            <returns>
            The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)
            </returns>
        </member>
        <member name="M:ZXing.Aztec.AztecWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            </summary>
            <param name="contents">The contents to encode in the barcode</param>
            <param name="format">The barcode format to generate</param>
            <param name="width">The preferred width in pixels</param>
            <param name="height">The preferred height in pixels</param>
            <param name="hints">Additional parameters to supply to the encoder</param>
            <returns>
            The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)
            </returns>
        </member>
        <member name="T:ZXing.Aztec.AztecEncodingOptions">
            <summary>
            The class holds the available options for the <see cref="T:ZXing.Aztec.AztecWriter" />
            </summary>
        </member>
        <member name="P:ZXing.Aztec.AztecEncodingOptions.ErrorCorrection">
            <summary>
            Representing the minimal percentage of error correction words. 
            Note: an Aztec symbol should have a minimum of 25% EC words.
            </summary>
        </member>
        <member name="P:ZXing.Aztec.AztecEncodingOptions.Layers">
            <summary>
            Specifies the required number of layers for an Aztec code:
            a negative number (-1, -2, -3, -4) specifies a compact Aztec code
            0 indicates to use the minimum number of layers (the default)
            a positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code
            </summary>
        </member>
        <member name="T:ZXing.BarcodeFormat">
            <summary>
            Enumerates barcode formats known to this package.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="F:ZXing.BarcodeFormat.AZTEC">
            <summary>Aztec 2D barcode format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.CODABAR">
            <summary>CODABAR 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.CODE_39">
            <summary>Code 39 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.CODE_93">
            <summary>Code 93 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.CODE_128">
            <summary>Code 128 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.DATA_MATRIX">
            <summary>Data Matrix 2D barcode format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.EAN_8">
            <summary>EAN-8 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.EAN_13">
            <summary>EAN-13 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.ITF">
            <summary>ITF (Interleaved Two of Five) 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.MAXICODE">
            <summary>MaxiCode 2D barcode format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.PDF_417">
            <summary>PDF417 format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.QR_CODE">
            <summary>QR Code 2D barcode format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.RSS_14">
            <summary>RSS 14</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.RSS_EXPANDED">
            <summary>RSS EXPANDED</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.UPC_A">
            <summary>UPC-A 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.UPC_E">
            <summary>UPC-E 1D format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.UPC_EAN_EXTENSION">
            <summary>UPC/EAN extension format. Not a stand-alone format.</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.MSI">
            <summary>MSI</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.PLESSEY">
            <summary>Plessey</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.IMB">
            <summary>Intelligent Mail barcode</summary>
        </member>
        <member name="F:ZXing.BarcodeFormat.All_1D">
            <summary>
            UPC_A | UPC_E | EAN_13 | EAN_8 | CODABAR | CODE_39 | CODE_93 | CODE_128 | ITF | RSS_14 | RSS_EXPANDED
            without MSI (to many false-positives) and IMB (not enough tested, and it looks more like a 2D)
            </summary>
        </member>
        <member name="T:ZXing.BarcodeReader">
            <summary>
            A smart class to decode the barcode inside a bitmap object
            </summary>
        </member>
        <member name="M:ZXing.BarcodeReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BarcodeReader"/> class.
            </summary>
        </member>
        <member name="M:ZXing.BarcodeReader.#ctor(ZXing.Reader,System.Func{System.Drawing.Bitmap,ZXing.LuminanceSource},System.Func{ZXing.LuminanceSource,ZXing.Binarizer})">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BarcodeReader"/> class.
            </summary>
            <param name="reader">Sets the reader which should be used to find and decode the barcode.
            If null then MultiFormatReader is used</param>
            <param name="createLuminanceSource">Sets the function to create a luminance source object for a bitmap.
            If null, an exception is thrown when Decode is called</param>
            <param name="createBinarizer">Sets the function to create a binarizer object for a luminance source.
            If null then HybridBinarizer is used</param>
        </member>
        <member name="M:ZXing.BarcodeReader.#ctor(ZXing.Reader,System.Func{System.Drawing.Bitmap,ZXing.LuminanceSource},System.Func{ZXing.LuminanceSource,ZXing.Binarizer},System.Func{System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat,ZXing.LuminanceSource})">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BarcodeReader"/> class.
            </summary>
            <param name="reader">Sets the reader which should be used to find and decode the barcode.
            If null then MultiFormatReader is used</param>
            <param name="createLuminanceSource">Sets the function to create a luminance source object for a bitmap.
            If null, an exception is thrown when Decode is called</param>
            <param name="createBinarizer">Sets the function to create a binarizer object for a luminance source.
            If null then HybridBinarizer is used</param>
            <param name="createRGBLuminanceSource">Sets the function to create a luminance source object for a rgb raw byte array.</param>
        </member>
        <member name="T:ZXing.BarcodeReader`1">
            <summary>
            A smart class to decode the barcode inside a bitmap object
            </summary>
        </member>
        <member name="M:ZXing.BarcodeReader`1.#ctor(System.Func{`0,ZXing.LuminanceSource})">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BarcodeReader"/> class.
            </summary>
        </member>
        <member name="M:ZXing.BarcodeReader`1.#ctor(ZXing.Reader,System.Func{`0,ZXing.LuminanceSource},System.Func{ZXing.LuminanceSource,ZXing.Binarizer})">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BarcodeReader"/> class.
            </summary>
            <param name="reader">Sets the reader which should be used to find and decode the barcode.
            If null then MultiFormatReader is used</param>
            <param name="createLuminanceSource">Sets the function to create a luminance source object for a bitmap.
            If null, an exception is thrown when Decode is called</param>
            <param name="createBinarizer">Sets the function to create a binarizer object for a luminance source.
            If null then HybridBinarizer is used</param>
        </member>
        <member name="M:ZXing.BarcodeReader`1.#ctor(ZXing.Reader,System.Func{`0,ZXing.LuminanceSource},System.Func{ZXing.LuminanceSource,ZXing.Binarizer},System.Func{System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat,ZXing.LuminanceSource})">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BarcodeReader"/> class.
            </summary>
            <param name="reader">Sets the reader which should be used to find and decode the barcode.
            If null then MultiFormatReader is used</param>
            <param name="createLuminanceSource">Sets the function to create a luminance source object for a bitmap.
            If null, an exception is thrown when Decode is called</param>
            <param name="createBinarizer">Sets the function to create a binarizer object for a luminance source.
            If null then HybridBinarizer is used</param>
            <param name="createRGBLuminanceSource">Sets the function to create a luminance source object for a rgb raw byte array.</param>
        </member>
        <member name="M:ZXing.BarcodeReader`1.#ctor(ZXing.Reader,System.Func{ZXing.LuminanceSource,ZXing.Binarizer},System.Func{System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat,ZXing.LuminanceSource})">
            <summary>
            Constructor for additional image formats for one BarcodeReader class
            </summary>
            <param name="reader">Sets the reader which should be used to find and decode the barcode.
            If null then MultiFormatReader is used</param>
            <param name="createBinarizer">Sets the function to create a binarizer object for a luminance source.
            If null then HybridBinarizer is used</param>
            <param name="createRGBLuminanceSource">Sets the function to create a luminance source object for a rgb raw byte array.</param>
        </member>
        <member name="P:ZXing.BarcodeReader`1.CreateLuminanceSource">
            <summary>
            Optional: Gets or sets the function to create a luminance source object for a bitmap.
            If null a platform specific default LuminanceSource is used
            </summary>
            <value>
            The function to create a luminance source object.
            </value>
        </member>
        <member name="M:ZXing.BarcodeReader`1.Decode(`0)">
            <summary>
            Decodes the specified barcode bitmap.
            </summary>
            <param name="barcodeBitmap">The barcode bitmap.</param>
            <returns>the result data or null</returns>
        </member>
        <member name="M:ZXing.BarcodeReader`1.DecodeMultiple(`0)">
            <summary>
            Decodes the specified barcode bitmap.
            </summary>
            <param name="barcodeBitmap">The barcode bitmap.</param>
            <returns>the result data or null</returns>
        </member>
        <member name="T:ZXing.BarcodeReaderGeneric">
            <summary>
            A smart class to decode the barcode inside a bitmap object
            </summary>
        </member>
        <member name="F:ZXing.BarcodeReaderGeneric.defaultCreateRGBLuminanceSource">
            <summary>
            represents the default function which is called to get a <see cref="T:ZXing.RGBLuminanceSource"/> instance from a raw byte array
            </summary>
        </member>
        <member name="P:ZXing.BarcodeReaderGeneric.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:ZXing.BarcodeReaderGeneric.Reader">
            <summary>
            Gets the reader which should be used to find and decode the barcode.
            </summary>
            <value>
            The reader.
            </value>
        </member>
        <member name="E:ZXing.BarcodeReaderGeneric.ResultPointFound">
            <summary>
            Gets or sets a method which is called if an important point is found
            </summary>
            <value>
            The result point callback.
            </value>
        </member>
        <member name="E:ZXing.BarcodeReaderGeneric.ResultFound">
            <summary>
            event is executed if a result was found via decode
            </summary>
        </member>
        <member name="P:ZXing.BarcodeReaderGeneric.AutoRotate">
            <summary>
            Gets or sets a value indicating whether the image should be automatically rotated.
            Rotation is supported for 90, 180 and 270 degrees
            </summary>
            <value>
              <c>true</c> if image should be rotated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.BarcodeReaderGeneric.TryInverted">
            <summary>
            Gets or sets a value indicating whether the image should be automatically inverted
            if no result is found in the original image.
            ATTENTION: Please be carefully because it slows down the decoding process if it is used
            </summary>
            <value>
              <c>true</c> if image should be inverted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.BarcodeReaderGeneric.CreateBinarizer">
            <summary>
            Optional: Gets or sets the function to create a binarizer object for a luminance source.
            If null then HybridBinarizer is used
            </summary>
            <value>
            The function to create a binarizer object.
            </value>
        </member>
        <member name="M:ZXing.BarcodeReaderGeneric.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BarcodeReaderGeneric"/> class.
            </summary>
        </member>
        <member name="M:ZXing.BarcodeReaderGeneric.#ctor(ZXing.Reader,System.Func{ZXing.LuminanceSource,ZXing.Binarizer},System.Func{System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat,ZXing.LuminanceSource})">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BarcodeReaderGeneric"/> class.
            </summary>
            <param name="reader">Sets the reader which should be used to find and decode the barcode.
            If null then MultiFormatReader is used</param>
            <param name="createBinarizer">Sets the function to create a binarizer object for a luminance source.
            If null then HybridBinarizer is used</param>
            <param name="createRGBLuminanceSource">Sets the function to create a luminance source object for a rgb array.
            If null the RGBLuminanceSource is used. The handler is only called when Decode with a byte[] array is called.</param>
        </member>
        <member name="M:ZXing.BarcodeReaderGeneric.Decode(ZXing.LuminanceSource)">
            <summary>
            Tries to decode a barcode within an image which is given by a luminance source.
            That method gives a chance to prepare a luminance source completely before calling
            the time consuming decoding method. On the other hand there is a chance to create
            a luminance source which is independent from external resources (like Bitmap objects)
            and the decoding call can be made in a background thread.
            </summary>
            <param name="luminanceSource">The luminance source.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.BarcodeReaderGeneric.DecodeMultiple(ZXing.LuminanceSource)">
            <summary>
            Tries to decode barcodes within an image which is given by a luminance source.
            That method gives a chance to prepare a luminance source completely before calling
            the time consuming decoding method. On the other hand there is a chance to create
            a luminance source which is independent from external resources (like Bitmap objects)
            and the decoding call can be made in a background thread.
            </summary>
            <param name="luminanceSource">The luminance source.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.BarcodeReaderGeneric.OnResultsFound(System.Collections.Generic.IEnumerable{ZXing.Result})">
            <summary>
            raises the ResultFound event
            </summary>
            <param name="results"></param>
        </member>
        <member name="M:ZXing.BarcodeReaderGeneric.OnResultFound(ZXing.Result)">
            <summary>
            raises the ResultFound event
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ZXing.BarcodeReaderGeneric.OnResultPointFound(ZXing.ResultPoint)">
            <summary>
            calls the explicitResultPointFound action
            </summary>
            <param name="resultPoint"></param>
        </member>
        <member name="M:ZXing.BarcodeReaderGeneric.Decode(System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>
            Decodes the specified barcode bitmap.
            </summary>
            <param name="rawRGB">The image as byte[] array.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <returns>
            the result data or null
            </returns>
        </member>
        <member name="M:ZXing.BarcodeReaderGeneric.DecodeMultiple(System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>
            Decodes the specified barcode bitmap.
            </summary>
            <param name="rawRGB">The image as byte[] array.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <returns>
            the result data or null
            </returns>
        </member>
        <member name="T:ZXing.BarcodeWriter">
            <summary>
            A smart class to encode some content to a barcode image
            </summary>
        </member>
        <member name="M:ZXing.BarcodeWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BarcodeWriter"/> class.
            </summary>
        </member>
        <member name="T:ZXing.BarcodeWriterPixelData">
            <summary>
            A smart class to encode some content to raw pixel data
            </summary>
        </member>
        <member name="M:ZXing.BarcodeWriterPixelData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BarcodeWriterPixelData"/> class.
            </summary>
        </member>
        <member name="T:ZXing.BarcodeWriterSvg">
            <summary>
            A smart class to encode some content to a svg barcode image
            </summary>
        </member>
        <member name="M:ZXing.BarcodeWriterSvg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BarcodeWriterSvg"/> class.
            </summary>
        </member>
        <member name="T:ZXing.BarcodeWriter`1">
            <summary>
            A base class for specific barcode writers with specific formats of barcode images.
            </summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
        </member>
        <member name="P:ZXing.BarcodeWriter`1.Renderer">
            <summary>
            Gets or sets the renderer which should be used to render the encoded BitMatrix.
            </summary>
        </member>
        <member name="M:ZXing.BarcodeWriter`1.Write(System.String)">
            <summary>
            Encodes the specified contents and returns a rendered instance of the barcode.
            For rendering the instance of the property Renderer is used and has to be set before
            calling that method.
            </summary>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.BarcodeWriter`1.Write(ZXing.Common.BitMatrix)">
            <summary>
            Returns a rendered instance of the barcode which is given by a BitMatrix.
            For rendering the instance of the property Renderer is used and has to be set before
            calling that method.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.BarcodeWriterGeneric">
            <summary>
            A base class for specific barcode writers with specific formats of barcode images.
            </summary>
        </member>
        <member name="P:ZXing.BarcodeWriterGeneric.Format">
            <summary>
            Gets or sets the barcode format.
            The value is only suitable if the MultiFormatWriter is used.
            </summary>
        </member>
        <member name="P:ZXing.BarcodeWriterGeneric.Options">
            <summary>
            Gets or sets the options container for the encoding and renderer process.
            </summary>
        </member>
        <member name="P:ZXing.BarcodeWriterGeneric.Encoder">
            <summary>
            Gets or sets the writer which encodes the content to a BitMatrix.
            If no value is set the MultiFormatWriter is used.
            </summary>
        </member>
        <member name="M:ZXing.BarcodeWriterGeneric.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZXing.BarcodeWriterGeneric.#ctor(ZXing.Writer)">
            <summary>
            
            </summary>
            <param name="encoder"></param>
        </member>
        <member name="M:ZXing.BarcodeWriterGeneric.Encode(System.String)">
            <summary>
            Encodes the specified contents and returns a BitMatrix array.
            That array has to be rendered manually or with a IBarcodeRenderer.
            </summary>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.BaseLuminanceSource">
            <summary>
            The base class for luminance sources which supports 
            cropping and rotating based upon the luminance values.
            </summary>
        </member>
        <member name="F:ZXing.BaseLuminanceSource.RChannelWeight">
            <summary>
            weight of the red channel for calculating a gray scale image
            </summary>
        </member>
        <member name="F:ZXing.BaseLuminanceSource.GChannelWeight">
            <summary>
            weight of the green channel for calculating a gray scale image
            </summary>
        </member>
        <member name="F:ZXing.BaseLuminanceSource.BChannelWeight">
            <summary>
            weight of the blue channel for calculating a gray scale image
            </summary>
        </member>
        <member name="F:ZXing.BaseLuminanceSource.ChannelWeight">
            <summary>
            numbers of bits which for right shifting
            </summary>
        </member>
        <member name="F:ZXing.BaseLuminanceSource.luminances">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZXing.BaseLuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BaseLuminanceSource"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:ZXing.BaseLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BaseLuminanceSource"/> class.
            </summary>
            <param name="luminanceArray">The luminance array.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:ZXing.BaseLuminanceSource.getRow(System.Int32,System.Byte[])">
            <summary>
            Fetches one row of luminance data from the underlying platform's bitmap. Values range from
            0 (black) to 255 (white). It is preferable for implementations of this method
            to only fetch this row rather than the whole image, since no 2D Readers may be installed and
            getMatrix() may never be called.
            </summary>
            <param name="y">The row to fetch, 0 &lt;= y &lt; Height.</param>
            <param name="row">An optional preallocated array. If null or too small, it will be ignored.
            Always use the returned object, and ignore the .length of the array.</param>
            <returns>
            An array containing the luminance data.
            </returns>
        </member>
        <member name="P:ZXing.BaseLuminanceSource.Matrix">
            <summary>
            gets the luminance matrix
            </summary>
        </member>
        <member name="M:ZXing.BaseLuminanceSource.rotateCounterClockwise">
            <summary>
            Returns a new object with rotated image data by 90 degrees counterclockwise.
            Only callable if {@link #isRotateSupported()} is true.
            </summary>
            <returns>
            A rotated version of this object.
            </returns>
        </member>
        <member name="M:ZXing.BaseLuminanceSource.rotateCounterClockwise45">
            <summary>
            TODO: not implemented yet
            </summary>
            <returns>
            A rotated version of this object.
            </returns>
        </member>
        <member name="P:ZXing.BaseLuminanceSource.RotateSupported">
            <summary>
            </summary>
            <returns> Whether this subclass supports counter-clockwise rotation.</returns>
        </member>
        <member name="M:ZXing.BaseLuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new object with cropped image data. Implementations may keep a reference to the
            original data rather than a copy. Only callable if CropSupported is true.
            </summary>
            <param name="left">The left coordinate, 0 &lt;= left &lt; Width.</param>
            <param name="top">The top coordinate, 0 &lt;= top &lt;= Height.</param>
            <param name="width">The width of the rectangle to crop.</param>
            <param name="height">The height of the rectangle to crop.</param>
            <returns>
            A cropped version of this object.
            </returns>
        </member>
        <member name="P:ZXing.BaseLuminanceSource.CropSupported">
            <summary>
            </summary>
            <returns> Whether this subclass supports cropping.</returns>
        </member>
        <member name="P:ZXing.BaseLuminanceSource.InversionSupported">
            <summary>
            </summary>
            <returns>Whether this subclass supports invertion.</returns>
        </member>
        <member name="M:ZXing.BaseLuminanceSource.invert">
            <summary>
            Inverts the luminance values (newValue = 255 - oldValue)
            </summary>
        </member>
        <member name="M:ZXing.BaseLuminanceSource.CreateLuminanceSource(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Should create a new luminance source with the right class type.
            The method is used in methods crop and rotate.
            </summary>
            <param name="newLuminances">The new luminances.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Binarizer">
            <summary> This class hierarchy provides a set of methods to convert luminance data to 1 bit data.
            It allows the algorithm to vary polymorphically, for example allowing a very expensive
            thresholding technique for servers and a fast one for mobile. It also permits the implementation
            to vary, e.g. a JNI version for Android and a Java fallback version for other platforms.
            
            <author>dswitkin@google.com (Daniel Switkin)</author>
            </summary>
        </member>
        <member name="M:ZXing.Binarizer.#ctor(ZXing.LuminanceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Binarizer"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:ZXing.Binarizer.LuminanceSource">
            <summary>
            Gets the luminance source object.
            </summary>
        </member>
        <member name="M:ZXing.Binarizer.getBlackRow(System.Int32,ZXing.Common.BitArray)">
            <summary> Converts one row of luminance data to 1 bit data. May actually do the conversion, or return
            cached data. Callers should assume this method is expensive and call it as seldom as possible.
            This method is intended for decoding 1D barcodes and may choose to apply sharpening.
            For callers which only examine one row of pixels at a time, the same BitArray should be reused
            and passed in with each call for performance. However it is legal to keep more than one row
            at a time if needed.
            </summary>
            <param name="y">The row to fetch, which must be in [0, bitmap height)</param>
            <param name="row">An optional preallocated array. If null or too small, it will be ignored.
            If used, the Binarizer will call BitArray.clear(). Always use the returned object.
            </param>
            <returns> The array of bits for this row (true means black).</returns>
        </member>
        <member name="P:ZXing.Binarizer.BlackMatrix">
            <summary> Converts a 2D array of luminance data to 1 bit data. As above, assume this method is expensive
            and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or
            may not apply sharpening. Therefore, a row from this matrix may not be identical to one
            fetched using getBlackRow(), so don't mix and match between them.
            </summary>
            <returns> The 2D array of bits for the image (true means black).</returns>
        </member>
        <member name="M:ZXing.Binarizer.createBinarizer(ZXing.LuminanceSource)">
            <summary> Creates a new object with the same type as this Binarizer implementation, but with pristine
            state. This is needed because Binarizer implementations may be stateful, e.g. keeping a cache
            of 1 bit data. See Effective Java for why we can't use Java's clone() method.
            </summary>
            <param name="source">The LuminanceSource this Binarizer will operate on.</param>
            <returns> A new concrete Binarizer implementation object.</returns>
        </member>
        <member name="P:ZXing.Binarizer.Width">
            <summary>
            Gets the width of the luminance source object.
            </summary>
        </member>
        <member name="P:ZXing.Binarizer.Height">
            <summary>
            Gets the height of the luminance source object.
            </summary>
        </member>
        <member name="T:ZXing.BinaryBitmap">
            <summary>
            This class is the core bitmap class used by ZXing to represent 1 bit data. Reader objects
            accept a BinaryBitmap and attempt to decode it.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="M:ZXing.BinaryBitmap.#ctor(ZXing.Binarizer)">
            <summary>
            
            </summary>
            <param name="binarizer"></param>
        </member>
        <member name="P:ZXing.BinaryBitmap.Width">
            <returns>
            The width of the bitmap.
            </returns>
        </member>
        <member name="P:ZXing.BinaryBitmap.Height">
            <returns>
            The height of the bitmap.
            </returns>
        </member>
        <member name="M:ZXing.BinaryBitmap.getBlackRow(System.Int32,ZXing.Common.BitArray)">
            <summary>
            Converts one row of luminance data to 1 bit data. May actually do the conversion, or return
            cached data. Callers should assume this method is expensive and call it as seldom as possible.
            This method is intended for decoding 1D barcodes and may choose to apply sharpening.
            </summary>
            <param name="y">The row to fetch, which must be in [0, bitmap height).</param>
            <param name="row">An optional preallocated array. If null or too small, it will be ignored.
            If used, the Binarizer will call BitArray.clear(). Always use the returned object.
            </param>
            <returns> The array of bits for this row (true means black).</returns>
        </member>
        <member name="P:ZXing.BinaryBitmap.BlackMatrix">
            <summary>
            Converts a 2D array of luminance data to 1 bit. As above, assume this method is expensive
            and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or
            may not apply sharpening. Therefore, a row from this matrix may not be identical to one
            fetched using getBlackRow(), so don't mix and match between them.
            </summary>
            <returns> The 2D array of bits for the image (true means black).</returns>
        </member>
        <member name="P:ZXing.BinaryBitmap.CropSupported">
            <returns>
            Whether this bitmap can be cropped.
            </returns>
        </member>
        <member name="M:ZXing.BinaryBitmap.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new object with cropped image data. Implementations may keep a reference to the
            original data rather than a copy. Only callable if isCropSupported() is true.
            </summary>
            <param name="left">The left coordinate, which must be in [0, Width)</param>
            <param name="top">The top coordinate, which must be in [0, Height)</param>
            <param name="width">The width of the rectangle to crop.</param>
            <param name="height">The height of the rectangle to crop.</param>
            <returns> A cropped version of this object.</returns>
        </member>
        <member name="P:ZXing.BinaryBitmap.RotateSupported">
            <returns>
            Whether this bitmap supports counter-clockwise rotation.
            </returns>
        </member>
        <member name="M:ZXing.BinaryBitmap.rotateCounterClockwise">
            <summary>
            Returns a new object with rotated image data by 90 degrees counterclockwise.
            Only callable if <see cref="P:ZXing.BinaryBitmap.RotateSupported"/> is true.
            </summary>
            <returns>A rotated version of this object.</returns>
        </member>
        <member name="M:ZXing.BinaryBitmap.rotateCounterClockwise45">
            <summary>
            Returns a new object with rotated image data by 45 degrees counterclockwise.
            Only callable if <see cref="P:ZXing.BinaryBitmap.RotateSupported"/> is true.
            </summary>
            <returns>A rotated version of this object.</returns>
        </member>
        <member name="M:ZXing.BinaryBitmap.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:ZXing.BitmapLuminanceSource">
            <summary>
            class which represents the luminance values for a bitmap object
            </summary>
        </member>
        <member name="M:ZXing.BitmapLuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BitmapLuminanceSource"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:ZXing.BitmapLuminanceSource.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BitmapLuminanceSource"/> class
            with the image of a Bitmap instance
            </summary>
            <param name="bitmap">The bitmap.</param>
        </member>
        <member name="M:ZXing.BitmapLuminanceSource.CreateLuminanceSource(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Should create a new luminance source with the right class type.
            The method is used in methods crop and rotate.
            </summary>
            <param name="newLuminances">The new luminances.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.BitmapSourceLuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BitmapSourceLuminanceSource"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:ZXing.BitmapSourceLuminanceSource.#ctor(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.BitmapSourceLuminanceSource"/> class.
            </summary>
            <param name="bitmap">The bitmap.</param>
        </member>
        <member name="M:ZXing.BitmapSourceLuminanceSource.CreateLuminanceSource(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Should create a new luminance source with the right class type.
            The method is used in methods crop and rotate.
            </summary>
            <param name="newLuminances">The new luminances.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Client.Result.AbstractDoCoMoResultParser">
            <summary> <p>See
            <a href="http://www.nttdocomo.co.jp/english/service/imode/make/content/barcode/about/s2.html">
            DoCoMo's documentation</a> about the result types represented by subclasses of this class.</p>
            
            <p>Thanks to Jeff Griffin for proposing rewrite of these classes that relies less
            on exception-based mechanisms during parsing.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:ZXing.Client.Result.AddressBookAUResultParser">
            <summary> Implements KDDI AU's address book format. See
            <a href="http://www.au.kddi.com/ezfactory/tec/two_dimensions/index.html">
            http://www.au.kddi.com/ezfactory/tec/two_dimensions/index.html</a>.
            (Thanks to Yuzo for translating!)
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:ZXing.Client.Result.AddressBookDoCoMoResultParser">
            <summary> Implements the "MECARD" address book entry format.
            
            Supported keys: N, SOUND, TEL, EMAIL, NOTE, ADR, BDAY, URL, plus ORG
            Unsupported keys: TEL-AV, NICKNAME
            
            Except for TEL, multiple values for keys are also not supported;
            the first one found takes precedence.
            
            Our understanding of the MECARD format is based on this document:
            
            http://www.mobicode.org.tw/files/OMIA%20Mobile%20Bar%20Code%20Standard%20v3.2.1.doc 
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:ZXing.Client.Result.AddressBookParsedResult">
            <summary>
            Represents a parsed result that encodes contact information, like that in an address book entry.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.Client.Result.AddressBookParsedResult.#ctor(System.String[],System.String[],System.String[],System.String[],System.String[],System.String[],System.String[])">
            <summary>
            initializing constructor
            </summary>
            <param name="names"></param>
            <param name="phoneNumbers"></param>
            <param name="phoneTypes"></param>
            <param name="emails"></param>
            <param name="emailTypes"></param>
            <param name="addresses"></param>
            <param name="addressTypes"></param>
        </member>
        <member name="M:ZXing.Client.Result.AddressBookParsedResult.#ctor(System.String[],System.String[],System.String,System.String[],System.String[],System.String[],System.String[],System.String,System.String,System.String[],System.String[],System.String,System.String,System.String,System.String[],System.String[])">
            <summary>
            initializing constructor
            </summary>
            <param name="names"></param>
            <param name="nicknames"></param>
            <param name="pronunciation"></param>
            <param name="phoneNumbers"></param>
            <param name="phoneTypes"></param>
            <param name="emails"></param>
            <param name="emailTypes"></param>
            <param name="instantMessenger"></param>
            <param name="note"></param>
            <param name="addresses"></param>
            <param name="addressTypes"></param>
            <param name="org"></param>
            <param name="birthday"></param>
            <param name="title"></param>
            <param name="urls"></param>
            <param name="geo"></param>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.Names">
            <summary>
            the names
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.Nicknames">
            <summary>
            the nicknames
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.Pronunciation">
            <summary>
            In Japanese, the name is written in kanji, which can have multiple readings. Therefore a hint
            is often provided, called furigana, which spells the name phonetically.
            </summary>
            <return>The pronunciation of the getNames() field, often in hiragana or katakana.</return>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.PhoneNumbers">
            <summary>
            the phone numbers
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.PhoneTypes">
            <return>optional descriptions of the type of each phone number. It could be like "HOME", but,
            there is no guaranteed or standard format.</return>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.Emails">
            <summary>
            the e-mail addresses
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.EmailTypes">
            <return>optional descriptions of the type of each e-mail. It could be like "WORK", but,
            there is no guaranteed or standard format.</return>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.InstantMessenger">
            <summary>
            the instant messenger addresses
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.Note">
            <summary>
            the note field
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.Addresses">
            <summary>
            the addresses
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.AddressTypes">
            <return>optional descriptions of the type of each e-mail. It could be like "WORK", but,
            there is no guaranteed or standard format.</return>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.Title">
            <summary>
            the title
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.URLs">
            <summary>
            the urls
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.Birthday">
            <return>birthday formatted as yyyyMMdd (e.g. 19780917)</return>
        </member>
        <member name="P:ZXing.Client.Result.AddressBookParsedResult.Geo">
            <return>a location as a latitude/longitude pair</return>
        </member>
        <member name="T:ZXing.Client.Result.BizcardResultParser">
            <summary> Implements the "BIZCARD" address book entry format, though this has been
            largely reverse-engineered from examples observed in the wild -- still
            looking for a definitive reference.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:ZXing.Client.Result.BookmarkDoCoMoResultParser">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:ZXing.Client.Result.CalendarParsedResult">
             <summary>
             Represents a parsed result that encodes a calendar event at a certain time, optionally with attendees and a location.
             </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:ZXing.Client.Result.CalendarParsedResult.Start">
            <summary>
            Gets the start.
            </summary>
        </member>
        <member name="M:ZXing.Client.Result.CalendarParsedResult.isStartAllDay">
            <summary>
            Determines whether [is start all day].
            </summary>
            <returns>if start time was specified as a whole day</returns>
        </member>
        <member name="P:ZXing.Client.Result.CalendarParsedResult.End">
            <summary>
            event end <see cref="T:System.DateTime"/>, or null if event has no duration
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.CalendarParsedResult.isEndAllDay">
            <summary>
            Gets a value indicating whether this instance is end all day.
            </summary>
            <value>true if end time was specified as a whole day</value>
        </member>
        <member name="M:ZXing.Client.Result.CalendarParsedResult.parseDate(System.String)">
            <summary>
            Parses a string as a date. RFC 2445 allows the start and end fields to be of type DATE (e.g. 20081021)
            or DATE-TIME (e.g. 20081021T123000 for local time, or 20081021T123000Z for UTC).
            </summary>
            <param name="when">The string to parse</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">if not a date formatted string</exception>
        </member>
        <member name="T:ZXing.Client.Result.EmailAddressParsedResult">
            <summary>
            Represents a parsed result that encodes an email message including recipients, subject and body text.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:ZXing.Client.Result.EmailAddressParsedResult.EmailAddress">
            <summary>
            the email address
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.EmailAddressParsedResult.Tos">
            <summary>
            the TOs
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.EmailAddressParsedResult.CCs">
            <summary>
            the CCs
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.EmailAddressParsedResult.BCCs">
            <summary>
            the BCCs
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.EmailAddressParsedResult.Subject">
            <summary>
            the subject
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.EmailAddressParsedResult.Body">
            <summary>
            the body
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.EmailAddressParsedResult.MailtoURI">
            <summary>
            the mailto: uri
            </summary>
        </member>
        <member name="T:ZXing.Client.Result.EmailAddressResultParser">
            <summary>
            Represents a result that encodes an e-mail address, either as a plain address
            like "joe@example.org" or a mailto: URL like "mailto:joe@example.org".
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="T:ZXing.Client.Result.EmailDoCoMoResultParser">
            <summary>
            Implements the "MATMSG" email message entry format.
            
            Supported keys: TO, SUB, BODY
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.Client.Result.EmailDoCoMoResultParser.isBasicallyValidEmailAddress(System.String)">
            <summary>
            This implements only the most basic checking for an email address's validity -- that it contains
            an '@' and contains no characters disallowed by RFC 2822. This is an overly lenient definition of
            validity. We want to generally be lenient here since this class is only intended to encapsulate what's
            in a barcode, not "judge" it.
            </summary>
            <param name="email">The email.</param>
            <returns>
              <c>true</c> if it is basically a valid email address; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ZXing.Client.Result.ExpandedProductParsedResult">
            <summary>
            Represents a parsed result that encodes extended product information as encoded by the RSS format, like weight, price, dates, etc.
            </summary>
            <author> Antonio Manuel Benjumea Conde, Servinform, S.A.</author>
            <author> Agustín Delgado, Servinform, S.A.</author>
        </member>
        <member name="F:ZXing.Client.Result.ExpandedProductParsedResult.KILOGRAM">
            <summary>
            extension for kilogram weight type
            </summary>
        </member>
        <member name="F:ZXing.Client.Result.ExpandedProductParsedResult.POUND">
            <summary>
            extension for pounds weight type
            </summary>
        </member>
        <member name="M:ZXing.Client.Result.ExpandedProductParsedResult.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            initializing constructor
            </summary>
            <param name="rawText"></param>
            <param name="productID"></param>
            <param name="sscc"></param>
            <param name="lotNumber"></param>
            <param name="productionDate"></param>
            <param name="packagingDate"></param>
            <param name="bestBeforeDate"></param>
            <param name="expirationDate"></param>
            <param name="weight"></param>
            <param name="weightType"></param>
            <param name="weightIncrement"></param>
            <param name="price"></param>
            <param name="priceIncrement"></param>
            <param name="priceCurrency"></param>
            <param name="uncommonAIs"></param>
        </member>
        <member name="M:ZXing.Client.Result.ExpandedProductParsedResult.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Client.Result.ExpandedProductParsedResult.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.RawText">
            <summary>
            the raw text
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.ProductID">
            <summary>
            the product id
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.Sscc">
            <summary>
            the sscc
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.LotNumber">
            <summary>
            the lot number
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.ProductionDate">
            <summary>
            the production date
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.PackagingDate">
            <summary>
            the packaging date
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.BestBeforeDate">
            <summary>
            the best before date
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.ExpirationDate">
            <summary>
            the expiration date
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.Weight">
            <summary>
            the weight
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.WeightType">
            <summary>
            the weight type
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.WeightIncrement">
            <summary>
            the weight increment
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.Price">
            <summary>
            the price
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.PriceIncrement">
            <summary>
            the price increment
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.PriceCurrency">
            <summary>
            the price currency
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.UncommonAIs">
            <summary>
            the uncommon AIs
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.ExpandedProductParsedResult.DisplayResult">
            <summary>
            the display representation (raw text)
            </summary>
        </member>
        <member name="T:ZXing.Client.Result.ExpandedProductResultParser">
            <summary>
            Parses strings of digits that represent a RSS Extended code.
            </summary>
            <author>Antonio Manuel Benjumea Conde, Servinform, S.A.</author>
            <author>Agustín Delgado, Servinform, S.A.</author>
        </member>
        <member name="M:ZXing.Client.Result.ExpandedProductResultParser.parse(ZXing.Result)">
            <summary>
            tries to parse a text representation to a specific result object
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Client.Result.GeoParsedResult">
            <summary>
            Represents a parsed result that encodes a geographic coordinate, with latitude, longitude and altitude.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:ZXing.Client.Result.GeoParsedResult.Latitude">
            <returns> latitude in degrees
            </returns>
        </member>
        <member name="P:ZXing.Client.Result.GeoParsedResult.Longitude">
            <returns> longitude in degrees
            </returns>
        </member>
        <member name="P:ZXing.Client.Result.GeoParsedResult.Altitude">
            <returns> altitude in meters. If not specified, in the geo URI, returns 0.0
            </returns>
        </member>
        <member name="P:ZXing.Client.Result.GeoParsedResult.Query">
            <return> query string associated with geo URI or null if none exists</return>
        </member>
        <member name="P:ZXing.Client.Result.GeoParsedResult.GeoURI">
            <summary>
            the geo URI
            </summary>
        </member>
        <member name="P:ZXing.Client.Result.GeoParsedResult.GoogleMapsURI">
            <returns> a URI link to Google Maps which display the point on the Earth described
            by this instance, and sets the zoom level in a way that roughly reflects the
            altitude, if specified
            </returns>
        </member>
        <member name="T:ZXing.Client.Result.GeoResultParser">
            <summary> Parses a "geo:" URI result, which specifies a location on the surface of
            the Earth as well as an optional altitude above the surface. See
            <a href="http://tools.ietf.org/html/draft-mayrhofer-geo-uri-00">
            http://tools.ietf.org/html/draft-mayrhofer-geo-uri-00</a>.
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:ZXing.Client.Result.ISBNParsedResult">
            <summary>
            Represents a parsed result that encodes a product ISBN number.
            </summary>
            <author>jbreiden@google.com (Jeff Breidenbach)</author>
        </member>
        <member name="P:ZXing.Client.Result.ISBNParsedResult.ISBN">
            <summary>
            the ISBN number
            </summary>
        </member>
        <member name="T:ZXing.Client.Result.ISBNResultParser">
            <summary> Parses strings of digits that represent a ISBN.
            
            </summary>
            <author>  jbreiden@google.com (Jeff Breidenbach)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:ZXing.Client.Result.ISBNResultParser.parse(ZXing.Result)">
            <summary>
            See <a href="http://www.bisg.org/isbn-13/for.dummies.html">ISBN-13 For Dummies</a>
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Client.Result.ParsedResult">
            <summary> <p>Abstract class representing the result of decoding a barcode, as more than
            a String -- as some type of structured data. This might be a subclass which represents
            a URL, or an e-mail address. {@link ResultParser#parseResult(Result)} will turn a raw
            decoded string into the most appropriate type of structured representation.</p>
            
            <p>Thanks to Jeff Griffin for proposing rewrite of these classes that relies less
            on exception-based mechanisms during parsing.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="T:ZXing.Client.Result.ParsedResultType">
            <summary>
            Represents the type of data encoded by a barcode -- from plain text, to a
            URI, to an e-mail address, etc.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="T:ZXing.Client.Result.ProductParsedResult">
            <summary>
            Represents a parsed result that encodes a product by an identifier of some kind.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="T:ZXing.Client.Result.ProductResultParser">
            <summary>
            Parses strings of digits that represent a UPC code.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="T:ZXing.Client.Result.ResultParser">
            <summary> <p>Abstract class representing the result of decoding a barcode, as more than
            a String -- as some type of structured data. This might be a subclass which represents
            a URL, or an e-mail address. {@link #parseResult(com.google.zxing.Result)} will turn a raw
            decoded string into the most appropriate type of structured representation.</p>
            
            <p>Thanks to Jeff Griffin for proposing rewrite of these classes that relies less
            on exception-based mechanisms during parsing.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.Client.Result.ResultParser.parse(ZXing.Result)">
            <summary>
            Attempts to parse the raw {@link Result}'s contents as a particular type
            of information (email, URL, etc.) and return a {@link ParsedResult} encapsulating
            the result of parsing.
            </summary>
            <param name="theResult">the raw <see cref="N:ZXing.Client.Result"/> to parse</param>
            <returns><see cref="T:ZXing.Client.Result.ParsedResult" /> encapsulating the parsing result</returns>
        </member>
        <member name="M:ZXing.Client.Result.ResultParser.parseResult(ZXing.Result)">
            <summary>
            Parses the result.
            </summary>
            <param name="theResult">The result.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Client.Result.SMSMMSResultParser">
            <summary> <p>Parses an "sms:" URI result, which specifies a number to SMS and optional
            "via" number. See <a href="http://gbiv.com/protocols/uri/drafts/draft-antti-gsm-sms-url-04.txt">
            the IETF draft</a> on this.</p>
            
            <p>This actually also parses URIs starting with "mms:", "smsto:", "mmsto:", "SMSTO:", and
            "MMSTO:", and treats them all the same way, and effectively converts them to an "sms:" URI
            for purposes of forwarding to the platform.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:ZXing.Client.Result.SMSParsedResult">
            <summary>
            Represents a parsed result that encodes an SMS message, including recipients, subject and body text.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="T:ZXing.Client.Result.SMSTOMMSTOResultParser">
            <summary>
            <p>Parses an "smsto:" URI result, whose format is not standardized but appears to be like:
            {@code smsto:number(:body)}.</p>
            <p>This actually also parses URIs starting with "smsto:", "mmsto:", "SMSTO:", and
            "MMSTO:", and treats them all the same way, and effectively converts them to an "sms:" URI
            for purposes of forwarding to the platform.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="T:ZXing.Client.Result.SMTPResultParser">
            <summary>
            <p>Parses an "smtp:" URI result, whose format is not standardized but appears to be like:
            <code>smtp[:subject[:body]]}</code>.</p>
            <p>See http://code.google.com/p/zxing/issues/detail?id=536</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="T:ZXing.Client.Result.TelParsedResult">
            <summary>
            Represents a parsed result that encodes a telephone number.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="T:ZXing.Client.Result.TelResultParser">
            <summary>
            Parses a "tel:" URI result, which specifies a phone number.
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:ZXing.Client.Result.TextParsedResult">
            <summary>
            A simple result type encapsulating a string that has no further interpretation.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="T:ZXing.Client.Result.URIParsedResult">
            <summary>
            A simple result type encapsulating a URI that has no further interpretation.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:ZXing.Client.Result.URIParsedResult.PossiblyMaliciousURI">
            <returns> true if the URI contains suspicious patterns that may suggest it intends to
            mislead the user about its true nature. At the moment this looks for the presence
            of user/password syntax in the host/authority portion of a URI which may be used
            in attempts to make the URI's host appear to be other than it is. Example:
            http://yourbank.com@phisher.com  This URI connects to phisher.com but may appear
            to connect to yourbank.com at first glance.
            </returns>
        </member>
        <member name="M:ZXing.Client.Result.URIParsedResult.massageURI(System.String)">
            <summary> Transforms a string that represents a URI into something more proper, by adding or canonicalizing
            the protocol.
            </summary>
        </member>
        <member name="T:ZXing.Client.Result.URIResultParser">
            <summary>
            Tries to parse results that are a URI of some kind.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="T:ZXing.Client.Result.URLTOResultParser">
            <summary> Parses the "URLTO" result format, which is of the form "URLTO:[title]:[url]".
            This seems to be used sometimes, but I am not able to find documentation
            on its origin or official format?
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:ZXing.Client.Result.VCardResultParser">
            <summary>
            Parses contact information formatted according to the VCard (2.1) format. This is not a complete
            implementation but should parse information as commonly encoded in 2D barcodes.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.Client.Result.VCardResultParser.formatNames(System.Collections.Generic.IEnumerable{System.Collections.Generic.List{System.String}})">
             Formats name fields of the form "Public;John;Q.;Reverend;III" into a form like
             "Reverend John Q. Public III".
            
             @param names name values to format, in place
        </member>
        <member name="T:ZXing.Client.Result.VEventResultParser">
            <summary>
            Partially implements the iCalendar format's "VEVENT" format for specifying a
            calendar event. See RFC 2445. This supports SUMMARY, DTSTART and DTEND fields.
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="T:ZXing.Client.Result.VINParsedResult">
            <summary>
            Represents a parsed result that encodes a Vehicle Identification Number (VIN).
            </summary>
        </member>
        <member name="T:ZXing.Client.Result.VINResultParser">
            <summary>
            Detects a result that is likely a vehicle identification number.
            @author Sean Owen
            </summary>
        </member>
        <member name="T:ZXing.Client.Result.WifiParsedResult">
            <summary>
            Represents a parsed result that encodes wifi network information, like SSID and password.
            </summary>
            <author>Vikram Aggarwal</author>
        </member>
        <member name="T:ZXing.Client.Result.WifiResultParser">
            <summary>
            <p>Parses a WIFI configuration string. Strings will be of the form:</p>
            <p>{@code WIFI:T:[network type];S:[network SSID];P:[network password];H:[hidden?];;}</p>
            <p>The fields can appear in any order. Only "S:" is required.</p>
            </summary>
            <author>Vikram Aggarwal</author>
            <author>Sean Owen</author>
        </member>
        <member name="T:ZXing.Common.BitArray">
            <summary>
            A simple, fast array of bits, represented compactly by an array of ints internally.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:ZXing.Common.BitArray.Size">
            <summary>
            size of the array, number of elements
            </summary>
        </member>
        <member name="P:ZXing.Common.BitArray.SizeInBytes">
            <summary>
            size of the array in bytes
            </summary>
        </member>
        <member name="P:ZXing.Common.BitArray.Item(System.Int32)">
            <summary>
            index accessor
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Common.BitArray.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:ZXing.Common.BitArray.#ctor(System.Int32)">
            <summary>
            initializing constructor
            </summary>
            <param name="size">desired size of the array</param>
        </member>
        <member name="M:ZXing.Common.BitArray.flip(System.Int32)">
            <summary>
            Flips bit i.
            </summary>
            <param name="i">bit to set
            </param>
        </member>
        <member name="M:ZXing.Common.BitArray.getNextSet(System.Int32)">
            <summary>
            Gets the next set.
            </summary>
            <param name="from">first bit to check</param>
            <returns>index of first bit that is set, starting from the given index, or size if none are set
            at or beyond this given index</returns>
        </member>
        <member name="M:ZXing.Common.BitArray.getNextUnset(System.Int32)">
            <summary>
            see getNextSet(int)
            </summary>
            <param name="from">index to start looking for unset bit</param>
            <returns>index of next unset bit, or <see cref="P:ZXing.Common.BitArray.Size"/> if none are unset until the end</returns>
        </member>
        <member name="M:ZXing.Common.BitArray.setBulk(System.Int32,System.Int32)">
            <summary> Sets a block of 32 bits, starting at bit i.
            
            </summary>
            <param name="i">first bit to set
            </param>
            <param name="newBits">the new value of the next 32 bits. Note again that the least-significant bit
            corresponds to bit i, the next-least-significant to i+1, and so on.
            </param>
        </member>
        <member name="M:ZXing.Common.BitArray.setRange(System.Int32,System.Int32)">
            <summary>
            Sets a range of bits.
            </summary>
            <param name="start">start of range, inclusive.</param>
            <param name="end">end of range, exclusive</param>
        </member>
        <member name="M:ZXing.Common.BitArray.clear">
            <summary> Clears all bits (sets to false).</summary>
        </member>
        <member name="M:ZXing.Common.BitArray.isRange(System.Int32,System.Int32,System.Boolean)">
            <summary> Efficient method to check if a range of bits is set, or not set.
            
            </summary>
            <param name="start">start of range, inclusive.
            </param>
            <param name="end">end of range, exclusive
            </param>
            <param name="value">if true, checks that bits in range are set, otherwise checks that they are not set
            </param>
            <returns> true iff all bits are set or not set in range, according to value argument</returns>
            <throws><exception cref="T:System.ArgumentException" /> if end is less than start or the range is not contained in the array</throws>
        </member>
        <member name="M:ZXing.Common.BitArray.appendBit(System.Boolean)">
            <summary>
            Appends the bit.
            </summary>
            <param name="bit">The bit.</param>
        </member>
        <member name="P:ZXing.Common.BitArray.Array">
            <returns> underlying array of ints. The first element holds the first 32 bits, and the least
            significant bit is bit 0.
            </returns>
        </member>
        <member name="M:ZXing.Common.BitArray.appendBits(System.Int32,System.Int32)">
            <summary>
            Appends the least-significant bits, from value, in order from most-significant to
            least-significant. For example, appending 6 bits from 0x000001E will append the bits
            0, 1, 1, 1, 1, 0 in that order.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> containing bits to append</param>
            <param name="numBits">bits from value to append</param>
        </member>
        <member name="M:ZXing.Common.BitArray.appendBitArray(ZXing.Common.BitArray)">
            <summary>
            adds the array to the end
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:ZXing.Common.BitArray.xor(ZXing.Common.BitArray)">
            <summary>
            XOR operation
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:ZXing.Common.BitArray.toBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            converts to bytes.
            </summary>
            <param name="bitOffset">first bit to start writing</param>
            <param name="array">array to write into. Bytes are written most-significant byte first. This is the opposite
            of the internal representation, which is exposed by BitArray</param>
            <param name="offset">position in array to start writing</param>
            <param name="numBytes">how many bytes to write</param>
        </member>
        <member name="M:ZXing.Common.BitArray.reverse">
            <summary> Reverses all bits in the array.</summary>
        </member>
        <member name="M:ZXing.Common.BitArray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZXing.Common.BitArray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:ZXing.Common.BitArray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:ZXing.Common.BitArray.Clone">
            <summary>
            Erstellt ein neues Objekt, das eine Kopie der aktuellen Instanz darstellt.
            </summary>
            <returns>
            Ein neues Objekt, das eine Kopie dieser Instanz darstellt.
            </returns>
        </member>
        <member name="T:ZXing.Common.BitMatrix">
            <summary>
              <p>Represents a 2D matrix of bits. In function arguments below, and throughout the common
            module, x is the column position, and y is the row position. The ordering is always x, y.
            The origin is at the top-left.</p>
              <p>Internally the bits are represented in a 1-D array of 32-bit ints. However, each row begins
            with a new int. This is done intentionally so that we can copy out a row into a BitArray very
            efficiently.</p>
              <p>The ordering of bits is row-major. Within each int, the least significant bits are used first,
            meaning they represent lower x values. This is compatible with BitArray's implementation.</p>
            </summary>
            <author>Sean Owen</author>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="P:ZXing.Common.BitMatrix.Width">
            <returns> The width of the matrix
            </returns>
        </member>
        <member name="P:ZXing.Common.BitMatrix.Height">
            <returns> The height of the matrix
            </returns>
        </member>
        <member name="P:ZXing.Common.BitMatrix.Dimension">
            <summary> This method is for compatibility with older code. It's only logical to call if the matrix
            is square, so I'm throwing if that's not the case.
            
            </summary>
            <returns> row/column dimension of this matrix
            </returns>
        </member>
        <member name="P:ZXing.Common.BitMatrix.RowSize">
            <returns>
            The rowsize of the matrix
            </returns>
        </member>
        <member name="M:ZXing.Common.BitMatrix.#ctor(System.Int32)">
            <summary>
            Creates an empty square <see cref="T:ZXing.Common.BitMatrix"/>.
            </summary>
            <param name="dimension">height and width</param>
        </member>
        <member name="M:ZXing.Common.BitMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an empty square <see cref="T:ZXing.Common.BitMatrix"/>.
            </summary>
            <param name="width">bit matrix width</param>
            <param name="height">bit matrix height</param>
        </member>
        <member name="M:ZXing.Common.BitMatrix.parse(System.Boolean[][])">
            <summary>
            Interprets a 2D array of booleans as a <see cref="T:ZXing.Common.BitMatrix"/>, where "true" means an "on" bit.
            </summary>
            <param name="image">bits of the image, as a row-major 2D array. Elements are arrays representing rows</param>
            <returns><see cref="T:ZXing.Common.BitMatrix"/> representation of image</returns>
        </member>
        <member name="P:ZXing.Common.BitMatrix.Item(System.Int32,System.Int32)">
            <summary> <p>Gets the requested bit, where true means black.</p>
            
            </summary>
            <param name="x">The horizontal component (i.e. which column)
            </param>
            <param name="y">The vertical component (i.e. which row)
            </param>
            <returns> value of given bit in matrix
            </returns>
        </member>
        <member name="M:ZXing.Common.BitMatrix.flip(System.Int32,System.Int32)">
            <summary>
            <p>Flips the given bit.</p>
            </summary>
            <param name="x">The horizontal component (i.e. which column)</param>
            <param name="y">The vertical component (i.e. which row)</param>
        </member>
        <member name="M:ZXing.Common.BitMatrix.flipWhen(System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            flip all of the bits, if shouldBeFlipped is true for the coordinates
            </summary>
            <param name="shouldBeFlipped">should return true, if the bit at a given coordinate should be flipped</param>
        </member>
        <member name="M:ZXing.Common.BitMatrix.xor(ZXing.Common.BitMatrix)">
            <summary>
            Exclusive-or (XOR): Flip the bit in this {@code BitMatrix} if the corresponding
            mask bit is set.
            </summary>
            <param name="mask">The mask.</param>
        </member>
        <member name="M:ZXing.Common.BitMatrix.clear">
            <summary> Clears all bits (sets to false).</summary>
        </member>
        <member name="M:ZXing.Common.BitMatrix.setRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <p>Sets a square region of the bit matrix to true.</p>
            
            </summary>
            <param name="left">The horizontal position to begin at (inclusive)
            </param>
            <param name="top">The vertical position to begin at (inclusive)
            </param>
            <param name="width">The width of the region
            </param>
            <param name="height">The height of the region
            </param>
        </member>
        <member name="M:ZXing.Common.BitMatrix.getRow(System.Int32,ZXing.Common.BitArray)">
            <summary> A fast method to retrieve one row of data from the matrix as a BitArray.
            
            </summary>
            <param name="y">The row to retrieve
            </param>
            <param name="row">An optional caller-allocated BitArray, will be allocated if null or too small
            </param>
            <returns> The resulting BitArray - this reference should always be used even when passing
            your own row
            </returns>
        </member>
        <member name="M:ZXing.Common.BitMatrix.setRow(System.Int32,ZXing.Common.BitArray)">
            <summary>
            Sets the row.
            </summary>
            <param name="y">row to set</param>
            <param name="row">{@link BitArray} to copy from</param>
        </member>
        <member name="M:ZXing.Common.BitMatrix.rotate180">
            <summary>
            Modifies this {@code BitMatrix} to represent the same but rotated 180 degrees
            </summary>
        </member>
        <member name="M:ZXing.Common.BitMatrix.getEnclosingRectangle">
            <summary>
            This is useful in detecting the enclosing rectangle of a 'pure' barcode.
            </summary>
            <returns>{left,top,width,height} enclosing rectangle of all 1 bits, or null if it is all white</returns>
        </member>
        <member name="M:ZXing.Common.BitMatrix.getTopLeftOnBit">
            <summary>
            This is useful in detecting a corner of a 'pure' barcode.
            </summary>
            <returns>{x,y} coordinate of top-left-most 1 bit, or null if it is all white</returns>
        </member>
        <member name="M:ZXing.Common.BitMatrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZXing.Common.BitMatrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:ZXing.Common.BitMatrix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:ZXing.Common.BitMatrix.ToString(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="setString">The set string.</param>
            <param name="unsetString">The unset string.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:ZXing.Common.BitMatrix.ToString(System.String,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="setString">The set string.</param>
            <param name="unsetString">The unset string.</param>
            <param name="lineSeparator">The line separator.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:ZXing.Common.BitMatrix.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.Common.BitMatrix.ToBitmap(ZXing.BarcodeFormat,System.String)">
            <summary>
            Converts this ByteMatrix to a black and white bitmap.
            </summary>
            <returns>A black and white bitmap converted from this ByteMatrix.</returns>
        </member>
        <member name="T:ZXing.Common.BitSource">
            <summary> <p>This provides an easy abstraction to read bits at a time from a sequence of bytes, where the
            number of bits read is not often a multiple of 8.</p>
            
            <p>This class is thread-safe but not reentrant. Unless the caller modifies the bytes array
            it passed in, in which case all bets are off.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:ZXing.Common.BitSource.#ctor(System.Byte[])">
            <param name="bytes">bytes from which this will read bits. Bits will be read from the first byte first.
            Bits are read within a byte from most-significant to least-significant bit.
            </param>
        </member>
        <member name="P:ZXing.Common.BitSource.BitOffset">
            <summary>
            index of next bit in current byte which would be read by the next call to {@link #readBits(int)}.
            </summary>
        </member>
        <member name="P:ZXing.Common.BitSource.ByteOffset">
            <summary>
            index of next byte in input byte array which would be read by the next call to {@link #readBits(int)}.
            </summary>
        </member>
        <member name="M:ZXing.Common.BitSource.readBits(System.Int32)">
            <param name="numBits">number of bits to read
            </param>
            <returns> int representing the bits read. The bits will appear as the least-significant
            bits of the int
            </returns>
            <exception cref="T:System.ArgumentException">if numBits isn't in [1,32] or more than is available</exception>
        </member>
        <member name="M:ZXing.Common.BitSource.available">
            <returns> number of bits that can be read successfully
            </returns>
        </member>
        <member name="T:ZXing.Common.CharacterSetECI">
            <summary> Encapsulates a Character Set ECI, according to "Extended Channel Interpretations" 5.3.1.1
            of ISO 18004.
            
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.Common.CharacterSetECI.getCharacterSetECIByValue(System.Int32)">
            <param name="value">character set ECI value</param>
            <returns><see cref="T:ZXing.Common.CharacterSetECI"/> representing ECI of given value, or null if it is legal but unsupported</returns>
        </member>
        <member name="M:ZXing.Common.CharacterSetECI.getCharacterSetECIByName(System.String)">
            <param name="name">character set ECI encoding name</param>
            <returns><see cref="T:ZXing.Common.CharacterSetECI"/> representing ECI for character encoding, or null if it is legalbut unsupported</returns>
        </member>
        <member name="T:ZXing.Common.DecoderResult">
            <summary>
            Encapsulates the result of decoding a matrix of bits. This typically
            applies to 2D barcode formats. For now it contains the raw bytes obtained,
            as well as a String interpretation of those bytes, if applicable.
            <author>Sean Owen</author>
            </summary>
        </member>
        <member name="P:ZXing.Common.DecoderResult.RawBytes">
            <summary>
            raw bytes representing the result, or null if not applicable
            </summary>
        </member>
        <member name="P:ZXing.Common.DecoderResult.NumBits">
            <summary>
            how many bits of<see cref="P:ZXing.Common.DecoderResult.RawBytes"/> are valid; typically 8 times its length
            </summary>
        </member>
        <member name="P:ZXing.Common.DecoderResult.Text">
            <summary>
            text representation of the result
            </summary>
        </member>
        <member name="P:ZXing.Common.DecoderResult.ByteSegments">
            <summary>
            list of byte segments in the result, or null if not applicable
            </summary>
        </member>
        <member name="P:ZXing.Common.DecoderResult.ECLevel">
            <summary>
            name of error correction level used, or null if not applicable
            </summary>
        </member>
        <member name="P:ZXing.Common.DecoderResult.StructuredAppend">
            <summary>
            gets a value which describe if structure append data was found
            </summary>
        </member>
        <member name="P:ZXing.Common.DecoderResult.ErrorsCorrected">
            <summary>
            number of errors corrected, or null if not applicable
            </summary>
        </member>
        <member name="P:ZXing.Common.DecoderResult.StructuredAppendSequenceNumber">
            <summary>
            gives the sequence number of the result if structured append was found
            </summary>
        </member>
        <member name="P:ZXing.Common.DecoderResult.Erasures">
            <summary>
            number of erasures corrected, or null if not applicable
            </summary>
        </member>
        <member name="P:ZXing.Common.DecoderResult.StructuredAppendParity">
            <summary>
            gives the parity information if structured append was found
            </summary>
        </member>
        <member name="P:ZXing.Common.DecoderResult.Other">
            <summary>
            Miscellanseous data value for the various decoders
            </summary>
            <value>The other.</value>
        </member>
        <member name="M:ZXing.Common.DecoderResult.#ctor(System.Byte[],System.String,System.Collections.Generic.IList{System.Byte[]},System.String)">
            <summary>
            initializing constructor
            </summary>
            <param name="rawBytes"></param>
            <param name="text"></param>
            <param name="byteSegments"></param>
            <param name="ecLevel"></param>
        </member>
        <member name="M:ZXing.Common.DecoderResult.#ctor(System.Byte[],System.String,System.Collections.Generic.IList{System.Byte[]},System.String,System.Int32,System.Int32)">
            <summary>
            initializing constructor
            </summary>
            <param name="rawBytes"></param>
            <param name="text"></param>
            <param name="byteSegments"></param>
            <param name="ecLevel"></param>
            <param name="saSequence"></param>
            <param name="saParity"></param>
        </member>
        <member name="M:ZXing.Common.DecoderResult.#ctor(System.Byte[],System.Int32,System.String,System.Collections.Generic.IList{System.Byte[]},System.String)">
            <summary>
            initializing constructor
            </summary>
            <param name="rawBytes"></param>
            <param name="numBits"></param>
            <param name="text"></param>
            <param name="byteSegments"></param>
            <param name="ecLevel"></param>
        </member>
        <member name="M:ZXing.Common.DecoderResult.#ctor(System.Byte[],System.Int32,System.String,System.Collections.Generic.IList{System.Byte[]},System.String,System.Int32,System.Int32)">
            <summary>
            initializing constructor
            </summary>
            <param name="rawBytes"></param>
            <param name="numBits"></param>
            <param name="text"></param>
            <param name="byteSegments"></param>
            <param name="ecLevel"></param>
            <param name="saSequence"></param>
            <param name="saParity"></param>
        </member>
        <member name="T:ZXing.Common.DecodingOptions">
            <summary>
            Defines an container for encoder options
            </summary>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.Hints">
            <summary>
            Gets the data container for all options
            </summary>
        </member>
        <member name="E:ZXing.Common.DecodingOptions.ValueChanged">
            <summary>
            event is raised when a value is changed
            </summary>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.TryHarder">
            <summary>
            Gets or sets a flag which cause a deeper look into the bitmap
            </summary>
            <value>
              <c>true</c> if [try harder]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.PureBarcode">
            <summary>
            Image is a pure monochrome image of a barcode.
            </summary>
            <value>
              <c>true</c> if monochrome image of a barcode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.CharacterSet">
            <summary>
            Specifies what character encoding to use when decoding, where applicable (type String)
            </summary>
            <value>
            The character set.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.PossibleFormats">
            <summary>
            Image is known to be of one of a few possible formats.
            Maps to a {@link java.util.List} of {@link BarcodeFormat}s.
            </summary>
            <value>
            The possible formats.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.UseCode39ExtendedMode">
            <summary>
            if Code39 could be detected try to use extended mode for full ASCII character set
            </summary>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.UseCode39RelaxedExtendedMode">
            <summary>
            Don't fail if a Code39 is detected but can't be decoded in extended mode.
            Return the raw Code39 result instead. Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.AssumeCode39CheckDigit">
            <summary>
            Assume Code 39 codes employ a check digit. Maps to <see cref="T:System.Boolean" />.
            </summary>
            <value>
              <c>true</c> if it should assume a Code 39 check digit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.ReturnCodabarStartEnd">
            <summary>
            If true, return the start and end digits in a Codabar barcode instead of stripping them. They
            are alpha, whereas the rest are numeric. By default, they are stripped, but this causes them
            to not be. Doesn't matter what it maps to; use <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.AssumeGS1">
            <summary>
            Assume the barcode is being processed as a GS1 barcode, and modify behavior as needed.
            For example this affects FNC1 handling for Code 128 (aka GS1-128).
            </summary>
            <value>
              <c>true</c> if it should assume GS1; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.AssumeMSICheckDigit">
            <summary>
            Assume MSI codes employ a check digit. Maps to <see cref="T:System.Boolean" />.
            </summary>
            <value>
              <c>true</c> if it should assume a MSI check digit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.AllowedLengths">
            <summary>
            Allowed lengths of encoded data -- reject anything else. Maps to an int[].
            </summary>
        </member>
        <member name="P:ZXing.Common.DecodingOptions.AllowedEANExtensions">
            <summary>
            Allowed extension lengths for EAN or UPC barcodes. Other formats will ignore this.
            Maps to an int[] of the allowed extension lengths, for example [2], [5], or [2, 5].
            If it is optional to have an extension, do not set this hint. If this is set,
            and a UPC or EAN barcode is found but an extension is not, then no result will be returned
            at all.
            </summary>
        </member>
        <member name="M:ZXing.Common.DecodingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Common.DecodingOptions"/> class.
            </summary>
        </member>
        <member name="T:ZXing.Common.DefaultGridSampler">
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:ZXing.Common.DefaultGridSampler.sampleGrid(ZXing.Common.BitMatrix,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
            <param name="image"></param>
            <param name="dimensionX"></param>
            <param name="dimensionY"></param>
            <param name="p1ToX"></param>
            <param name="p1ToY"></param>
            <param name="p2ToX"></param>
            <param name="p2ToY"></param>
            <param name="p3ToX"></param>
            <param name="p3ToY"></param>
            <param name="p4ToX"></param>
            <param name="p4ToY"></param>
            <param name="p1FromX"></param>
            <param name="p1FromY"></param>
            <param name="p2FromX"></param>
            <param name="p2FromY"></param>
            <param name="p3FromX"></param>
            <param name="p3FromY"></param>
            <param name="p4FromX"></param>
            <param name="p4FromY"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Common.DefaultGridSampler.sampleGrid(ZXing.Common.BitMatrix,System.Int32,System.Int32,ZXing.Common.PerspectiveTransform)">
            <summary>
            </summary>
            <param name="image"></param>
            <param name="dimensionX"></param>
            <param name="dimensionY"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Common.DetectorResult">
            <summary>
            <p>Encapsulates the result of detecting a barcode in an image. This includes the raw
            matrix of black/white pixels corresponding to the barcode, and possibly points of interest
            in the image, like the location of finder patterns or corners of the barcode in the image.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:ZXing.Common.DetectorResult.Bits">
            <summary>
            the detected bits
            </summary>
        </member>
        <member name="P:ZXing.Common.DetectorResult.Points">
            <summary>
            the pixel points where the result is found
            </summary>
        </member>
        <member name="M:ZXing.Common.DetectorResult.#ctor(ZXing.Common.BitMatrix,ZXing.ResultPoint[])">
            <summary>
            initializing constructor
            </summary>
            <param name="bits"></param>
            <param name="points"></param>
        </member>
        <member name="T:ZXing.Common.Detector.MathUtils">
            <summary>
            General math-related and numeric utility functions.
            </summary>
        </member>
        <member name="M:ZXing.Common.Detector.MathUtils.round(System.Single)">
            <summary>
            Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its
            argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut
            differ slightly from {@link Math#round(float)} in that half rounds down for negative
            values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.
            </summary>
            <param name="d">real value to round</param>
            <returns>nearest <c>int</c></returns>
        </member>
        <member name="M:ZXing.Common.Detector.MathUtils.distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="aX"></param>
            <param name="aY"></param>
            <param name="bX"></param>
            <param name="bY"></param>
            <returns>Euclidean distance between points A and B</returns>
        </member>
        <member name="M:ZXing.Common.Detector.MathUtils.distance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="aX"></param>
            <param name="aY"></param>
            <param name="bX"></param>
            <param name="bY"></param>
            <returns>Euclidean distance between points A and B</returns>
        </member>
        <member name="M:ZXing.Common.Detector.MathUtils.sum(System.Int32[])">
            <summary>
            </summary>
            <param name="array">values to sum</param>
            <returns>sum of values in array</returns>
        </member>
        <member name="T:ZXing.Common.Detector.MonochromeRectangleDetector">
            <summary> <p>A somewhat generic detector that looks for a barcode-like rectangular region within an image.
            It looks within a mostly white region of an image for a region of black and white, but mostly
            black. It returns the four corners of the region, as best it can determine.</p>
            
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.Common.Detector.MonochromeRectangleDetector.#ctor(ZXing.Common.BitMatrix)">
            <summary>
            initializing constructor
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ZXing.Common.Detector.MonochromeRectangleDetector.detect">
            <summary>
            <p>Detects a rectangular region of black and white -- mostly black -- with a region of mostly
            white, in an image.</p>
            </summary>
            <returns><see cref="T:ZXing.ResultPoint"/>[] describing the corners of the rectangular region. The first and
            last points are opposed on the diagonal, as are the second and third. The first point will be
            the topmost point and the last, the bottommost. The second point will be leftmost and the
            third, the rightmost
            </returns>
        </member>
        <member name="M:ZXing.Common.Detector.MonochromeRectangleDetector.findCornerFromCenter(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Attempts to locate a corner of the barcode by scanning up, down, left or right from a center
            point which should be within the barcode.
            
            </summary>
            <param name="centerX">center's x component (horizontal)
            </param>
            <param name="deltaX">same as deltaY but change in x per step instead
            </param>
            <param name="left">minimum value of x
            </param>
            <param name="right">maximum value of x
            </param>
            <param name="centerY">center's y component (vertical)
            </param>
            <param name="deltaY">change in y per step. If scanning up this is negative; down, positive;
            left or right, 0
            </param>
            <param name="top">minimum value of y to search through (meaningless when di == 0)
            </param>
            <param name="bottom">maximum value of y
            </param>
            <param name="maxWhiteRun">maximum run of white pixels that can still be considered to be within
            the barcode
            </param>
            <returns> a <see cref="T:ZXing.ResultPoint"/> encapsulating the corner that was found
            </returns>
        </member>
        <member name="M:ZXing.Common.Detector.MonochromeRectangleDetector.blackWhiteRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary> Computes the start and end of a region of pixels, either horizontally or vertically, that could
            be part of a Data Matrix barcode.
            
            </summary>
            <param name="fixedDimension">if scanning horizontally, this is the row (the fixed vertical location)
            where we are scanning. If scanning vertically it's the column, the fixed horizontal location
            </param>
            <param name="maxWhiteRun">largest run of white pixels that can still be considered part of the
            barcode region
            </param>
            <param name="minDim">minimum pixel location, horizontally or vertically, to consider
            </param>
            <param name="maxDim">maximum pixel location, horizontally or vertically, to consider
            </param>
            <param name="horizontal">if true, we're scanning left-right, instead of up-down
            </param>
            <returns> int[] with start and end of found range, or null if no such range is found
            (e.g. only white was found)
            </returns>
        </member>
        <member name="T:ZXing.Common.Detector.WhiteRectangleDetector">
            <summary>
            Detects a candidate barcode-like rectangular region within an image. It
            starts around the center of the image, increases the size of the candidate
            region until it finds a white rectangular region. By keeping track of the
            last black points it encountered, it determines the corners of the barcode.
            </summary>
            <author>David Olivier</author>
        </member>
        <member name="M:ZXing.Common.Detector.WhiteRectangleDetector.Create(ZXing.Common.BitMatrix)">
            <summary>
            Creates a WhiteRectangleDetector instance
            </summary>
            <param name="image">The image.</param>
            <returns>null, if image is too small, otherwise a WhiteRectangleDetector instance</returns>
        </member>
        <member name="M:ZXing.Common.Detector.WhiteRectangleDetector.Create(ZXing.Common.BitMatrix,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a WhiteRectangleDetector instance
            </summary>
            <param name="image">barcode image to find a rectangle in</param>
            <param name="initSize">initial size of search area around center</param>
            <param name="x">x position of search center</param>
            <param name="y">y position of search center</param>
            <returns>
            null, if image is too small, otherwise a WhiteRectangleDetector instance
            </returns>
        </member>
        <member name="M:ZXing.Common.Detector.WhiteRectangleDetector.#ctor(ZXing.Common.BitMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Common.Detector.WhiteRectangleDetector"/> class.
            </summary>
            <param name="image">The image.</param>
            <exception cref="T:System.ArgumentException">if image is too small</exception>
        </member>
        <member name="M:ZXing.Common.Detector.WhiteRectangleDetector.#ctor(ZXing.Common.BitMatrix,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Common.Detector.WhiteRectangleDetector"/> class.
            </summary>
            <param name="image">The image.</param>
            <param name="initSize">Size of the init.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:ZXing.Common.Detector.WhiteRectangleDetector.detect">
            <summary>
            Detects a candidate barcode-like rectangular region within an image. It
            starts around the center of the image, increases the size of the candidate
            region until it finds a white rectangular region.
            </summary>
            <returns><see cref="T:ZXing.ResultPoint" />[] describing the corners of the rectangular
            region. The first and last points are opposed on the diagonal, as
            are the second and third. The first point will be the topmost
            point and the last, the bottommost. The second point will be
            leftmost and the third, the rightmost</returns>
        </member>
        <member name="M:ZXing.Common.Detector.WhiteRectangleDetector.centerEdges(ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint)">
            <summary>
            recenters the points of a constant distance towards the center
            </summary>
            <param name="y">bottom most point</param>
            <param name="z">left most point</param>
            <param name="x">right most point</param>
            <param name="t">top most point</param>
            <returns><see cref="T:ZXing.ResultPoint"/>[] describing the corners of the rectangular
            region. The first and last points are opposed on the diagonal, as
            are the second and third. The first point will be the topmost
            point and the last, the bottommost. The second point will be
            leftmost and the third, the rightmost</returns>
        </member>
        <member name="M:ZXing.Common.Detector.WhiteRectangleDetector.containsBlackPoint(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Determines whether a segment contains a black point
            </summary>
            <param name="a">min value of the scanned coordinate</param>
            <param name="b">max value of the scanned coordinate</param>
            <param name="fixed">value of fixed coordinate</param>
            <param name="horizontal">set to true if scan must be horizontal, false if vertical</param>
            <returns>
              true if a black point has been found, else false.
            </returns>
        </member>
        <member name="T:ZXing.Common.ECI">
            <summary>
            Superclass of classes encapsulating types ECIs, according to "Extended Channel Interpretations"
            5.3 of ISO 18004.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:ZXing.Common.ECI.Value">
            <summary>
            the ECI value
            </summary>
        </member>
        <member name="M:ZXing.Common.ECI.getECIByValue(System.Int32)">
            <param name="val">ECI value</param>
            <returns><see cref="T:ZXing.Common.ECI"/> representing ECI of given value, or null if it is legal but unsupported</returns>
            <throws>ArgumentException if ECI value is invalid </throws>
        </member>
        <member name="T:ZXing.Common.EncodingOptions">
            <summary>
            Defines an container for encoder options
            </summary>
        </member>
        <member name="P:ZXing.Common.EncodingOptions.Hints">
            <summary>
            Gets the data container for all options
            </summary>
        </member>
        <member name="P:ZXing.Common.EncodingOptions.Height">
            <summary>
            Specifies the height of the barcode image
            </summary>
        </member>
        <member name="P:ZXing.Common.EncodingOptions.Width">
            <summary>
            Specifies the width of the barcode image
            </summary>
        </member>
        <member name="P:ZXing.Common.EncodingOptions.PureBarcode">
            <summary>
            Don't put the content string into the output image.
            </summary>
        </member>
        <member name="P:ZXing.Common.EncodingOptions.Margin">
            <summary>
            Specifies margin, in pixels, to use when generating the barcode. The meaning can vary
            by format; for example it controls margin before and after the barcode horizontally for
            most 1D formats.
            </summary>
        </member>
        <member name="M:ZXing.Common.EncodingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Common.EncodingOptions"/> class.
            </summary>
        </member>
        <member name="T:ZXing.Common.GlobalHistogramBinarizer">
            <summary> This Binarizer implementation uses the old ZXing global histogram approach. It is suitable
            for low-end mobile devices which don't have enough CPU or memory to use a local thresholding
            algorithm. However, because it picks a global black point, it cannot handle difficult shadows
            and gradients.
            
            Faster mobile devices and all desktop applications should probably use HybridBinarizer instead.
            
            <author>dswitkin@google.com (Daniel Switkin)</author>
            <author>Sean Owen</author>
            </summary>
        </member>
        <member name="M:ZXing.Common.GlobalHistogramBinarizer.#ctor(ZXing.LuminanceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Common.GlobalHistogramBinarizer"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:ZXing.Common.GlobalHistogramBinarizer.getBlackRow(System.Int32,ZXing.Common.BitArray)">
            <summary>
            Applies simple sharpening to the row data to improve performance of the 1D Readers.
            </summary>
            <param name="y"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:ZXing.Common.GlobalHistogramBinarizer.BlackMatrix">
            <summary>
            Does not sharpen the data, as this call is intended to only be used by 2D Readers.
            </summary>
        </member>
        <member name="M:ZXing.Common.GlobalHistogramBinarizer.createBinarizer(ZXing.LuminanceSource)">
            <summary>
            Creates a new object with the same type as this Binarizer implementation, but with pristine
            state. This is needed because Binarizer implementations may be stateful, e.g. keeping a cache
            of 1 bit data. See Effective Java for why we can't use Java's clone() method.
            </summary>
            <param name="source">The LuminanceSource this Binarizer will operate on.</param>
            <returns>
            A new concrete Binarizer implementation object.
            </returns>
        </member>
        <member name="T:ZXing.Common.GridSampler">
            <summary> Implementations of this class can, given locations of finder patterns for a QR code in an
            image, sample the right points in the image to reconstruct the QR code, accounting for
            perspective distortion. It is abstracted since it is relatively expensive and should be allowed
            to take advantage of platform-specific optimized implementations, like Sun's Java Advanced
            Imaging library, but which may not be available in other environments such as J2ME, and vice
            versa.
            
            The implementation used can be controlled by calling {@link #setGridSampler(GridSampler)}
            with an instance of a class which implements this interface.
            </summary>
            <author> Sean Owen</author>
        </member>
        <member name="P:ZXing.Common.GridSampler.Instance">
            <returns> the current implementation of <see cref="T:ZXing.Common.GridSampler"/>
            </returns>
        </member>
        <member name="M:ZXing.Common.GridSampler.setGridSampler(ZXing.Common.GridSampler)">
            <summary> Sets the implementation of <see cref="T:ZXing.Common.GridSampler"/> used by the library. One global
            instance is stored, which may sound problematic. But, the implementation provided
            ought to be appropriate for the entire platform, and all uses of this library
            in the whole lifetime of the JVM. For instance, an Android activity can swap in
            an implementation that takes advantage of native platform libraries.
            </summary>
            <param name="newGridSampler">The platform-specific object to install.</param>
        </member>
        <member name="M:ZXing.Common.GridSampler.sampleGrid(ZXing.Common.BitMatrix,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
              <p>Samples an image for a square matrix of bits of the given dimension. This is used to extract
            the black/white modules of a 2D barcode like a QR Code found in an image. Because this barcode
            may be rotated or perspective-distorted, the caller supplies four points in the source image
            that define known points in the barcode, so that the image may be sampled appropriately.</p>
              <p>The last eight "from" parameters are four X/Y coordinate pairs of locations of points in
            the image that define some significant points in the image to be sample. For example,
            these may be the location of finder pattern in a QR Code.</p>
              <p>The first eight "to" parameters are four X/Y coordinate pairs measured in the destination
            <see cref="T:ZXing.Common.BitMatrix"/>, from the top left, where the known points in the image given by the "from"
            parameters map to.</p>
              <p>These 16 parameters define the transformation needed to sample the image.</p>
            </summary>
            <param name="image">image to sample</param>
            <param name="dimensionX">The dimension X.</param>
            <param name="dimensionY">The dimension Y.</param>
            <param name="p1ToX">The p1 preimage X.</param>
            <param name="p1ToY">The p1 preimage  Y.</param>
            <param name="p2ToX">The p2 preimage  X.</param>
            <param name="p2ToY">The p2 preimage  Y.</param>
            <param name="p3ToX">The p3 preimage  X.</param>
            <param name="p3ToY">The p3 preimage  Y.</param>
            <param name="p4ToX">The p4 preimage  X.</param>
            <param name="p4ToY">The p4 preimage  Y.</param>
            <param name="p1FromX">The p1 image X.</param>
            <param name="p1FromY">The p1 image Y.</param>
            <param name="p2FromX">The p2 image X.</param>
            <param name="p2FromY">The p2 image Y.</param>
            <param name="p3FromX">The p3 image X.</param>
            <param name="p3FromY">The p3 image Y.</param>
            <param name="p4FromX">The p4 image X.</param>
            <param name="p4FromY">The p4 image Y.</param>
            <returns>
            <see cref="T:ZXing.Common.BitMatrix"/> representing a grid of points sampled from the image within a region
            defined by the "from" parameters
            </returns>
            <throws>  ReaderException if image can't be sampled, for example, if the transformation defined </throws>
        </member>
        <member name="M:ZXing.Common.GridSampler.sampleGrid(ZXing.Common.BitMatrix,System.Int32,System.Int32,ZXing.Common.PerspectiveTransform)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="dimensionX"></param>
            <param name="dimensionY"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Common.GridSampler.checkAndNudgePoints(ZXing.Common.BitMatrix,System.Single[])">
            <summary> <p>Checks a set of points that have been transformed to sample points on an image against
            the image's dimensions to see if the point are even within the image.</p>
            
            <p>This method will actually "nudge" the endpoints back onto the image if they are found to be
            barely (less than 1 pixel) off the image. This accounts for imperfect detection of finder
            patterns in an image where the QR Code runs all the way to the image border.</p>
            
            <p>For efficiency, the method will check points from either end of the line until one is found
            to be within the image. Because the set of points are assumed to be linear, this is valid.</p>
            
            </summary>
            <param name="image">image into which the points should map
            </param>
            <param name="points">actual points in x1,y1,...,xn,yn form
            </param>
        </member>
        <member name="T:ZXing.Common.HybridBinarizer">
            <summary> This class implements a local thresholding algorithm, which while slower than the
            GlobalHistogramBinarizer, is fairly efficient for what it does. It is designed for
            high frequency images of barcodes with black data on white backgrounds. For this application,
            it does a much better job than a global blackpoint with severe shadows and gradients.
            However it tends to produce artifacts on lower frequency images and is therefore not
            a good general purpose binarizer for uses outside ZXing.
            
            This class extends GlobalHistogramBinarizer, using the older histogram approach for 1D readers,
            and the newer local approach for 2D readers. 1D decoding using a per-row histogram is already
            inherently local, and only fails for horizontal gradients. We can revisit that problem later,
            but for now it was not a win to use local blocks for 1D.
            
            This Binarizer is the default for the unit tests and the recommended class for library users.
            <author>dswitkin@google.com (Daniel Switkin)</author>
            </summary>
        </member>
        <member name="P:ZXing.Common.HybridBinarizer.BlackMatrix">
            <summary>
            gives the black matrix
            </summary>
        </member>
        <member name="M:ZXing.Common.HybridBinarizer.#ctor(ZXing.LuminanceSource)">
            <summary>
            initializing constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:ZXing.Common.HybridBinarizer.createBinarizer(ZXing.LuminanceSource)">
            <summary>
            creates a new instance
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Common.HybridBinarizer.binarizeEntireImage">
            <summary>
            Calculates the final BitMatrix once for all requests. This could be called once from the
            constructor instead, but there are some advantages to doing it lazily, such as making
            profiling easier, and not doing heavy lifting when callers don't expect it.
            </summary>
        </member>
        <member name="M:ZXing.Common.HybridBinarizer.calculateThresholdForBlock(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[][],ZXing.Common.BitMatrix)">
            <summary>
            For each 8x8 block in the image, calculate the average black point using a 5x5 grid
            of the blocks around it. Also handles the corner cases (fractional blocks are computed based
            on the last 8 pixels in the row/column which are also used in the previous block).
            </summary>
            <param name="luminances">The luminances.</param>
            <param name="subWidth">Width of the sub.</param>
            <param name="subHeight">Height of the sub.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="blackPoints">The black points.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:ZXing.Common.HybridBinarizer.thresholdBlock(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,ZXing.Common.BitMatrix)">
            <summary>
            Applies a single threshold to an 8x8 block of pixels.
            </summary>
            <param name="luminances">The luminances.</param>
            <param name="xoffset">The xoffset.</param>
            <param name="yoffset">The yoffset.</param>
            <param name="threshold">The threshold.</param>
            <param name="stride">The stride.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:ZXing.Common.HybridBinarizer.calculateBlackPoints(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates a single black point for each 8x8 block of pixels and saves it away.
            See the following thread for a discussion of this algorithm:
            http://groups.google.com/group/zxing/browse_thread/thread/d06efa2c35a7ddc0
            </summary>
            <param name="luminances">The luminances.</param>
            <param name="subWidth">Width of the sub.</param>
            <param name="subHeight">Height of the sub.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Common.PerspectiveTransform">
            <summary> <p>This class implements a perspective transform in two dimensions. Given four source and four
            destination points, it will compute the transformation implied between them. The code is based
            directly upon section 3.4.2 of George Wolberg's "Digital Image Warping"; see pages 54-56.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.Common.PerspectiveTransform.quadrilateralToQuadrilateral(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <param name="x0p"></param>
            <param name="y0p"></param>
            <param name="x1p"></param>
            <param name="y1p"></param>
            <param name="x2p"></param>
            <param name="y2p"></param>
            <param name="x3p"></param>
            <param name="y3p"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Common.PerspectiveTransform.transformPoints(System.Single[])">
            <summary>
            
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:ZXing.Common.PerspectiveTransform.transformPoints(System.Single[],System.Single[])">
            <summary>Convenience method, not optimized for performance. </summary>
        </member>
        <member name="M:ZXing.Common.PerspectiveTransform.squareToQuadrilateral(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Common.PerspectiveTransform.quadrilateralToSquare(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Common.ReedSolomon.GenericGF">
            <summary>
              <p>This class contains utility methods for performing mathematical operations over
            the Galois Fields. Operations use a given primitive polynomial in calculations.</p>
              <p>Throughout this package, elements of the GF are represented as an {@code int}
            for convenience and speed (but at the cost of memory).
              </p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.GenericGF.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a representation of GF(size) using the given primitive polynomial.
            </summary>
            <param name="primitive">irreducible polynomial whose coefficients are represented by
            *  the bits of an int, where the least-significant bit represents the constant
            *  coefficient</param>
            <param name="size">the size of the field</param>
            <param name="genBase">the factor b in the generator polynomial can be 0- or 1-based
            *  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).
            *  In most cases it should be 1, but for QR code it is 0.</param>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.GenericGF.buildMonomial(System.Int32,System.Int32)">
            <summary>
            Builds the monomial.
            </summary>
            <param name="degree">The degree.</param>
            <param name="coefficient">The coefficient.</param>
            <returns>the monomial representing coefficient * x^degree</returns>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.GenericGF.addOrSubtract(System.Int32,System.Int32)">
            <summary>
            Implements both addition and subtraction -- they are the same in GF(size).
            </summary>
            <returns>sum/difference of a and b</returns>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.GenericGF.exp(System.Int32)">
            <summary>
            Exps the specified a.
            </summary>
            <returns>2 to the power of a in GF(size)</returns>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.GenericGF.log(System.Int32)">
            <summary>
            Logs the specified a.
            </summary>
            <param name="a">A.</param>
            <returns>base 2 log of a in GF(size)</returns>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.GenericGF.inverse(System.Int32)">
            <summary>
            Inverses the specified a.
            </summary>
            <returns>multiplicative inverse of a</returns>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.GenericGF.multiply(System.Int32,System.Int32)">
            <summary>
            Multiplies the specified a with b.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>product of a and b in GF(size)</returns>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.GenericGF.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.GenericGF.GeneratorBase">
            <summary>
            Gets the generator base.
            </summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.GenericGF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:ZXing.Common.ReedSolomon.GenericGFPoly">
            <summary>
            <p>Represents a polynomial whose coefficients are elements of a GF.
            Instances of this class are immutable.</p>
            <p>Much credit is due to William Rucklidge since portions of this code are an indirect
            port of his C++ Reed-Solomon implementation.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.GenericGFPoly.#ctor(ZXing.Common.ReedSolomon.GenericGF,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Common.ReedSolomon.GenericGFPoly"/> class.
            </summary>
            <param name="field">the {@link GenericGF} instance representing the field to use
            to perform computations</param>
            <param name="coefficients">coefficients as ints representing elements of GF(size), arranged
            from most significant (highest-power term) coefficient to least significant</param>
            <exception cref="T:System.ArgumentException">if argument is null or empty,
            or if leading coefficient is 0 and this is not a
            constant polynomial (that is, it is not the monomial "0")</exception>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.GenericGFPoly.Degree">
            <summary>
            degree of this polynomial
            </summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.GenericGFPoly.isZero">
            <summary>
            Gets a value indicating whether this <see cref="T:ZXing.Common.ReedSolomon.GenericGFPoly"/> is zero.
            </summary>
            <value>true iff this polynomial is the monomial "0"</value>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.GenericGFPoly.getCoefficient(System.Int32)">
            <summary>
            coefficient of x^degree term in this polynomial
            </summary>
            <param name="degree">The degree.</param>
            <returns>coefficient of x^degree term in this polynomial</returns>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.GenericGFPoly.evaluateAt(System.Int32)">
            <summary>
            evaluation of this polynomial at a given point
            </summary>
            <param name="a">A.</param>
            <returns>evaluation of this polynomial at a given point</returns>
        </member>
        <member name="T:ZXing.Common.ReedSolomon.ReedSolomonDecoder">
            <summary> <p>Implements Reed-Solomon decoding, as the name implies.</p>
            
            <p>The algorithm will not be explained here, but the following references were helpful
            in creating this implementation:</p>
            
            <ul>
            <li>Bruce Maggs.
            <a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/project/pscico-guyb/realworld/www/rs_decode.ps">
            "Decoding Reed-Solomon Codes"</a> (see discussion of Forney's Formula)</li>
            <li>J.I. Hall. <a href="www.mth.msu.edu/~jhall/classes/codenotes/GRS.pdf">
            "Chapter 5. Generalized Reed-Solomon Codes"</a>
            (see discussion of Euclidean algorithm)</li>
            </ul>
            
            <p>Much credit is due to William Rucklidge since portions of this code are an indirect
            port of his C++ Reed-Solomon implementation.</p>
            
            </summary>
            <author>Sean Owen</author>
            <author>William Rucklidge</author>
            <author>sanfordsquires</author>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.ReedSolomonDecoder.decode(System.Int32[],System.Int32)">
            <summary>
              <p>Decodes given set of received codewords, which include both data and error-correction
            codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,
            in the input.</p>
            </summary>
            <param name="received">data and error-correction codewords</param>
            <param name="twoS">number of error-correction codewords available</param>
            <returns>false: decoding fails</returns>
        </member>
        <member name="T:ZXing.Common.ReedSolomon.ReedSolomonEncoder">
            <summary>
            Implements Reed-Solomon encoding, as the name implies.
            </summary>
            <author>Sean Owen</author>
            <author>William Rucklidge</author>
        </member>
        <member name="T:ZXing.Common.StringUtils">
            <summary>
            Common string-related functions.
            </summary>
            <author>Sean Owen</author>
            <author>Alex Dupre</author>
        </member>
        <member name="F:ZXing.Common.StringUtils.SHIFT_JIS">
            <summary>
            SJIS
            </summary>
        </member>
        <member name="F:ZXing.Common.StringUtils.GB2312">
            <summary>
            GB2312
            </summary>
        </member>
        <member name="M:ZXing.Common.StringUtils.guessEncoding(System.Byte[],System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Guesses the encoding.
            </summary>
            <param name="bytes">bytes encoding a string, whose encoding should be guessed</param>
            <param name="hints">decode hints if applicable</param>
            <returns>name of guessed encoding; at the moment will only guess one of:
            {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform
            default encoding if none of these can possibly be correct</returns>
        </member>
        <member name="T:ZXing.Datamatrix.DataMatrixReader">
             <summary>
             This implementation can detect and decode Data Matrix codes in an image.
            
             <author>bbrown@google.com (Brian Brown)</author>
             </summary>
        </member>
        <member name="M:ZXing.Datamatrix.DataMatrixReader.decode(ZXing.BinaryBitmap)">
            <summary>
            Locates and decodes a Data Matrix code in an image.
            </summary>
            <param name="image"></param>
            <returns>a String representing the content encoded by the Data Matrix code</returns>
        </member>
        <member name="M:ZXing.Datamatrix.DataMatrixReader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Locates and decodes a Data Matrix code in an image.
            </summary>
            <param name="image"></param>
            <param name="hints"></param>
            <returns>a String representing the content encoded by the Data Matrix code</returns>
        </member>
        <member name="M:ZXing.Datamatrix.DataMatrixReader.reset">
            <summary>
            does nothing here
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.DataMatrixReader.extractPureBits(ZXing.Common.BitMatrix)">
             <summary>
             This method detects a code in a "pure" image -- that is, pure monochrome image
             which contains only an unrotated, unskewed, image of a code, with some white border
             around it. This is a specialized method that works exceptionally fast in this special
             case.
            
             <seealso cref="M:ZXing.QrCode.QRCodeReader.extractPureBits(ZXing.Common.BitMatrix)" />
             </summary>
        </member>
        <member name="T:ZXing.Datamatrix.DataMatrixWriter">
            <summary>
            This object renders a Data Matrix code as a BitMatrix 2D array of greyscale values.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
            <author>Guillaume Le Biller Added to zxing lib.</author>
        </member>
        <member name="M:ZXing.Datamatrix.DataMatrixWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32)">
            <summary>
            encodes the content to a BitMatrix
            </summary>
            <param name="contents"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Datamatrix.DataMatrixWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            encodes the content to a BitMatrix
            </summary>
            <param name="contents"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Datamatrix.DataMatrixWriter.encodeLowLevel(ZXing.Datamatrix.Encoder.DefaultPlacement,ZXing.Datamatrix.Encoder.SymbolInfo)">
            <summary>
            Encode the given symbol info to a bit matrix.
            </summary>
            <param name="placement">The DataMatrix placement.</param>
            <param name="symbolInfo">The symbol info to encode.</param>
            <returns>The bit matrix generated.</returns>
        </member>
        <member name="M:ZXing.Datamatrix.DataMatrixWriter.convertByteMatrixToBitMatrix(ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Convert the ByteMatrix to BitMatrix.
            </summary>
            <param name="matrix">The input matrix.</param>
            <returns>The output matrix.</returns>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.BitMatrixParser">
            <summary>
            <author>bbrown@google.com (Brian Brown)</author>
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.BitMatrixParser.#ctor(ZXing.Common.BitMatrix)">
            <summary>
            <param name="bitMatrix"><see cref="T:ZXing.Common.BitMatrix" />to parse</param>
            <exception cref="T:ZXing.FormatException">if dimension is &lt; 8 or &gt; 144 or not 0 mod 2</exception>
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.BitMatrixParser.readVersion(ZXing.Common.BitMatrix)">
             <summary>
             <p>Creates the version object based on the dimension of the original bit matrix from 
             the datamatrix code.</p>
            
             <p>See ISO 16022:2006 Table 7 - ECC 200 symbol attributes</p>
             
             <param name="bitMatrix">Original <see cref="T:ZXing.Common.BitMatrix" />including alignment patterns</param>
             <returns><see cref="P:ZXing.Datamatrix.Internal.BitMatrixParser.Version" />encapsulating the Data Matrix Code's "version"</returns>
             <exception cref="T:ZXing.FormatException">if the dimensions of the mapping matrix are not valid</exception>
             Data Matrix dimensions.
             </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.BitMatrixParser.readCodewords">
             <summary>
             <p>Reads the bits in the <see cref="T:ZXing.Common.BitMatrix" />representing the mapping matrix (No alignment patterns)
             in the correct order in order to reconstitute the codewords bytes contained within the
             Data Matrix Code.</p>
            
             <returns>bytes encoded within the Data Matrix Code</returns>
             <exception cref="T:ZXing.FormatException">if the exact number of bytes expected is not read</exception>
             </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.BitMatrixParser.readModule(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <p>Reads a bit of the mapping matrix accounting for boundary wrapping.</p>
            
            <param name="row">Row to read in the mapping matrix</param>
            <param name="column">Column to read in the mapping matrix</param>
            <param name="numRows">Number of rows in the mapping matrix</param>
            <param name="numColumns">Number of columns in the mapping matrix</param>
            <returns>value of the given bit in the mapping matrix</returns>
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.BitMatrixParser.readUtah(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <p>Reads the 8 bits of the standard Utah-shaped pattern.</p>
            
            <p>See ISO 16022:2006, 5.8.1 Figure 6</p>
            
            <param name="row">Current row in the mapping matrix, anchored at the 8th bit (LSB) of the pattern</param>
            <param name="column">Current column in the mapping matrix, anchored at the 8th bit (LSB) of the pattern</param>
            <param name="numRows">Number of rows in the mapping matrix</param>
            <param name="numColumns">Number of columns in the mapping matrix</param>
            <returns>byte from the utah shape</returns>
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.BitMatrixParser.readCorner1(System.Int32,System.Int32)">
            <summary>
            <p>Reads the 8 bits of the special corner condition 1.</p>
            
            <p>See ISO 16022:2006, Figure F.3</p>
            
            <param name="numRows">Number of rows in the mapping matrix</param>
            <param name="numColumns">Number of columns in the mapping matrix</param>
            <returns>byte from the Corner condition 1</returns>
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.BitMatrixParser.readCorner2(System.Int32,System.Int32)">
            <summary>
            <p>Reads the 8 bits of the special corner condition 2.</p>
            
            <p>See ISO 16022:2006, Figure F.4</p>
            
            <param name="numRows">Number of rows in the mapping matrix</param>
            <param name="numColumns">Number of columns in the mapping matrix</param>
            <returns>byte from the Corner condition 2</returns>
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.BitMatrixParser.readCorner3(System.Int32,System.Int32)">
            <summary>
            <p>Reads the 8 bits of the special corner condition 3.</p>
            
            <p>See ISO 16022:2006, Figure F.5</p>
            
            <param name="numRows">Number of rows in the mapping matrix</param>
            <param name="numColumns">Number of columns in the mapping matrix</param>
            <returns>byte from the Corner condition 3</returns>
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.BitMatrixParser.readCorner4(System.Int32,System.Int32)">
            <summary>
            <p>Reads the 8 bits of the special corner condition 4.</p>
            
            <p>See ISO 16022:2006, Figure F.6</p>
            
            <param name="numRows">Number of rows in the mapping matrix</param>
            <param name="numColumns">Number of columns in the mapping matrix</param>
            <returns>byte from the Corner condition 4</returns>
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.BitMatrixParser.extractDataRegion(ZXing.Common.BitMatrix)">
            <summary>
            <p>Extracts the data region from a <see cref="T:ZXing.Common.BitMatrix" />that contains
            alignment patterns.</p>
            
            <param name="bitMatrix">Original <see cref="T:ZXing.Common.BitMatrix" />with alignment patterns</param>
            <returns>BitMatrix that has the alignment patterns removed</returns>
            </summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.DataBlock">
             <summary>
             <p>Encapsulates a block of data within a Data Matrix Code. Data Matrix Codes may split their data into
             multiple blocks, each of which is a unit of data and error-correction codewords. Each
             is represented by an instance of this class.</p>
            
             <author>bbrown@google.com (Brian Brown)</author>
             </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.DataBlock.getDataBlocks(System.Byte[],ZXing.Datamatrix.Internal.Version)">
             <summary>
             <p>When Data Matrix Codes use multiple data blocks, they actually interleave the bytes of each of them.
             That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This
             method will separate the data into original blocks.</p>
            
             <param name="rawCodewords">bytes as read directly from the Data Matrix Code</param>
             <param name="version">version of the Data Matrix Code</param>
             <returns>DataBlocks containing original bytes, "de-interleaved" from representation in the</returns>
                     Data Matrix Code
             </summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.DecodedBitStreamParser">
             <summary>
             <p>Data Matrix Codes can encode text as bits in one of several modes, and can use multiple modes
             in one Data Matrix Code. This class decodes the bits back into text.</p>
            
             <p>See ISO 16022:2006, 5.2.1 - 5.2.9.2</p>
            
             <author>bbrown@google.com (Brian Brown)</author>
             <author>Sean Owen</author>
             </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Internal.DecodedBitStreamParser.C40_BASIC_SET_CHARS">
            <summary>
            See ISO 16022:2006, Annex C Table C.1
            The C40 Basic Character Set (*'s used for placeholders for the shift values)
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Internal.DecodedBitStreamParser.TEXT_BASIC_SET_CHARS">
            <summary>
            See ISO 16022:2006, Annex C Table C.2
            The Text Basic Character Set (*'s used for placeholders for the shift values)
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.DecodedBitStreamParser.decodeAsciiSegment(ZXing.Common.BitSource,System.Text.StringBuilder,System.Text.StringBuilder,ZXing.Datamatrix.Internal.DecodedBitStreamParser.Mode@)">
            <summary>
            See ISO 16022:2006, 5.2.3 and Annex C, Table C.2
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.DecodedBitStreamParser.decodeC40Segment(ZXing.Common.BitSource,System.Text.StringBuilder)">
            <summary>
            See ISO 16022:2006, 5.2.5 and Annex C, Table C.1
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.DecodedBitStreamParser.decodeTextSegment(ZXing.Common.BitSource,System.Text.StringBuilder)">
            <summary>
            See ISO 16022:2006, 5.2.6 and Annex C, Table C.2
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.DecodedBitStreamParser.decodeAnsiX12Segment(ZXing.Common.BitSource,System.Text.StringBuilder)">
            <summary>
            See ISO 16022:2006, 5.2.7
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.DecodedBitStreamParser.decodeEdifactSegment(ZXing.Common.BitSource,System.Text.StringBuilder)">
            <summary>
            See ISO 16022:2006, 5.2.8 and Annex C Table C.3
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.DecodedBitStreamParser.decodeBase256Segment(ZXing.Common.BitSource,System.Text.StringBuilder,System.Collections.Generic.IList{System.Byte[]})">
            <summary>
            See ISO 16022:2006, 5.2.9 and Annex B, B.2
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.DecodedBitStreamParser.unrandomize255State(System.Int32,System.Int32)">
            <summary>
            See ISO 16022:2006, Annex B, B.2
            </summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Decoder">
             <summary>
             <p>The main class which implements Data Matrix Code decoding -- as opposed to locating and extracting
             the Data Matrix Code from an image.</p>
            
             <author>bbrown@google.com (Brian Brown)</author>
             </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Decoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Datamatrix.Internal.Decoder"/> class.
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Decoder.decode(System.Boolean[][])">
             <summary>
             <p>Convenience method that can decode a Data Matrix Code represented as a 2D array of booleans.
             "true" is taken to mean a black module.</p>
            
             <param name="image">booleans representing white/black Data Matrix Code modules</param>
             <returns>text and bytes encoded within the Data Matrix Code</returns>
             <exception cref="T:ZXing.FormatException">if the Data Matrix Code cannot be decoded</exception>
             </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Decoder.decode(ZXing.Common.BitMatrix)">
            <summary>
            <p>Decodes a Data Matrix Code represented as a <see cref="T:ZXing.Common.BitMatrix" />. A 1 or "true" is taken
            to mean a black module.</p>
            </summary>
            <param name="bits">booleans representing white/black Data Matrix Code modules</param>
            <returns>text and bytes encoded within the Data Matrix Code</returns>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Decoder.correctErrors(System.Byte[],System.Int32)">
             <summary>
             <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to
             correct the errors in-place using Reed-Solomon error correction.</p>
            
             <param name="codewordBytes">data and error correction codewords</param>
             <param name="numDataCodewords">number of codewords that are data bytes</param>
             </summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Version">
             <summary>
             The Version object encapsulates attributes about a particular
             size Data Matrix Code.
            
             <author>bbrown@google.com (Brian Brown)</author>
             </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Version.getVersionNumber">
            <summary>
            returns the version numer
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Version.getSymbolSizeRows">
            <summary>
            returns the symbol size rows
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Version.getSymbolSizeColumns">
            <summary>
            returns the symbols size columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Version.getDataRegionSizeRows">
            <summary>
            retursn the data region size rows
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Version.getDataRegionSizeColumns">
            <summary>
            returns the data region size columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Version.getTotalCodewords">
            <summary>
            returns the total codewords count
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Version.getVersionForDimensions(System.Int32,System.Int32)">
             <summary>
             <p>Deduces version information from Data Matrix dimensions.</p>
            
             <param name="numRows">Number of rows in modules</param>
             <param name="numColumns">Number of columns in modules</param>
             <returns>Version for a Data Matrix Code of those dimensions</returns>
             <exception cref="T:ZXing.FormatException">if dimensions do correspond to a valid Data Matrix size</exception>
             </summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Version.ECBlocks">
            <summary>
            <p>Encapsulates a set of error-correction blocks in one symbol version. Most versions will
            use blocks of differing sizes within one version, so, this encapsulates the parameters for
            each set of blocks. It also holds the number of error-correction codewords per block since it
            will be the same across all blocks within one version.</p>
            </summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Version.ECB">
            <summary>
            <p>Encapsulates the parameters for one error-correction block in one symbol version.
            This includes the number of data codewords, and the number of times a block with these
            parameters is used consecutively in the Data Matrix code version's format.</p>
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Version.ToString">
            <summary>
            returns the version number as string
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Version.buildVersions">
            <summary>
            See ISO 16022:2006 5.5.1 Table 7
            </summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Detector">
            <summary>
            <p>Encapsulates logic that can detect a Data Matrix Code in an image, even if the Data Matrix Code
            is rotated or skewed, or partially obscured.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Detector.#ctor(ZXing.Common.BitMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Datamatrix.Internal.Detector"/> class.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Detector.detect">
            <summary>
            <p>Detects a Data Matrix Code in an image.</p>
            </summary>
            <returns><see cref="T:ZXing.Common.DetectorResult" />encapsulating results of detecting a Data Matrix Code or null</returns>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Detector.correctTopRightRectangular(ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint,System.Int32,System.Int32)">
            <summary>
            Calculates the position of the white top right module using the output of the rectangle detector
            for a rectangular matrix
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Detector.correctTopRight(ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint,System.Int32)">
            <summary>
            Calculates the position of the white top right module using the output of the rectangle detector
            for a square matrix
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Detector.increment(System.Collections.Generic.IDictionary{ZXing.ResultPoint,System.Int32},ZXing.ResultPoint)">
            <summary>
            Increments the Integer associated with a key by one.
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Detector.transitionsBetween(ZXing.ResultPoint,ZXing.ResultPoint)">
            <summary>
            Counts the number of black/white transitions between two points, using something like Bresenham's algorithm.
            </summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Detector.ResultPointsAndTransitions">
            <summary>
            Simply encapsulates two points and a number of transitions between them.
            </summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Detector.ResultPointsAndTransitionsComparator">
            <summary>
            Orders ResultPointsAndTransitions by number of transitions, ascending.
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.C40Encoder.handleEOD(ZXing.Datamatrix.Encoder.EncoderContext,System.Text.StringBuilder)">
            <summary>
            Handle "end of data" situations
            </summary>
            <param name="context">the encoder context</param>
            <param name="buffer">the buffer with the remaining encoded characters</param>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.DefaultPlacement">
            <summary>
            Symbol Character Placement Program. Adapted from Annex M.1 in ISO/IEC 16022:2000(E).
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.DefaultPlacement.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Main constructor
            </summary>
            <param name="codewords">the codewords to place</param>
            <param name="numcols">the number of columns</param>
            <param name="numrows">the number of rows</param>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.DefaultPlacement.utah(System.Int32,System.Int32,System.Int32)">
            <summary>
            Places the 8 bits of a utah-shaped symbol character in ECC200.
            </summary>
            <param name="row">The row.</param>
            <param name="col">The col.</param>
            <param name="pos">character position</param>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.EdifactEncoder.handleEOD(ZXing.Datamatrix.Encoder.EncoderContext,System.Text.StringBuilder)">
            <summary>
            Handle "end of data" situations
            </summary>
            <param name="context">the encoder context</param>
            <param name="buffer">the buffer with the remaining encoded characters</param>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.Encodation">
            <summary>
            Enumeration for encodation types
            </summary>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.ErrorCorrection">
            <summary>
            Error Correction Code for ECC200.
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.ErrorCorrection.FACTOR_SETS">
            <summary>
            Lookup table which factors to use for which number of error correction codewords.
            See FACTORS.
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.ErrorCorrection.FACTORS">
            <summary>
            Precomputed polynomial factors for ECC 200.
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.ErrorCorrection.encodeECC200(System.String,ZXing.Datamatrix.Encoder.SymbolInfo)">
            <summary>
            Creates the ECC200 error correction for an encoded message.
            </summary>
            <param name="codewords">The codewords.</param>
            <param name="symbolInfo">information about the symbol to be encoded</param>
            <returns>the codewords with interleaved error correction.</returns>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.HighLevelEncoder">
            <summary>
            DataMatrix ECC 200 data encoder following the algorithm described in ISO/IEC 16022:200(E) in
            annex S.
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.PAD">
            <summary>
            Padding character
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.LATCH_TO_C40">
            <summary>
            mode latch to C40 encodation mode
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.LATCH_TO_BASE256">
            <summary>
            mode latch to Base 256 encodation mode
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.FNC1">
            <summary>
            FNC1 Codeword
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.STRUCTURED_APPEND">
            <summary>
            Structured Append Codeword
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.READER_PROGRAMMING">
            <summary>
            Reader Programming
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.UPPER_SHIFT">
            <summary>
            Upper Shift
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.MACRO_05">
            <summary>
            05 Macro
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.MACRO_06">
            <summary>
            06 Macro
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.LATCH_TO_ANSIX12">
            <summary>
            mode latch to ANSI X.12 encodation mode
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.LATCH_TO_TEXT">
            <summary>
            mode latch to Text encodation mode
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.LATCH_TO_EDIFACT">
            <summary>
            mode latch to EDIFACT encodation mode
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.ECI">
            <summary>
            ECI character (Extended Channel Interpretation)
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.C40_UNLATCH">
            <summary>
            Unlatch from C40 encodation
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.X12_UNLATCH">
            <summary>
            Unlatch from X12 encodation
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.MACRO_05_HEADER">
            <summary>
            05 Macro header
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.MACRO_06_HEADER">
            <summary>
            06 Macro header
            </summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.HighLevelEncoder.MACRO_TRAILER">
            <summary>
            Macro trailer
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.HighLevelEncoder.encodeHighLevel(System.String)">
            <summary>
            Performs message encoding of a DataMatrix message using the algorithm described in annex P
            of ISO/IEC 16022:2000(E).
            </summary>
            <param name="msg">the message</param>
            <returns>the encoded message (the char values range from 0 to 255)</returns>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.HighLevelEncoder.encodeHighLevel(System.String,ZXing.Datamatrix.Encoder.SymbolShapeHint,ZXing.Dimension,ZXing.Dimension,System.Int32)">
            <summary>
            Performs message encoding of a DataMatrix message using the algorithm described in annex P
            of ISO/IEC 16022:2000(E).
            </summary>
            <param name="msg">the message</param>
            <param name="shape">requested shape. May be {@code SymbolShapeHint.FORCE_NONE},{@code SymbolShapeHint.FORCE_SQUARE} or {@code SymbolShapeHint.FORCE_RECTANGLE}.</param>
            <param name="minSize">the minimum symbol size constraint or null for no constraint</param>
            <param name="maxSize">the maximum symbol size constraint or null for no constraint</param>
            <param name="defaultEncodation">encoding mode to start with</param>
            <returns>the encoded message (the char values range from 0 to 255)</returns>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.HighLevelEncoder.determineConsecutiveDigitCount(System.String,System.Int32)">
            <summary>
            Determines the number of consecutive characters that are encodable using numeric compaction.
            </summary>
            <param name="msg">the message</param>
            <param name="startpos">the start position within the message</param>
            <returns>the requested character count</returns>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.SymbolInfo">
            <summary>
            Symbol info table for DataMatrix.
            </summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.SymbolInfo.overrideSymbolSet(ZXing.Datamatrix.Encoder.SymbolInfo[])">
             Overrides the symbol info set used by this class. Used for testing purposes.
            
             @param override the symbol info set to use
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.SymbolShapeHint">
            <summary>
            Enumeration for DataMatrix symbol shape hint. It can be used to force square or rectangular
            symbols.   
            </summary>
        </member>
        <member name="T:ZXing.Datamatrix.DatamatrixEncodingOptions">
            <summary>
            The class holds the available options for the DatamatrixWriter
            </summary>
        </member>
        <member name="P:ZXing.Datamatrix.DatamatrixEncodingOptions.SymbolShape">
            <summary>
            Specifies the matrix shape for Data Matrix
            </summary>
        </member>
        <member name="P:ZXing.Datamatrix.DatamatrixEncodingOptions.MinSize">
            <summary>
            Specifies a minimum barcode size
            </summary>
        </member>
        <member name="P:ZXing.Datamatrix.DatamatrixEncodingOptions.MaxSize">
            <summary>
            Specifies a maximum barcode size
            </summary>
        </member>
        <member name="P:ZXing.Datamatrix.DatamatrixEncodingOptions.DefaultEncodation">
            <summary>
            Specifies the default encodation
            Make sure that the content fits into the encodation value, otherwise there will be an exception thrown.
            standard value: Encodation.ASCII
            </summary>
        </member>
        <member name="T:ZXing.DecodeHintType">
            <summary>
            Encapsulates a type of hint that a caller may pass to a barcode reader to help it
            more quickly or accurately decode it. It is up to implementations to decide what,
            if anything, to do with the information that is supplied.
            <seealso cref="M:ZXing.Reader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})" />
            </summary>
            <author>Sean Owen</author>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="F:ZXing.DecodeHintType.OTHER">
            <summary>
            Unspecified, application-specific hint. Maps to an unspecified <see cref="T:System.Object" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.PURE_BARCODE">
            <summary>
            Image is a pure monochrome image of a barcode. Doesn't matter what it maps to;
            use <see cref="T:System.Boolean" /> = true.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.POSSIBLE_FORMATS">
            <summary>
            Image is known to be of one of a few possible formats.
            Maps to a <see cref="T:System.Collections.ICollection" /> of <see cref="T:ZXing.BarcodeFormat" />s.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.TRY_HARDER">
            <summary>
            Spend more time to try to find a barcode; optimize for accuracy, not speed.
            Doesn't matter what it maps to; use <see cref="T:System.Boolean" /> = true.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.CHARACTER_SET">
            <summary>
            Specifies what character encoding to use when decoding, where applicable (type String)
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.ALLOWED_LENGTHS">
            <summary>
            Allowed lengths of encoded data -- reject anything else. Maps to an int[].
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.ASSUME_CODE_39_CHECK_DIGIT">
            <summary>
            Assume Code 39 codes employ a check digit. Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.NEED_RESULT_POINT_CALLBACK">
            <summary>
            The caller needs to be notified via callback when a possible <see cref="T:ZXing.ResultPoint" />
            is found. Maps to a <see cref="T:ZXing.ResultPointCallback" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.ASSUME_MSI_CHECK_DIGIT">
            <summary>
            Assume MSI codes employ a check digit. Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.USE_CODE_39_EXTENDED_MODE">
            <summary>
            if Code39 could be detected try to use extended mode for full ASCII character set
            Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.RELAXED_CODE_39_EXTENDED_MODE">
            <summary>
            Don't fail if a Code39 is detected but can't be decoded in extended mode.
            Return the raw Code39 result instead. Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.TRY_HARDER_WITHOUT_ROTATION">
            <summary>
            1D readers supporting rotation with TRY_HARDER enabled.
            But BarcodeReader class can do auto-rotating for 1D and 2D codes.
            Enabling that option prevents 1D readers doing double rotation.
            BarcodeReader enables that option automatically if "global" auto-rotation is enabled.
            Maps to <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.ASSUME_GS1">
            <summary>
            Assume the barcode is being processed as a GS1 barcode, and modify behavior as needed.
            For example this affects FNC1 handling for Code 128 (aka GS1-128). Doesn't matter what it maps to;
            use <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.RETURN_CODABAR_START_END">
            <summary>
            If true, return the start and end digits in a Codabar barcode instead of stripping them. They
            are alpha, whereas the rest are numeric. By default, they are stripped, but this causes them
            to not be. Doesn't matter what it maps to; use <see cref="T:System.Boolean" />.
            </summary>
        </member>
        <member name="F:ZXing.DecodeHintType.ALLOWED_EAN_EXTENSIONS">
            <summary>
            Allowed extension lengths for EAN or UPC barcodes. Other formats will ignore this.
            Maps to an int[] of the allowed extension lengths, for example [2], [5], or [2, 5].
            If it is optional to have an extension, do not set this hint. If this is set,
            and a UPC or EAN barcode is found but an extension is not, then no result will be returned
            at all.
            </summary>
        </member>
        <member name="T:ZXing.Dimension">
            <summary>
            Simply encapsulates a width and height.
            </summary>
        </member>
        <member name="M:ZXing.Dimension.#ctor(System.Int32,System.Int32)">
            <summary>
            initializing constructor
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:ZXing.Dimension.Width">
            <summary>
            the width
            </summary>
        </member>
        <member name="P:ZXing.Dimension.Height">
            <summary>
            the height
            </summary>
        </member>
        <member name="M:ZXing.Dimension.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Dimension.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.Dimension.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZXing.EncodeHintType">
            <summary>
            These are a set of hints that you may pass to Writers to specify their behavior.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="F:ZXing.EncodeHintType.WIDTH">
            <summary>
            Specifies the width of the barcode image
            type: <see cref="T:System.Int32" />
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.HEIGHT">
            <summary>
            Specifies the height of the barcode image
            type: <see cref="T:System.Int32" />
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.PURE_BARCODE">
            <summary>
            Don't put the content string into the output image.
            type: <see cref="T:System.Boolean" />
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.ERROR_CORRECTION">
            <summary>
            Specifies what degree of error correction to use, for example in QR Codes.
            Type depends on the encoder. For example for QR codes it's type
            <see cref="T:ZXing.QrCode.Internal.ErrorCorrectionLevel" />
            For Aztec it is of type <see cref="T:System.Int32" />, representing the minimal percentage of error correction words. 
            In all cases, it can also be a <see cref="T:System.String" /> representation of the desired value as well.
            Note: an Aztec symbol should have a minimum of 25% EC words.
            For PDF417 it is of type <see cref="T:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel"/> or <see cref="T:System.Int32" /> (between 0 and 8),
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.CHARACTER_SET">
            <summary>
            Specifies what character encoding to use where applicable.
            type: <see cref="T:System.String" />
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.MARGIN">
            <summary>
            Specifies margin, in pixels, to use when generating the barcode. The meaning can vary
            by format; for example it controls margin before and after the barcode horizontally for
            most 1D formats.
            type: <see cref="T:System.Int32" />, or <see cref="T:System.String" /> representation of the integer value
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.PDF417_COMPACT">
            <summary>
            Specifies whether to use compact mode for PDF417
            type: <see cref="T:System.Boolean" />, or "true" or "false"
            <see cref="T:System.String" /> value
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.PDF417_COMPACTION">
            <summary>
            Specifies what compaction mode to use for PDF417.
            type: <see cref="T:ZXing.PDF417.Internal.Compaction" /> or <see cref="T:System.String" /> value of one of its
            enum values
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.PDF417_DIMENSIONS">
            <summary>
            Specifies the minimum and maximum number of rows and columns for PDF417.
            type: <see cref="T:ZXing.PDF417.Internal.Dimensions" />
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.DISABLE_ECI">
            <summary>
            Don't append ECI segment.
            That is against the specification of QR Code but some
            readers have problems if the charset is switched from
            ISO-8859-1 (default) to UTF-8 with the necessary ECI segment.
            If you set the property to true you can use UTF-8 encoding
            and the ECI segment is omitted.
            type: <see cref="T:System.Boolean" />
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.DATA_MATRIX_SHAPE">
            <summary>
            Specifies the matrix shape for Data Matrix (type <see cref="T:ZXing.Datamatrix.Encoder.SymbolShapeHint"/>)
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.MIN_SIZE">
            <summary>
            Specifies a minimum barcode size (type <see cref="T:ZXing.Dimension"/>). Only applicable to Data Matrix now.
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.MAX_SIZE">
            <summary>
            Specifies a maximum barcode size (type <see cref="T:ZXing.Dimension"/>). Only applicable to Data Matrix now.
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.CODE128_FORCE_CODESET_B">
            <summary>
            if true, don't switch to codeset C for numbers
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.DATA_MATRIX_DEFAULT_ENCODATION">
            <summary>
            Specifies the default encodation for Data Matrix (type <see cref="T:ZXing.Datamatrix.Encoder.Encodation"/>)
            Make sure that the content fits into the encodation value, otherwise there will be an exception thrown.
            standard value: Encodation.ASCII
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.AZTEC_LAYERS">
            <summary>
            Specifies the required number of layers for an Aztec code.
            A negative number (-1, -2, -3, -4) specifies a compact Aztec code
            0 indicates to use the minimum number of layers (the default)
            A positive number (1, 2, .. 32) specifies a normal (non-compact) Aztec code
            type: <see cref="T:System.Int32" />, or <see cref="T:System.String" /> representation of the integer value
            </summary>
        </member>
        <member name="F:ZXing.EncodeHintType.QR_VERSION">
            <summary>
            Specifies the exact version of QR code to be encoded.
            (Type <see cref="T:System.Int32" />, or <see cref="T:System.String" /> representation of the integer value).
            </summary>
        </member>
        <member name="T:ZXing.FormatException">
            <summary>
            Thrown when a barcode was successfully detected, but some aspect of
            the content did not conform to the barcode's format rules. This could have
            been due to a mis-detection.
            <author>Sean Owen</author>
            </summary>
        </member>
        <member name="M:ZXing.FormatException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZXing.FormatException.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZXing.FormatException.#ctor(System.Exception)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZXing.FormatException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
        </member>
        <member name="T:ZXing.IBarcodeReader">
            <summary>
            Interface for a smart class to decode the barcode inside a bitmap object
            </summary>
            <summary>
            Interface for a smart class to decode the barcode inside a bitmap object
            </summary>
            <summary>
            Interface for a smart class to decode multiple barcodes inside a bitmap object
            </summary>
            <summary>
            Interface for a smart class to decode multiple barcodes inside a bitmap object
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeReader.Decode(System.Drawing.Bitmap)">
            <summary>
            Decodes the specified barcode bitmap.
            </summary>
            <param name="barcodeBitmap">The barcode bitmap.</param>
            <returns>the result data or null</returns>
        </member>
        <member name="E:ZXing.IBarcodeReader.ResultPointFound">
            <summary>
            event is executed when a result point was found
            </summary>
        </member>
        <member name="E:ZXing.IBarcodeReader.ResultFound">
            <summary>
            event is executed when a result was found via decode
            </summary>
        </member>
        <member name="P:ZXing.IBarcodeReader.Options">
            <summary>
            Specifies some options which influence the decoding process
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeReader.Decode(System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>
            Decodes the specified barcode bitmap which is given by a generic byte array with the order RGB24.
            </summary>
            <param name="rawRGB">The image as RGB24 array.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <returns>
            the result data or null
            </returns>
        </member>
        <member name="M:ZXing.IBarcodeReader.Decode(ZXing.LuminanceSource)">
            <summary>
            Tries to decode a barcode within an image which is given by a luminance source.
            That method gives a chance to prepare a luminance source completely before calling
            the time consuming decoding method. On the other hand there is a chance to create
            a luminance source which is independent from external resources (like Bitmap objects)
            and the decoding call can be made in a background thread.
            </summary>
            <param name="luminanceSource">The luminance source.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.IBarcodeReader.DecodeMultiple(System.Drawing.Bitmap)">
            <summary>
            Decodes the specified barcode bitmap.
            </summary>
            <param name="barcodeBitmap">The barcode bitmap.</param>
            <returns>the result data or null</returns>
        </member>
        <member name="M:ZXing.IBarcodeReader.DecodeMultiple(System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>
            Decodes the specified barcode bitmap which is given by a generic byte array with the order RGB24.
            </summary>
            <param name="rawRGB">The image as RGB24 array.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <returns>
            the result data or null
            </returns>
        </member>
        <member name="M:ZXing.IBarcodeReader.DecodeMultiple(ZXing.LuminanceSource)">
            <summary>
            Tries to decode barcodes within an image which is given by a luminance source.
            That method gives a chance to prepare a luminance source completely before calling
            the time consuming decoding method. On the other hand there is a chance to create
            a luminance source which is independent from external resources (like Bitmap objects)
            and the decoding call can be made in a background thread.
            </summary>
            <param name="luminanceSource">The luminance source.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.IBarcodeReader`1">
            <summary>
            Interface for a smart class to decode the barcode inside a bitmap object
            </summary>
            <summary>
            Interface for a smart class to decode multiple barcodes inside a bitmap object
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeReader`1.Decode(`0)">
            <summary>
            Decodes the specified barcode bitmap.
            </summary>
            <param name="barcodeBitmap">The barcode bitmap.</param>
            <returns>the result data or null</returns>
        </member>
        <member name="M:ZXing.IBarcodeReader`1.DecodeMultiple(`0)">
            <summary>
            Decodes the specified barcode bitmap.
            </summary>
            <param name="barcodeBitmap">The barcode bitmap.</param>
            <returns>the result data or null</returns>
        </member>
        <member name="T:ZXing.IBarcodeReaderGeneric">
            <summary>
            Interface for a smart class to decode the barcode inside a bitmap object
            </summary>
            <summary>
            Interface for a smart class to decode multiple barcodes inside a bitmap object
            </summary>
        </member>
        <member name="E:ZXing.IBarcodeReaderGeneric.ResultPointFound">
            <summary>
            event is executed when a result point was found
            </summary>
        </member>
        <member name="E:ZXing.IBarcodeReaderGeneric.ResultFound">
            <summary>
            event is executed when a result was found via decode
            </summary>
        </member>
        <member name="P:ZXing.IBarcodeReaderGeneric.Options">
            <summary>
            Specifies some options which influence the decoding process
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeReaderGeneric.Decode(System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>
            Decodes the specified barcode bitmap which is given by a generic byte array.
            </summary>
            <param name="rawRGB">The barcode bitmap.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <returns>
            the result data or null
            </returns>
        </member>
        <member name="M:ZXing.IBarcodeReaderGeneric.Decode(ZXing.LuminanceSource)">
            <summary>
            Tries to decode a barcode within an image which is given by a luminance source.
            That method gives a chance to prepare a luminance source completely before calling
            the time consuming decoding method. On the other hand there is a chance to create
            a luminance source which is independent from external resources (like Bitmap objects)
            and the decoding call can be made in a background thread.
            </summary>
            <param name="luminanceSource">The luminance source.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.IBarcodeReaderGeneric.DecodeMultiple(System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>
            Decodes the specified barcode bitmap which is given by a generic byte array with the order RGB24.
            </summary>
            <param name="rawRGB">The barcode bitmap.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <returns>
            the result data or null
            </returns>
        </member>
        <member name="M:ZXing.IBarcodeReaderGeneric.DecodeMultiple(ZXing.LuminanceSource)">
            <summary>
            Tries to decode barcodes within an image which is given by a luminance source.
            That method gives a chance to prepare a luminance source completely before calling
            the time consuming decoding method. On the other hand there is a chance to create
            a luminance source which is independent from external resources (like Bitmap objects)
            and the decoding call can be made in a background thread.
            </summary>
            <param name="luminanceSource">The luminance source.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.IBarcodeWriter">
            <summary>
            Interface for a smart class to encode some content into a barcode
            </summary>
            <summary>
            Interface for a smart class to encode some content into a barcode
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeWriter.Write(System.String)">
            <summary>
            Creates a visual representation of the contents
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeWriter.Write(ZXing.Common.BitMatrix)">
            <summary>
            Returns a rendered instance of the barcode which is given by a BitMatrix.
            </summary>
        </member>
        <member name="P:ZXing.IBarcodeWriter.Format">
            <summary>
            Get or sets the barcode format which should be generated
            (only suitable if MultiFormatWriter is used for property Encoder which is the default)
            </summary>
        </member>
        <member name="P:ZXing.IBarcodeWriter.Options">
            <summary>
            Gets or sets the options container for the encoding and renderer process.
            </summary>
        </member>
        <member name="P:ZXing.IBarcodeWriter.Encoder">
            <summary>
            Gets or sets the writer which encodes the content to a BitMatrix.
            If no value is set the MultiFormatWriter is used.
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeWriter.Encode(System.String)">
            <summary>
            Encodes the specified contents.
            </summary>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.IBarcodeWriterPixelData">
            <summary>
            Interface for a smart class to encode some content into a barcode
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeWriterPixelData.Write(System.String)">
            <summary>
            Creates a visual representation of the contents
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeWriterPixelData.Write(ZXing.Common.BitMatrix)">
            <summary>
            Returns a rendered instance of the barcode which is given by a BitMatrix.
            </summary>
        </member>
        <member name="T:ZXing.IBarcodeWriterSvg">
            <summary>
            Interface for a smart class to encode some content into a barcode
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeWriterSvg.Write(System.String)">
            <summary>
            Creates a visual representation of the contents
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeWriterSvg.Write(ZXing.Common.BitMatrix)">
            <summary>
            Returns a rendered instance of the barcode which is given by a BitMatrix.
            </summary>
        </member>
        <member name="T:ZXing.IBarcodeWriter`1">
            <summary>
            Interface for a smart class to encode some content into a barcode
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeWriter`1.Write(System.String)">
            <summary>
            Creates a visual representation of the contents
            </summary>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.IBarcodeWriter`1.Write(ZXing.Common.BitMatrix)">
            <summary>
            Returns a rendered instance of the barcode which is given by a BitMatrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.IBarcodeWriterGeneric">
            <summary>
            Interface for a smart class to encode some content into a barcode
            </summary>
        </member>
        <member name="P:ZXing.IBarcodeWriterGeneric.Format">
            <summary>
            Get or sets the barcode format which should be generated
            (only suitable if MultiFormatWriter is used for property Encoder which is the default)
            </summary>
        </member>
        <member name="P:ZXing.IBarcodeWriterGeneric.Options">
            <summary>
            Gets or sets the options container for the encoding and renderer process.
            </summary>
        </member>
        <member name="P:ZXing.IBarcodeWriterGeneric.Encoder">
            <summary>
            Gets or sets the writer which encodes the content to a BitMatrix.
            If no value is set the MultiFormatWriter is used.
            </summary>
        </member>
        <member name="M:ZXing.IBarcodeWriterGeneric.Encode(System.String)">
            <summary>
            Encodes the specified contents.
            </summary>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.IMB.IMBReader">
            <summary>
            implements an Intelligent Mail barcode
            <author>Rishabh Hatgadkar</author>
            </summary>
        </member>
        <member name="T:ZXing.InvertedLuminanceSource">
            <summary>
            A wrapper implementation of {@link LuminanceSource} which inverts the luminances it returns -- black becomes
            white and vice versa, and each value becomes (255-value).
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.InvertedLuminanceSource.#ctor(ZXing.LuminanceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.InvertedLuminanceSource"/> class.
            </summary>
            <param name="delegate">The @delegate.</param>
        </member>
        <member name="M:ZXing.InvertedLuminanceSource.getRow(System.Int32,System.Byte[])">
            <summary>
            Fetches one row of luminance data from the underlying platform's bitmap. Values range from
            0 (black) to 255 (white). Because Java does not have an unsigned byte type, callers will have
            to bitwise and with 0xff for each value. It is preferable for implementations of this method
            to only fetch this row rather than the whole image, since no 2D Readers may be installed and
            getMatrix() may never be called.
            </summary>
            <param name="y">The row to fetch, 0 &lt;= y &lt; Height.</param>
            <param name="row">An optional preallocated array. If null or too small, it will be ignored.
            Always use the returned object, and ignore the .length of the array.</param>
            <returns>
            An array containing the luminance data.
            </returns>
        </member>
        <member name="P:ZXing.InvertedLuminanceSource.Matrix">
            <summary>
            Fetches luminance data for the underlying bitmap. Values should be fetched using:
            int luminance = array[y * width + x] &amp; 0xff;
            </summary>
            <returns> A row-major 2D array of luminance values. Do not use result.length as it may be
            larger than width * height bytes on some platforms. Do not modify the contents
            of the result.
              </returns>
        </member>
        <member name="P:ZXing.InvertedLuminanceSource.CropSupported">
            <summary>
            </summary>
            <returns> Whether this subclass supports cropping.</returns>
        </member>
        <member name="M:ZXing.InvertedLuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new object with cropped image data. Implementations may keep a reference to the
            original data rather than a copy. Only callable if CropSupported is true.
            </summary>
            <param name="left">The left coordinate, 0 &lt;= left &lt; Width.</param>
            <param name="top">The top coordinate, 0 &lt;= top &lt;= Height.</param>
            <param name="width">The width of the rectangle to crop.</param>
            <param name="height">The height of the rectangle to crop.</param>
            <returns>
            A cropped version of this object.
            </returns>
        </member>
        <member name="P:ZXing.InvertedLuminanceSource.RotateSupported">
            <summary>
            </summary>
            <returns> Whether this subclass supports counter-clockwise rotation.</returns>
        </member>
        <member name="M:ZXing.InvertedLuminanceSource.invert">
            <summary>
            Inverts this instance.
            </summary>
            <returns>original delegate {@link LuminanceSource} since invert undoes itself</returns>
        </member>
        <member name="M:ZXing.InvertedLuminanceSource.rotateCounterClockwise">
            <summary>
            Returns a new object with rotated image data by 90 degrees counterclockwise.
            Only callable if {@link #isRotateSupported()} is true.
            </summary>
            <returns>
            A rotated version of this object.
            </returns>
        </member>
        <member name="M:ZXing.InvertedLuminanceSource.rotateCounterClockwise45">
            <summary>
            Returns a new object with rotated image data by 45 degrees counterclockwise.
            Only callable if {@link #isRotateSupported()} is true.
            </summary>
            <returns>
            A rotated version of this object.
            </returns>
        </member>
        <member name="T:ZXing.LuminanceSource">
            <summary>
            The purpose of this class hierarchy is to abstract different bitmap implementations across
            platforms into a standard interface for requesting greyscale luminance values. The interface
            only provides immutable methods; therefore crop and rotation create copies. This is to ensure
            that one Reader does not modify the original luminance source and leave it in an unknown state
            for other Readers in the chain.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="M:ZXing.LuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>
            initializing constructor
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ZXing.LuminanceSource.getRow(System.Int32,System.Byte[])">
            <summary>
            Fetches one row of luminance data from the underlying platform's bitmap. Values range from
            0 (black) to 255 (white). Because Java does not have an unsigned byte type, callers will have
            to bitwise and with 0xff for each value. It is preferable for implementations of this method
            to only fetch this row rather than the whole image, since no 2D Readers may be installed and
            getMatrix() may never be called.
            </summary>
            <param name="y">The row to fetch, which must be in [0, bitmap height)</param>
            <param name="row">An optional preallocated array. If null or too small, it will be ignored.
            Always use the returned object, and ignore the .length of the array.
            </param>
            <returns> An array containing the luminance data.</returns>
        </member>
        <member name="P:ZXing.LuminanceSource.Matrix">
            <summary>
            Fetches luminance data for the underlying bitmap. Values should be fetched using:
            <code>int luminance = array[y * width + x] &amp; 0xff</code>
            </summary>
            <returns>
            A row-major 2D array of luminance values. Do not use result.length as it may be
            larger than width * height bytes on some platforms. Do not modify the contents
            of the result.
            </returns>
        </member>
        <member name="P:ZXing.LuminanceSource.Width">
            <returns> The width of the bitmap.</returns>
        </member>
        <member name="P:ZXing.LuminanceSource.Height">
            <returns> The height of the bitmap.</returns>
        </member>
        <member name="P:ZXing.LuminanceSource.CropSupported">
            <returns> Whether this subclass supports cropping.</returns>
        </member>
        <member name="M:ZXing.LuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> 
            Returns a new object with cropped image data. Implementations may keep a reference to the
            original data rather than a copy. Only callable if CropSupported is true.
            </summary>
            <param name="left">The left coordinate, which must be in [0, Width)</param>
            <param name="top">The top coordinate, which must be in [0, Height)</param>
            <param name="width">The width of the rectangle to crop.</param>
            <param name="height">The height of the rectangle to crop.</param>
            <returns> A cropped version of this object.</returns>
        </member>
        <member name="P:ZXing.LuminanceSource.RotateSupported">
            <returns> Whether this subclass supports counter-clockwise rotation.</returns>
        </member>
        <member name="M:ZXing.LuminanceSource.rotateCounterClockwise">
            <summary>
            Returns a new object with rotated image data by 90 degrees counterclockwise.
            Only callable if <see cref="P:ZXing.LuminanceSource.RotateSupported"/> is true.
            </summary>
            <returns>A rotated version of this object.</returns>
        </member>
        <member name="M:ZXing.LuminanceSource.rotateCounterClockwise45">
            <summary>
            Returns a new object with rotated image data by 45 degrees counterclockwise.
            Only callable if <see cref="P:ZXing.LuminanceSource.RotateSupported"/> is true.
            </summary>
            <returns>A rotated version of this object.</returns>
        </member>
        <member name="P:ZXing.LuminanceSource.InversionSupported">
            <summary>
            </summary>
            <returns>Whether this subclass supports invertion.</returns>
        </member>
        <member name="M:ZXing.LuminanceSource.invert">
            <summary>
            inverts the luminance values, not supported here. has to implemented in sub classes
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.LuminanceSource.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZXing.Maxicode.Internal.BitMatrixParser">
            <summary>
            <author>mike32767</author>
            <author>Manuel Kasten</author>
            </summary>
        </member>
        <member name="M:ZXing.Maxicode.Internal.BitMatrixParser.#ctor(ZXing.Common.BitMatrix)">
            <summary>
            <param name="bitMatrix"><see cref="T:ZXing.Common.BitMatrix" />to parse</param>
            </summary>
        </member>
        <member name="T:ZXing.Maxicode.Internal.DecodedBitStreamParser">
             <summary>
             <p>MaxiCodes can encode text or structured information as bits in one of several modes,
             with multiple character sets in one code. This class decodes the bits back into text.</p>
            
             <author>mike32767</author>
             <author>Manuel Kasten</author>
             </summary>
        </member>
        <member name="T:ZXing.Maxicode.Internal.Decoder">
             <summary>
             <p>The main class which implements MaxiCode decoding -- as opposed to locating and extracting
             the MaxiCode from an image.</p>
            
             <author>Manuel Kasten</author>
             </summary>
        </member>
        <member name="T:ZXing.Maxicode.MaxiCodeReader">
            <summary>
            This implementation can detect and decode a MaxiCode in an image.
            </summary>
        </member>
        <member name="M:ZXing.Maxicode.MaxiCodeReader.decode(ZXing.BinaryBitmap)">
             <summary>
             Locates and decodes a MaxiCode in an image.
            
             <returns>a String representing the content encoded by the MaxiCode</returns>
             <exception cref="T:ZXing.FormatException">if a MaxiCode cannot be decoded</exception>
             </summary>
        </member>
        <member name="M:ZXing.Maxicode.MaxiCodeReader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Locates and decodes a MaxiCode within an image. This method also accepts
            hints, each possibly associated to some data, which may help the implementation decode.
            </summary>
            <param name="image">image of barcode to decode</param>
            <param name="hints">passed as a <see cref="T:System.Collections.Generic.IDictionary`2"/> from <see cref="T:ZXing.DecodeHintType"/>
            to arbitrary data. The
            meaning of the data depends upon the hint type. The implementation may or may not do
            anything with these hints.</param>
            <returns>
            String which the barcode encodes
            </returns>
        </member>
        <member name="M:ZXing.Maxicode.MaxiCodeReader.extractPureBits(ZXing.Common.BitMatrix)">
             <summary>
             This method detects a code in a "pure" image -- that is, pure monochrome image
             which contains only an unrotated, unskewed, image of a code, with some white border
             around it. This is a specialized method that works exceptionally fast in this special
             case.
            
             <seealso cref="M:ZXing.Datamatrix.DataMatrixReader.extractPureBits(ZXing.Common.BitMatrix)" />
             <seealso cref="M:ZXing.QrCode.QRCodeReader.extractPureBits(ZXing.Common.BitMatrix)" />
             </summary>
        </member>
        <member name="T:ZXing.MultiFormatReader">
            <summary>
            MultiFormatReader is a convenience class and the main entry point into the library for most uses.
            By default it attempts to decode all barcode formats that the library supports. Optionally, you
            can provide a hints object to request different behavior, for example only decoding QR codes.
            </summary>
            <author>Sean Owen</author>
            <author>dswitkin@google.com (Daniel Switkin)</author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source</author>
        </member>
        <member name="M:ZXing.MultiFormatReader.decode(ZXing.BinaryBitmap)">
            <summary> This version of decode honors the intent of Reader.decode(BinaryBitmap) in that it
            passes null as a hint to the decoders. However, that makes it inefficient to call repeatedly.
            Use setHints() followed by decodeWithState() for continuous scan applications.
            
            </summary>
            <param name="image">The pixel data to decode
            </param>
            <returns> The contents of the image
            </returns>
            <throws>  ReaderException Any errors which occurred </throws>
        </member>
        <member name="M:ZXing.MultiFormatReader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary> Decode an image using the hints provided. Does not honor existing state.
            
            </summary>
            <param name="image">The pixel data to decode
            </param>
            <param name="hints">The hints to use, clearing the previous state.
            </param>
            <returns> The contents of the image
            </returns>
            <throws>  ReaderException Any errors which occurred </throws>
        </member>
        <member name="M:ZXing.MultiFormatReader.decodeWithState(ZXing.BinaryBitmap)">
            <summary> Decode an image using the state set up by calling setHints() previously. Continuous scan
            clients will get a <b>large</b> speed increase by using this instead of decode().
            
            </summary>
            <param name="image">The pixel data to decode
            </param>
            <returns> The contents of the image
            </returns>
            <throws>  ReaderException Any errors which occurred </throws>
        </member>
        <member name="P:ZXing.MultiFormatReader.Hints">
            <summary> This method adds state to the MultiFormatReader. By setting the hints once, subsequent calls
            to decodeWithState(image) can reuse the same set of readers without reallocating memory. This
            is important for performance in continuous scan clients.
            
            </summary>
        </member>
        <member name="M:ZXing.MultiFormatReader.reset">
            <summary>
            resets all specific readers
            </summary>
        </member>
        <member name="T:ZXing.MultiFormatWriter">
            <summary> This is a factory class which finds the appropriate Writer subclass for the BarcodeFormat
            requested and encodes the barcode with the supplied contents.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="P:ZXing.MultiFormatWriter.SupportedWriters">
            <summary>
            Gets the collection of supported writers.
            </summary>
        </member>
        <member name="M:ZXing.MultiFormatWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32)">
            <summary>
            encode the given data
            </summary>
            <param name="contents"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.MultiFormatWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            encode the given data
            </summary>
            <param name="contents"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Multi.ByQuadrantReader">
            <summary>
            This class attempts to decode a barcode from an image, not by scanning the whole image,
            but by scanning subsets of the image. This is important when there may be multiple barcodes in
            an image, and detecting a barcode may find parts of multiple barcode and fail to decode
            (e.g. QR Codes). Instead this scans the four quadrants of the image -- and also the center
            'quadrant' to cover the case where a barcode is found in the center.
            </summary>
            <seealso cref="T:ZXing.Multi.GenericMultipleBarcodeReader" />
        </member>
        <member name="M:ZXing.Multi.ByQuadrantReader.#ctor(ZXing.Reader)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Multi.ByQuadrantReader"/> class.
            </summary>
            <param name="delegate">The @delegate.</param>
        </member>
        <member name="M:ZXing.Multi.ByQuadrantReader.decode(ZXing.BinaryBitmap)">
            <summary>
            Locates and decodes a barcode in some format within an image.
            </summary>
            <param name="image">image of barcode to decode</param>
            <returns>
            String which the barcode encodes
            </returns>
        </member>
        <member name="M:ZXing.Multi.ByQuadrantReader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Locates and decodes a barcode in some format within an image. This method also accepts
            hints, each possibly associated to some data, which may help the implementation decode.
            </summary>
            <param name="image">image of barcode to decode</param>
            <param name="hints">passed as a <see cref="T:System.Collections.Generic.IDictionary`2"/> from <see cref="T:ZXing.DecodeHintType"/>
            to arbitrary data. The
            meaning of the data depends upon the hint type. The implementation may or may not do
            anything with these hints.</param>
            <returns>
            String which the barcode encodes
            </returns>
        </member>
        <member name="M:ZXing.Multi.ByQuadrantReader.reset">
            <summary>
            Resets any internal state the implementation has after a decode, to prepare it
            for reuse.
            </summary>
        </member>
        <member name="T:ZXing.Multi.GenericMultipleBarcodeReader">
            <summary>
              <p>Attempts to locate multiple barcodes in an image by repeatedly decoding portion of the image.
            After one barcode is found, the areas left, above, right and below the barcode's
            {@link com.google.zxing.ResultPoint}s are scanned, recursively.</p>
              <p>A caller may want to also employ {@link ByQuadrantReader} when attempting to find multiple
            2D barcodes, like QR Codes, in an image, where the presence of multiple barcodes might prevent
            detecting any one of them.</p>
              <p>That is, instead of passing a {@link Reader} a caller might pass
              <code>new ByQuadrantReader(reader)</code>.</p>
              <author>Sean Owen</author>
            </summary>
        </member>
        <member name="M:ZXing.Multi.GenericMultipleBarcodeReader.#ctor(ZXing.Reader)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Multi.GenericMultipleBarcodeReader"/> class.
            </summary>
            <param name="delegate">The @delegate.</param>
        </member>
        <member name="M:ZXing.Multi.GenericMultipleBarcodeReader.decodeMultiple(ZXing.BinaryBitmap)">
            <summary>
            Decodes the multiple.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Multi.GenericMultipleBarcodeReader.decodeMultiple(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Decodes the multiple.
            </summary>
            <param name="image">The image.</param>
            <param name="hints">The hints.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Multi.GenericMultipleBarcodeReader.decode(ZXing.BinaryBitmap)">
            <summary>
            Locates and decodes a barcode in some format within an image.
            </summary>
            <param name="image">image of barcode to decode</param>
            <returns>
            String which the barcode encodes
            </returns>
        </member>
        <member name="M:ZXing.Multi.GenericMultipleBarcodeReader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Locates and decodes a barcode in some format within an image. This method also accepts
            hints, each possibly associated to some data, which may help the implementation decode.
            </summary>
            <param name="image">image of barcode to decode</param>
            <param name="hints">passed as a <see cref="T:System.Collections.Generic.IDictionary`2"/> from <see cref="T:ZXing.DecodeHintType"/>
            to arbitrary data. The
            meaning of the data depends upon the hint type. The implementation may or may not do
            anything with these hints.</param>
            <returns>
            String which the barcode encodes
            </returns>
        </member>
        <member name="M:ZXing.Multi.GenericMultipleBarcodeReader.reset">
            <summary>
            Resets any internal state the implementation has after a decode, to prepare it
            for reuse.
            </summary>
        </member>
        <member name="T:ZXing.Multi.MultipleBarcodeReader">
            <summary>
            Implementation of this interface attempt to read several barcodes from one image.
            <author>Sean Owen</author>
            	<seealso cref="T:ZXing.Reader"/>
            </summary>
        </member>
        <member name="M:ZXing.Multi.MultipleBarcodeReader.decodeMultiple(ZXing.BinaryBitmap)">
            <summary>
            Decodes the multiple.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Multi.MultipleBarcodeReader.decodeMultiple(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Decodes the multiple.
            </summary>
            <param name="image">The image.</param>
            <param name="hints">The hints.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Multi.QrCode.Internal.MultiDetector">
             <summary>
             <p>Encapsulates logic that can detect one or more QR Codes in an image, even if the QR Code
             is rotated or skewed, or partially obscured.</p>
            
             <author>Sean Owen</author>
             <author>Hannes Erven</author>
             </summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Internal.MultiDetector.#ctor(ZXing.Common.BitMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Multi.QrCode.Internal.MultiDetector"/> class.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:ZXing.Multi.QrCode.Internal.MultiDetector.detectMulti(System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Detects the multi.
            </summary>
            <param name="hints">The hints.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Multi.QrCode.Internal.MultiFinderPatternFinder">
             <summary>
             <p>This class attempts to find finder patterns in a QR Code. Finder patterns are the square
             markers at three corners of a QR Code.</p>
            
             <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.</p>
            
             <p>In contrast to <see cref="T:ZXing.QrCode.Internal.FinderPatternFinder" />, this class will return an array of all possible
             QR code locations in the image.</p>
            
             <p>Use the TRY_HARDER hint to ask for a more thorough detection.</p>
            
             <author>Sean Owen</author>
             <author>Hannes Erven</author>
             </summary>
        </member>
        <member name="F:ZXing.Multi.QrCode.Internal.MultiFinderPatternFinder.DIFF_MODSIZE_CUTOFF_PERCENT">
            <summary>
            More or less arbitrary cutoff point for determining if two finder patterns might belong
            to the same code if they differ less than DIFF_MODSIZE_CUTOFF_PERCENT percent in their
            estimated modules sizes.
            </summary>
        </member>
        <member name="F:ZXing.Multi.QrCode.Internal.MultiFinderPatternFinder.DIFF_MODSIZE_CUTOFF">
            <summary>
            More or less arbitrary cutoff point for determining if two finder patterns might belong
            to the same code if they differ less than DIFF_MODSIZE_CUTOFF pixels/module in their
            estimated modules sizes.
            </summary>
        </member>
        <member name="T:ZXing.Multi.QrCode.Internal.MultiFinderPatternFinder.ModuleSizeComparator">
            <summary>
            A comparator that orders FinderPatterns by their estimated module size.
            </summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Internal.MultiFinderPatternFinder.#ctor(ZXing.Common.BitMatrix)">
             <summary>
             <p>Creates a finder that will search the image for three finder patterns.</p>
            
             <param name="image">image to search</param>
             </summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Internal.MultiFinderPatternFinder.selectMutipleBestPatterns">
            <summary>
            </summary>
            <returns>the 3 best <see cref="T:ZXing.QrCode.Internal.FinderPattern" />s from our list of candidates. The "best" are
                    those that have been detected at least CENTER_QUORUM times, and whose module
                    size differs from the average among those patterns the least
            </returns>
        </member>
        <member name="T:ZXing.Multi.QrCode.QRCodeMultiReader">
            <summary>
            This implementation can detect and decode multiple QR Codes in an image.
            </summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.QRCodeMultiReader.decodeMultiple(ZXing.BinaryBitmap)">
            <summary>
            Decodes the multiple.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Multi.QrCode.QRCodeMultiReader.decodeMultiple(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Decodes the multiple.
            </summary>
            <param name="image">The image.</param>
            <param name="hints">The hints.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.OneD.CodaBarReader">
             <summary>
             <p>Decodes Codabar barcodes.</p>
            
             <author>Bas Vijfwinkel</author>
             </summary>
        </member>
        <member name="F:ZXing.OneD.CodaBarReader.CHARACTER_ENCODINGS">
            These represent the encodings of characters, as patterns of wide and narrow bars. The 7 least-significant bits of
            each int correspond to the pattern of wide and narrow, with 1s representing "wide" and 0s representing narrow.
        </member>
        <member name="M:ZXing.OneD.CodaBarReader.setCounters(ZXing.Common.BitArray)">
            <summary>
            Records the size of all runs of white and black pixels, starting with white.
            This is just like recordPattern, except it records all the counters, and
            uses our builtin "counters" member for storage.
            </summary>
            <param name="row">row to count from</param>
        </member>
        <member name="T:ZXing.OneD.CodaBarWriter">
            <summary>
            This class renders CodaBar as <see cref="T:System.Boolean" />[].
            </summary>
            <author>dsbnatut@gmail.com (Kazuki Nishiura)</author>
        </member>
        <member name="T:ZXing.OneD.Code128EncodingOptions">
            <summary>
            The class holds the available options for the QrCodeWriter
            </summary>
        </member>
        <member name="P:ZXing.OneD.Code128EncodingOptions.ForceCodesetB">
            <summary>
            if true, don't switch to codeset C for numbers
            </summary>
        </member>
        <member name="T:ZXing.OneD.Code128Reader">
             <summary>
             <p>Decodes Code 128 barcodes.</p>
            
             <author>Sean Owen</author>
             </summary>
        </member>
        <member name="T:ZXing.OneD.Code128Writer">
            <summary>
            This object renders a CODE128 code as a <see cref="T:ZXing.Common.BitMatrix" />.
            
            <author>erik.barbara@gmail.com (Erik Barbara)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.Code39Reader">
            <summary>
              <p>Decodes Code 39 barcodes. Supports "Full ASCII Code 39" if USE_CODE_39_EXTENDED_MODE is set.</p>
            	<author>Sean Owen</author>
            @see Code93Reader
            </summary>
        </member>
        <member name="P:ZXing.OneD.Code39Reader.Alphabet">
            <summary>
            Returns a string with all possible characters
            </summary>
        </member>
        <member name="F:ZXing.OneD.Code39Reader.CHARACTER_ENCODINGS">
            <summary>
            These represent the encodings of characters, as patterns of wide and narrow bars.
            The 9 least-significant bits of each int correspond to the pattern of wide and narrow,
            with 1s representing "wide" and 0s representing narrow.
            </summary>
        </member>
        <member name="M:ZXing.OneD.Code39Reader.#ctor">
            <summary>
            Creates a reader that assumes all encoded data is data, and does not treat the final
            character as a check digit. It will not decoded "extended Code 39" sequences.
            </summary>
        </member>
        <member name="M:ZXing.OneD.Code39Reader.#ctor(System.Boolean)">
            <summary>
            Creates a reader that can be configured to check the last character as a check digit.
            It will not decoded "extended Code 39" sequences.
            </summary>
            <param name="usingCheckDigit">if true, treat the last data character as a check digit, not
            data, and verify that the checksum passes.</param>
        </member>
        <member name="M:ZXing.OneD.Code39Reader.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a reader that can be configured to check the last character as a check digit,
            or optionally attempt to decode "extended Code 39" sequences that are used to encode
            the full ASCII character set.
            </summary>
            <param name="usingCheckDigit">if true, treat the last data character as a check digit, not
            data, and verify that the checksum passes.</param>
            <param name="extendedMode">if true, will attempt to decode extended Code 39 sequences in the text.</param>
        </member>
        <member name="M:ZXing.OneD.Code39Reader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Attempts to decode a one-dimensional barcode format given a single row of
            an image.</p>
            </summary>
            <param name="rowNumber">row number from top of the row</param>
            <param name="row">the black/white pixel data of the row</param>
            <param name="hints">decode hints</param>
            <returns><see cref="T:ZXing.Result"/>containing encoded string and start/end of barcode</returns>
        </member>
        <member name="T:ZXing.OneD.Code39Writer">
            <summary>
            This object renders a CODE39 code as a <see cref="T:ZXing.Common.BitMatrix"/>.
            <author>erik.barbara@gmail.com (Erik Barbara)</author>
            </summary>
        </member>
        <member name="M:ZXing.OneD.Code39Writer.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            Encode the contents following specified format.
            {@code width} and {@code height} are required size. This method may return bigger size
            {@code BitMatrix} when specified size is too small. The user can set both {@code width} and
            {@code height} to zero to get minimum size barcode. If negative value is set to {@code width}
            or {@code height}, {@code IllegalArgumentException} is thrown.
            </summary>
            <param name="contents"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.Code39Writer.encode(System.String)">
            <summary>
            Encode the contents to byte array expression of one-dimensional barcode.
            Start code and end code should be included in result, and side margins should not be included.
            <returns>a {@code boolean[]} of horizontal pixels (false = white, true = black)</returns>
            </summary>
            <param name="contents"></param>
            <returns></returns>
        </member>
        <member name="T:ZXing.OneD.Code93Reader">
            <summary>
              <p>Decodes Code 93 barcodes.</p>
            	<author>Sean Owen</author>
            <see cref="T:ZXing.OneD.Code39Reader" />
            </summary>
        </member>
        <member name="F:ZXing.OneD.Code93Reader.CHARACTER_ENCODINGS">
            <summary>
            These represent the encodings of characters, as patterns of wide and narrow bars.
            The 9 least-significant bits of each int correspond to the pattern of wide and narrow.
            </summary>
        </member>
        <member name="M:ZXing.OneD.Code93Reader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.OneD.Code93Reader"/> class.
            </summary>
        </member>
        <member name="M:ZXing.OneD.Code93Reader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Attempts to decode a one-dimensional barcode format given a single row of
            an image.</p>
            </summary>
            <param name="rowNumber">row number from top of the row</param>
            <param name="row">the black/white pixel data of the row</param>
            <param name="hints">decode hints</param>
            <returns><see cref="T:ZXing.Result"/>containing encoded string and start/end of barcode</returns>
        </member>
        <member name="T:ZXing.OneD.Code93Writer">
            <summary>
            This object renders a CODE93 code as a BitMatrix
            </summary>
        </member>
        <member name="M:ZXing.OneD.Code93Writer.appendPattern(System.Boolean[],System.Int32,System.Int32[],System.Boolean)">
            <summary>
            </summary>
            <param name="target">output to append to</param>
            <param name="pos">start position</param>
            <param name="pattern">pattern to append</param>
            <param name="startColor">unused</param>
            <returns>9</returns>
        </member>
        <member name="T:ZXing.OneD.EAN13Reader">
             <summary>
             <p>Implements decoding of the EAN-13 format.</p>
            
             <author>dswitkin@google.com (Daniel Switkin)</author>
             <author>Sean Owen</author>
             <author>alasdair@google.com (Alasdair Mackintosh)</author>
             </summary>
        </member>
        <member name="M:ZXing.OneD.EAN13Reader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.OneD.EAN13Reader"/> class.
            </summary>
        </member>
        <member name="M:ZXing.OneD.EAN13Reader.decodeMiddle(ZXing.Common.BitArray,System.Int32[],System.Text.StringBuilder)">
            <summary>
            Subclasses override this to decode the portion of a barcode between the start
            and end guard patterns.
            </summary>
            <param name="row">row of black/white values to search</param>
            <param name="startRange">start/end offset of start guard pattern</param>
            <param name="resultString"><see cref="T:System.Text.StringBuilder"/>to append decoded chars to</param>
            <returns>
            horizontal offset of first pixel after the "middle" that was decoded or -1 if decoding could not complete successfully
            </returns>
        </member>
        <member name="P:ZXing.OneD.EAN13Reader.BarcodeFormat">
            <summary>
            Get the format of this decoder.
            <returns>The 1D format.</returns>
            </summary>
        </member>
        <member name="M:ZXing.OneD.EAN13Reader.determineFirstDigit(System.Text.StringBuilder,System.Int32)">
            <summary>
            Based on pattern of odd-even ('L' and 'G') patterns used to encoded the explicitly-encoded
            digits in a barcode, determines the implicitly encoded first digit and adds it to the
            result string.
            </summary>
            <param name="resultString">string to insert decoded first digit into</param>
            <param name="lgPatternFound">int whose bits indicates the pattern of odd/even L/G patterns used to</param>
             encode digits
            <return>-1 if first digit cannot be determined</return>
        </member>
        <member name="T:ZXing.OneD.EAN13Writer">
            <summary>
            This object renders an EAN13 code as a <see cref="T:ZXing.Common.BitMatrix"/>.
            <author>aripollak@gmail.com (Ari Pollak)</author>
            </summary>
        </member>
        <member name="M:ZXing.OneD.EAN13Writer.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            Encode the contents following specified format.
            {@code width} and {@code height} are required size. This method may return bigger size
            {@code BitMatrix} when specified size is too small. The user can set both {@code width} and
            {@code height} to zero to get minimum size barcode. If negative value is set to {@code width}
            or {@code height}, {@code IllegalArgumentException} is thrown.
            </summary>
            <param name="contents"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.EAN13Writer.encode(System.String)">
            <summary>
            Encode the contents to byte array expression of one-dimensional barcode.
            Start code and end code should be included in result, and side margins should not be included.
            <returns>a {@code boolean[]} of horizontal pixels (false = white, true = black)</returns>
            </summary>
            <param name="contents"></param>
            <returns></returns>
        </member>
        <member name="T:ZXing.OneD.EAN8Reader">
            <summary>
              <p>Implements decoding of the EAN-8 format.</p>
              <author>Sean Owen</author>
            </summary>
        </member>
        <member name="M:ZXing.OneD.EAN8Reader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.OneD.EAN8Reader"/> class.
            </summary>
        </member>
        <member name="M:ZXing.OneD.EAN8Reader.decodeMiddle(ZXing.Common.BitArray,System.Int32[],System.Text.StringBuilder)">
            <summary>
            Decodes the middle.
            </summary>
            <param name="row">The row.</param>
            <param name="startRange">The start range.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="P:ZXing.OneD.EAN8Reader.BarcodeFormat">
            <summary>
            Get the format of this decoder.
            <returns>The 1D format.</returns>
            </summary>
        </member>
        <member name="T:ZXing.OneD.EAN8Writer">
            <summary>
            This object renders an EAN8 code as a <see cref="T:ZXing.Common.BitMatrix"/>.
            <author>aripollak@gmail.com (Ari Pollak)</author>
            </summary>
        </member>
        <member name="M:ZXing.OneD.EAN8Writer.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            Encode the contents following specified format.
            {@code width} and {@code height} are required size. This method may return bigger size
            {@code BitMatrix} when specified size is too small. The user can set both {@code width} and
            {@code height} to zero to get minimum size barcode. If negative value is set to {@code width}
            or {@code height}, {@code IllegalArgumentException} is thrown.
            </summary>
            <param name="contents"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.EAN8Writer.encode(System.String)">
            <summary>
            </summary>
            <returns>
            a byte array of horizontal pixels (false = white, true = black)
            </returns>
        </member>
        <member name="T:ZXing.OneD.EANManufacturerOrgSupport">
             <summary>
             Records EAN prefix to GS1 Member Organization, where the member organization
             correlates strongly with a country. This is an imperfect means of identifying
             a country of origin by EAN-13 barcode value. See
             <a href="http://en.wikipedia.org/wiki/List_of_GS1_country_codes">
             http://en.wikipedia.org/wiki/List_of_GS1_country_codes</a>.
            
             <author>Sean Owen</author>
             </summary>
        </member>
        <member name="T:ZXing.OneD.ITFReader">
             <summary>
             <p>Implements decoding of the ITF format, or Interleaved Two of Five.</p>
            
             <p>This Reader will scan ITF barcodes of certain lengths only.
             At the moment it reads length 6, 8, 10, 12, 14, 16, 18, 20, 24, 44 and 48 as these have appeared "in the wild". Not all
             lengths are scanned, especially shorter ones, to avoid false positives. This in turn is due to a lack of
             required checksum function.</p>
            
             <p>The checksum is optional and is not applied by this Reader. The consumer of the decoded
             value will have to apply a checksum if required.</p>
            
             <p><a href="http://en.wikipedia.org/wiki/Interleaved_2_of_5">http://en.wikipedia.org/wiki/Interleaved_2_of_5</a>
             is a great reference for Interleaved 2 of 5 information.</p>
            
             <author>kevin.osullivan@sita.aero, SITA Lab.</author>
             </summary>
        </member>
        <member name="F:ZXing.OneD.ITFReader.DEFAULT_ALLOWED_LENGTHS">
            <summary>
            Valid ITF lengths. Anything longer than the largest value is also allowed.
            </summary>
        </member>
        <member name="F:ZXing.OneD.ITFReader.START_PATTERN">
             <summary>
             Start/end guard pattern.
            
             Note: The end pattern is reversed because the row is reversed before
             searching for the END_PATTERN
             </summary>
        </member>
        <member name="F:ZXing.OneD.ITFReader.PATTERNS">
            <summary>
            Patterns of Wide / Narrow lines to indicate each digit
            </summary>
        </member>
        <member name="M:ZXing.OneD.ITFReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Attempts to decode a one-dimensional barcode format given a single row of
            an image.
            </summary>
            <param name="rowNumber">row number from top of the row</param>
            <param name="row">the black/white pixel data of the row</param>
            <param name="hints">decode hints</param>
            <returns>
              <see cref="T:ZXing.Result"/>containing encoded string and start/end of barcode
            </returns>
        </member>
        <member name="M:ZXing.OneD.ITFReader.decodeMiddle(ZXing.Common.BitArray,System.Int32,System.Int32,System.Text.StringBuilder)">
            <summary>
            </summary>
            <param name="row">row of black/white values to search</param>
            <param name="payloadStart">offset of start pattern</param>
            <param name="payloadEnd">The payload end.</param>
            <param name="resultString"><see cref="T:System.Text.StringBuilder"/>to append decoded chars to</param>
            <returns>
            false, if decoding could not complete successfully
            </returns>
        </member>
        <member name="M:ZXing.OneD.ITFReader.decodeStart(ZXing.Common.BitArray)">
            <summary>
            Identify where the start of the middle / payload section starts.
            </summary>
            <param name="row">row of black/white values to search</param>
            <returns>Array, containing index of start of 'start block' and end of 'start block'</returns>
        </member>
        <member name="M:ZXing.OneD.ITFReader.validateQuietZone(ZXing.Common.BitArray,System.Int32)">
             <summary>
             The start &amp; end patterns must be pre/post fixed by a quiet zone. This
             zone must be at least 10 times the width of a narrow line.  Scan back until
             we either get to the start of the barcode or match the necessary number of
             quiet zone pixels.
            
             Note: Its assumed the row is reversed when using this method to find
             quiet zone after the end pattern.
            
             ref: http://www.barcode-1.net/i25code.html
             </summary>
             <param name="row">bit array representing the scanned barcode.</param>
             <param name="startPattern">index into row of the start or end pattern.</param>
             <returns>false, if the quiet zone cannot be found</returns>
        </member>
        <member name="M:ZXing.OneD.ITFReader.skipWhiteSpace(ZXing.Common.BitArray)">
            <summary>
            Skip all whitespace until we get to the first black line.
            </summary>
            <param name="row">row of black/white values to search</param>
            <returns>index of the first black line or -1 if no black lines are found in the row.</returns>
        </member>
        <member name="M:ZXing.OneD.ITFReader.decodeEnd(ZXing.Common.BitArray)">
            <summary>
            Identify where the end of the middle / payload section ends.
            </summary>
            <param name="row">row of black/white values to search</param>
            <returns>Array, containing index of start of 'end block' and end of 'end
            block' or null, if nothing found</returns>
        </member>
        <member name="M:ZXing.OneD.ITFReader.findGuardPattern(ZXing.Common.BitArray,System.Int32,System.Int32[])">
            <summary>
            </summary>
            <param name="row">row of black/white values to search</param>
            <param name="rowOffset">position to start search</param>
            <param name="pattern">pattern of counts of number of black and white pixels that are being searched for as a pattern</param>
            <returns>start/end horizontal offset of guard pattern, as an array of two ints</returns>
        </member>
        <member name="M:ZXing.OneD.ITFReader.decodeDigit(System.Int32[],System.Int32@)">
            <summary>
            Attempts to decode a sequence of ITF black/white lines into single
            digit.
            </summary>
            <param name="counters">the counts of runs of observed black/white/black/... values</param>
            <param name="bestMatch">The decoded digit</param>
            <returns>
            false, if digit cannot be decoded
            </returns>
        </member>
        <member name="T:ZXing.OneD.ITFWriter">
            <summary>
            This object renders a ITF code as a <see cref="T:ZXing.Common.BitMatrix" />.
            
            <author>erik.barbara@gmail.com (Erik Barbara)</author>
            </summary>
        </member>
        <member name="M:ZXing.OneD.ITFWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            Encode the contents following specified format.
            {@code width} and {@code height} are required size. This method may return bigger size
            {@code BitMatrix} when specified size is too small. The user can set both {@code width} and
            {@code height} to zero to get minimum size barcode. If negative value is set to {@code width}
            or {@code height}, {@code IllegalArgumentException} is thrown.
            </summary>
            <param name="contents"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.ITFWriter.encode(System.String)">
            <summary>
            Encode the contents to bool array expression of one-dimensional barcode.
            Start code and end code should be included in result, and side margins should not be included.
            <returns>a {@code bool[]} of horizontal pixels (false = white, true = black)</returns>
            </summary>
            <param name="contents"></param>
            <returns></returns>
        </member>
        <member name="T:ZXing.OneD.MSIReader">
            <summary>
            Decodes MSI barcodes.
            </summary>
        </member>
        <member name="F:ZXing.OneD.MSIReader.CHARACTER_ENCODINGS">
            <summary>
            These represent the encodings of characters, as patterns of wide and narrow bars.
            The 9 least-significant bits of each int correspond to the pattern of wide and narrow,
            with 1s representing "wide" and 0s representing narrow.
            </summary>
        </member>
        <member name="M:ZXing.OneD.MSIReader.#ctor">
            <summary>
            Creates a reader that assumes all encoded data is data, and does not treat the final
            character as a check digit.
            </summary>
        </member>
        <member name="M:ZXing.OneD.MSIReader.#ctor(System.Boolean)">
            <summary>
            Creates a reader that can be configured to check the last character as a check digit,
            </summary>
            <param name="usingCheckDigit">if true, treat the last data character as a check digit, not
            data, and verify that the checksum passes.</param>
        </member>
        <member name="M:ZXing.OneD.MSIReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Attempts to decode a one-dimensional barcode format given a single row of
            an image.</p>
            </summary>
            <param name="rowNumber">row number from top of the row</param>
            <param name="row">the black/white pixel data of the row</param>
            <param name="hints">decode hints</param>
            <returns><see cref="T:ZXing.Result"/>containing encoded string and start/end of barcode</returns>
        </member>
        <member name="T:ZXing.OneD.MSIWriter">
            <summary>
            This object renders a MSI code as a <see cref="T:ZXing.Common.BitMatrix"/>.
            </summary>
        </member>
        <member name="M:ZXing.OneD.MSIWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            Encode the contents following specified format.
            {@code width} and {@code height} are required size. This method may return bigger size
            {@code BitMatrix} when specified size is too small. The user can set both {@code width} and
            {@code height} to zero to get minimum size barcode. If negative value is set to {@code width}
            or {@code height}, {@code IllegalArgumentException} is thrown.
            </summary>
            <param name="contents"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.MSIWriter.encode(System.String)">
            <summary>
            Encode the contents to byte array expression of one-dimensional barcode.
            Start code and end code should be included in result, and side margins should not be included.
            <returns>a {@code boolean[]} of horizontal pixels (false = white, true = black)</returns>
            </summary>
            <param name="contents"></param>
            <returns></returns>
        </member>
        <member name="T:ZXing.OneD.MultiFormatOneDReader">
            <summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
            <author>Sean Owen</author>
            </summary>
        </member>
        <member name="M:ZXing.OneD.MultiFormatOneDReader.#ctor(System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.OneD.MultiFormatOneDReader"/> class.
            </summary>
            <param name="hints">The hints.</param>
        </member>
        <member name="M:ZXing.OneD.MultiFormatOneDReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Attempts to decode a one-dimensional barcode format given a single row of
            an image.</p>
            </summary>
            <param name="rowNumber">row number from top of the row</param>
            <param name="row">the black/white pixel data of the row</param>
            <param name="hints">decode hints</param>
            <returns>
              <see cref="T:ZXing.Result"/>containing encoded string and start/end of barcode or null, if an error occurs or barcode cannot be found
            </returns>
        </member>
        <member name="M:ZXing.OneD.MultiFormatOneDReader.reset">
            <summary>
            Resets any internal state the implementation has after a decode, to prepare it
            for reuse.
            </summary>
        </member>
        <member name="T:ZXing.OneD.MultiFormatUPCEANReader">
            <summary>
              <p>A reader that can read all available UPC/EAN formats. If a caller wants to try to
            read all such formats, it is most efficient to use this implementation rather than invoke
            individual readers.</p>
              <author>Sean Owen</author>
            </summary>
        </member>
        <member name="M:ZXing.OneD.MultiFormatUPCEANReader.#ctor(System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.OneD.MultiFormatUPCEANReader"/> class.
            </summary>
            <param name="hints">The hints.</param>
        </member>
        <member name="M:ZXing.OneD.MultiFormatUPCEANReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Attempts to decode a one-dimensional barcode format given a single row of
            an image.</p>
            </summary>
            <param name="rowNumber">row number from top of the row</param>
            <param name="row">the black/white pixel data of the row</param>
            <param name="hints">decode hints</param>
            <returns>
              <see cref="T:ZXing.Result"/>containing encoded string and start/end of barcode or null if an error occurs or barcode cannot be found
            </returns>
        </member>
        <member name="M:ZXing.OneD.MultiFormatUPCEANReader.reset">
            <summary>
            Resets any internal state the implementation has after a decode, to prepare it
            for reuse.
            </summary>
        </member>
        <member name="T:ZXing.OneD.OneDimensionalCodeWriter">
            <summary>
              <p>Encapsulates functionality and implementation that is common to one-dimensional barcodes.</p>
              <author>dsbnatut@gmail.com (Kazuki Nishiura)</author>
            </summary>
        </member>
        <member name="M:ZXing.OneD.OneDimensionalCodeWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32)">
            <summary>
            Encode a barcode using the default settings.
            </summary>
            <param name="contents">The contents to encode in the barcode</param>
            <param name="format">The barcode format to generate</param>
            <param name="width">The preferred width in pixels</param>
            <param name="height">The preferred height in pixels</param>
            <returns>
            The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)
            </returns>
        </member>
        <member name="M:ZXing.OneD.OneDimensionalCodeWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            Encode the contents following specified format.
            {@code width} and {@code height} are required size. This method may return bigger size
            {@code BitMatrix} when specified size is too small. The user can set both {@code width} and
            {@code height} to zero to get minimum size barcode. If negative value is set to {@code width}
            or {@code height}, {@code IllegalArgumentException} is thrown.
            </summary>
        </member>
        <member name="M:ZXing.OneD.OneDimensionalCodeWriter.renderResult(System.Boolean[],System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
            <returns>a byte array of horizontal pixels (0 = white, 1 = black)</returns>
        </member>
        <member name="M:ZXing.OneD.OneDimensionalCodeWriter.appendPattern(System.Boolean[],System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Appends the given pattern to the target array starting at pos.
            </summary>
            <param name="target">encode black/white pattern into this array</param>
            <param name="pos">position to start encoding at in <c>target</c></param>
            <param name="pattern">lengths of black/white runs to encode</param>
            <param name="startColor">starting color - false for white, true for black</param>
            <returns>the number of elements added to target.</returns>
        </member>
        <member name="P:ZXing.OneD.OneDimensionalCodeWriter.DefaultMargin">
            <summary>
            Gets the default margin.
            </summary>
        </member>
        <member name="M:ZXing.OneD.OneDimensionalCodeWriter.encode(System.String)">
            <summary>
            Encode the contents to bool array expression of one-dimensional barcode.
            Start code and end code should be included in result, and side margins should not be included.
            </summary>
            <param name="contents">barcode contents to encode</param>
            <returns>a <c>bool[]</c> of horizontal pixels (false = white, true = black)</returns>
        </member>
        <member name="M:ZXing.OneD.OneDimensionalCodeWriter.CalculateChecksumDigitModulo10(System.String)">
            <summary>
            Calculates the checksum digit modulo10.
            </summary>
            <param name="contents">The contents.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.OneD.OneDReader">
            <summary>
            Encapsulates functionality and implementation that is common to all families
            of one-dimensional barcodes.
            <author>dswitkin@google.com (Daniel Switkin)</author>
            <author>Sean Owen</author>
            </summary>
        </member>
        <member name="F:ZXing.OneD.OneDReader.INTEGER_MATH_SHIFT">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.OneD.OneDReader.PATTERN_MATCH_RESULT_SCALE_FACTOR">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZXing.OneD.OneDReader.decode(ZXing.BinaryBitmap)">
            <summary>
            Locates and decodes a barcode in some format within an image.
            </summary>
            <param name="image">image of barcode to decode</param>
            <returns>
            String which the barcode encodes
            </returns>
        </member>
        <member name="M:ZXing.OneD.OneDReader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Locates and decodes a barcode in some format within an image. This method also accepts
            hints, each possibly associated to some data, which may help the implementation decode.
            Note that we don't try rotation without the try harder flag, even if rotation was supported.
            </summary>
            <param name="image">image of barcode to decode</param>
            <param name="hints">passed as a <see cref="T:System.Collections.Generic.IDictionary`2"/> from <see cref="T:ZXing.DecodeHintType"/>
            to arbitrary data. The
            meaning of the data depends upon the hint type. The implementation may or may not do
            anything with these hints.</param>
            <returns>
            String which the barcode encodes
            </returns>
        </member>
        <member name="M:ZXing.OneD.OneDReader.reset">
            <summary>
            Resets any internal state the implementation has after a decode, to prepare it
            for reuse.
            </summary>
        </member>
        <member name="M:ZXing.OneD.OneDReader.doDecode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            We're going to examine rows from the middle outward, searching alternately above and below the
            middle, and farther out each time. rowStep is the number of rows between each successive
            attempt above and below the middle. So we'd scan row middle, then middle - rowStep, then
            middle + rowStep, then middle - (2 * rowStep), etc.
            rowStep is bigger as the image is taller, but is always at least 1. We've somewhat arbitrarily
            decided that moving up and down by about 1/16 of the image is pretty good; we try more of the
            image if "trying harder".
            </summary>
            <param name="image">The image to decode</param>
            <param name="hints">Any hints that were requested</param>
            <returns>The contents of the decoded barcode</returns>
        </member>
        <member name="M:ZXing.OneD.OneDReader.recordPattern(ZXing.Common.BitArray,System.Int32,System.Int32[])">
            <summary>
            Records the size of successive runs of white and black pixels in a row, starting at a given point.
            The values are recorded in the given array, and the number of runs recorded is equal to the size
            of the array. If the row starts on a white pixel at the given start point, then the first count
            recorded is the run of white pixels starting from that point; likewise it is the count of a run
            of black pixels if the row begin on a black pixels at that point.
            </summary>
            <param name="row">row to count from</param>
            <param name="start">offset into row to start at</param>
            <param name="counters">array into which to record counts</param>
        </member>
        <member name="M:ZXing.OneD.OneDReader.recordPattern(ZXing.Common.BitArray,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Records the size of successive runs of white and black pixels in a row, starting at a given point.
            The values are recorded in the given array, and the number of runs recorded is equal to the size
            of the array. If the row starts on a white pixel at the given start point, then the first count
            recorded is the run of white pixels starting from that point; likewise it is the count of a run
            of black pixels if the row begin on a black pixels at that point.
            </summary>
            <param name="row">row to count from</param>
            <param name="start">offset into row to start at</param>
            <param name="counters">array into which to record counts</param>
        </member>
        <member name="M:ZXing.OneD.OneDReader.recordPatternInReverse(ZXing.Common.BitArray,System.Int32,System.Int32[])">
            <summary>
            Records the pattern in reverse.
            </summary>
            <param name="row">The row.</param>
            <param name="start">The start.</param>
            <param name="counters">The counters.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.OneDReader.patternMatchVariance(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Determines how closely a set of observed counts of runs of black/white values matches a given
            target pattern. This is reported as the ratio of the total variance from the expected pattern
            proportions across all pattern elements, to the length of the pattern.
            </summary>
            <param name="counters">observed counters</param>
            <param name="pattern">expected pattern</param>
            <param name="maxIndividualVariance">The most any counter can differ before we give up</param>
            <returns>ratio of total variance between counters and pattern compared to total pattern size,
             where the ratio has been multiplied by 256. So, 0 means no variance (perfect match); 256 means
             the total variance between counters and patterns equals the pattern length, higher values mean
             even more variance</returns>
        </member>
        <member name="M:ZXing.OneD.OneDReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Attempts to decode a one-dimensional barcode format given a single row of
            an image.
            </summary>
            <param name="rowNumber">row number from top of the row</param>
            <param name="row">the black/white pixel data of the row</param>
            <param name="hints">decode hints</param>
            <returns>
              <see cref="T:ZXing.Result"/>containing encoded string and start/end of barcode
            </returns>
        </member>
        <member name="T:ZXing.OneD.PlesseyWriter">
            <summary>
            This object renders a Plessey code as a <see cref="T:ZXing.Common.BitMatrix"/>.
            </summary>
        </member>
        <member name="M:ZXing.OneD.PlesseyWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            Encode the contents following specified format.
            {@code width} and {@code height} are required size. This method may return bigger size
            {@code BitMatrix} when specified size is too small. The user can set both {@code width} and
            {@code height} to zero to get minimum size barcode. If negative value is set to {@code width}
            or {@code height}, {@code IllegalArgumentException} is thrown.
            </summary>
            <param name="contents"></param>
            <param name="format"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.PlesseyWriter.encode(System.String)">
            <summary>
            Encode the contents to byte array expression of one-dimensional barcode.
            Start code and end code should be included in result, and side margins should not be included.
            <returns>a {@code boolean[]} of horizontal pixels (false = white, true = black)</returns>
            </summary>
            <param name="contents"></param>
            <returns></returns>
        </member>
        <member name="T:ZXing.OneD.RSS.AbstractRSSReader">
            <summary>
            Superclass of <see cref="T:ZXing.OneD.OneDReader" /> implementations that read barcodes in the RSS family of formats.
            </summary>
        </member>
        <member name="M:ZXing.OneD.RSS.AbstractRSSReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.OneD.RSS.AbstractRSSReader"/> class.
            </summary>
        </member>
        <member name="M:ZXing.OneD.RSS.AbstractRSSReader.getDecodeFinderCounters">
            <summary>
            Gets the decode finder counters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.RSS.AbstractRSSReader.getDataCharacterCounters">
            <summary>
            Gets the data character counters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.RSS.AbstractRSSReader.getOddRoundingErrors">
            <summary>
            Gets the odd rounding errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.RSS.AbstractRSSReader.getEvenRoundingErrors">
            <summary>
            Gets the even rounding errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.RSS.AbstractRSSReader.getOddCounts">
            <summary>
            Gets the odd counts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.RSS.AbstractRSSReader.getEvenCounts">
            <summary>
            Gets the even counts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.RSS.AbstractRSSReader.parseFinderValue(System.Int32[],System.Int32[][],System.Int32@)">
            <summary>
            Parses the finder value.
            </summary>
            <param name="counters">The counters.</param>
            <param name="finderPatterns">The finder patterns.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.RSS.AbstractRSSReader.count(System.Int32[])">
            <summary>
            Counts the specified array.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.RSS.AbstractRSSReader.increment(System.Int32[],System.Single[])">
            <summary>
            Increments the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:ZXing.OneD.RSS.AbstractRSSReader.decrement(System.Int32[],System.Single[])">
            <summary>
            Decrements the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:ZXing.OneD.RSS.AbstractRSSReader.isFinderPattern(System.Int32[])">
            <summary>
            Determines whether [is finder pattern] [the specified counters].
            </summary>
            <param name="counters">The counters.</param>
            <returns>
              <c>true</c> if [is finder pattern] [the specified counters]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ZXing.OneD.RSS.DataCharacter">
            <summary>
            Encapsulates a since character value in an RSS barcode, including its checksum information.
            </summary>
        </member>
        <member name="P:ZXing.OneD.RSS.DataCharacter.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:ZXing.OneD.RSS.DataCharacter.ChecksumPortion">
            <summary>
            Gets the checksum portion.
            </summary>
        </member>
        <member name="M:ZXing.OneD.RSS.DataCharacter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.OneD.RSS.DataCharacter"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="checksumPortion">The checksum portion.</param>
        </member>
        <member name="M:ZXing.OneD.RSS.DataCharacter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:ZXing.OneD.RSS.DataCharacter.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZXing.OneD.RSS.DataCharacter.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.BitArrayBuilder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.AbstractExpandedDecoder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.Decoders.AbstractExpandedDecoder.getInformation">
            <summary>
            Gets the information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.Decoders.AbstractExpandedDecoder.parseInformation">
            <summary>
            Parses the information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.Decoders.AbstractExpandedDecoder.createDecoder(ZXing.Common.BitArray)">
            <summary>
            Creates the decoder.
            </summary>
            <param name="information">The information.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.AI013103decoder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.AI01320xDecoder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.AI01392xDecoder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.AI01393xDecoder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.AI013x0x1xDecoder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.AI013x0xDecoder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.AI01AndOtherAIs">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.AI01decoder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.AI01weightDecoder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.AnyAIDecoder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.BlockParsedResult">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.CurrentParsingState">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.DecodedChar">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.DecodedInformation">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.DecodedNumeric">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.DecodedObject">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.FieldParser">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.GeneralAppIdDecoder">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.ExpandedPair">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.ExpandedRow">
            <summary>
            One row of an RSS Expanded Stacked symbol, consisting of 1+ expanded pairs.
            </summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.ExpandedRow.IsReversed">
            <summary>
            Did this row of the image have to be reversed (mirrored) to recognize the pairs?
            </summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.ExpandedRow.Equals(System.Object)">
            <summary>
            Two rows are equal if they contain the same pairs in the same order.
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.RSSExpandedReader">
            <summary>
            <author>Pablo Orduña, University of Deusto (pablo.orduna@deusto.es)</author>
            <author>Eduardo Castillejo, University of Deusto (eduardo.castillejo@deusto.es)</author>
            </summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.RSSExpandedReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Attempts to decode a one-dimensional barcode format given a single row of
            an image.</p>
            </summary>
            <param name="rowNumber">row number from top of the row</param>
            <param name="row">the black/white pixel data of the row</param>
            <param name="hints">decode hints</param>
            <returns>
              <see cref="T:ZXing.Result"/>containing encoded string and start/end of barcode or null, if an error occurs or barcode cannot be found
            </returns>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.RSSExpandedReader.reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.FinderPattern">
            <summary>
            Encapsulates an RSS barcode finder pattern, including its start/end position and row.
            </summary>
        </member>
        <member name="P:ZXing.OneD.RSS.FinderPattern.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:ZXing.OneD.RSS.FinderPattern.StartEnd">
            <summary>
            Gets the start end.
            </summary>
        </member>
        <member name="P:ZXing.OneD.RSS.FinderPattern.ResultPoints">
            <summary>
            Gets the result points.
            </summary>
        </member>
        <member name="M:ZXing.OneD.RSS.FinderPattern.#ctor(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.OneD.RSS.FinderPattern"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="startEnd">The start end.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="rowNumber">The row number.</param>
        </member>
        <member name="M:ZXing.OneD.RSS.FinderPattern.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZXing.OneD.RSS.FinderPattern.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:ZXing.OneD.RSS.RSS14Reader">
            <summary>
            Decodes RSS-14, including truncated and stacked variants. See ISO/IEC 24724:2006.
            </summary>
        </member>
        <member name="M:ZXing.OneD.RSS.RSS14Reader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.OneD.RSS.RSS14Reader"/> class.
            </summary>
        </member>
        <member name="M:ZXing.OneD.RSS.RSS14Reader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Attempts to decode a one-dimensional barcode format given a single row of
            an image.</p>
            </summary>
            <param name="rowNumber">row number from top of the row</param>
            <param name="row">the black/white pixel data of the row</param>
            <param name="hints">decode hints</param>
            <returns>
              <see cref="T:ZXing.Result"/>containing encoded string and start/end of barcode or null, if an error occurs or barcode cannot be found
            </returns>
        </member>
        <member name="M:ZXing.OneD.RSS.RSS14Reader.reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:ZXing.OneD.RSS.RSSUtils">
            <summary>
            Adapted from listings in ISO/IEC 24724 Appendix B and Appendix G.
            </summary>
        </member>
        <member name="M:ZXing.OneD.RSS.RSSUtils.getRSSvalue(System.Int32[],System.Int32,System.Boolean)">
            <summary>
            Gets the RS svalue.
            </summary>
            <param name="widths">The widths.</param>
            <param name="maxWidth">Width of the max.</param>
            <param name="noNarrow">if set to <c>true</c> [no narrow].</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.OneD.UPCAReader">
            <summary>
              <p>Implements decoding of the UPC-A format.</p>
              <author>dswitkin@google.com (Daniel Switkin)</author>
              <author>Sean Owen</author>
            </summary>
        </member>
        <member name="M:ZXing.OneD.UPCAReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Int32[],System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Like decodeRow(int, BitArray, java.util.Map), but
            allows caller to inform method about where the UPC/EAN start pattern is
            found. This allows this to be computed once and reused across many implementations.</p>
            </summary>
            <param name="rowNumber"></param>
            <param name="row"></param>
            <param name="startGuardRange"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.UPCAReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Attempts to decode a one-dimensional barcode format given a single row of
            an image.</p>
            </summary>
            <param name="rowNumber">row number from top of the row</param>
            <param name="row">the black/white pixel data of the row</param>
            <param name="hints">decode hints</param>
            <returns>
              <see cref="T:ZXing.Result"/>containing encoded string and start/end of barcode or null, if an error occurs or barcode cannot be found
            </returns>
        </member>
        <member name="M:ZXing.OneD.UPCAReader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Decodes the specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="hints">The hints.</param>
            <returns></returns>
        </member>
        <member name="P:ZXing.OneD.UPCAReader.BarcodeFormat">
            <summary>
            Get the format of this decoder.
            <returns>The 1D format.</returns>
            </summary>
        </member>
        <member name="M:ZXing.OneD.UPCAReader.decodeMiddle(ZXing.Common.BitArray,System.Int32[],System.Text.StringBuilder)">
            <summary>
            Subclasses override this to decode the portion of a barcode between the start
            and end guard patterns.
            </summary>
            <param name="row">row of black/white values to search</param>
            <param name="startRange">start/end offset of start guard pattern</param>
            <param name="resultString"><see cref="T:System.Text.StringBuilder"/>to append decoded chars to</param>
            <returns>
            horizontal offset of first pixel after the "middle" that was decoded or -1 if decoding could not complete successfully
            </returns>
        </member>
        <member name="T:ZXing.OneD.UPCAWriter">
            <summary>
            This object renders a UPC-A code as a <see cref="T:ZXing.Common.BitMatrix"/>.
            <author>qwandor@google.com (Andrew Walbran)</author>
            </summary>
        </member>
        <member name="M:ZXing.OneD.UPCAWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32)">
            <summary>
            Encode a barcode using the default settings.
            </summary>
            <param name="contents">The contents to encode in the barcode</param>
            <param name="format">The barcode format to generate</param>
            <param name="width">The preferred width in pixels</param>
            <param name="height">The preferred height in pixels</param>
            <returns>
            The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)
            </returns>
        </member>
        <member name="M:ZXing.OneD.UPCAWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            </summary>
            <param name="contents">The contents to encode in the barcode</param>
            <param name="format">The barcode format to generate</param>
            <param name="width">The preferred width in pixels</param>
            <param name="height">The preferred height in pixels</param>
            <param name="hints">Additional parameters to supply to the encoder</param>
            <returns>
            The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)
            </returns>
        </member>
        <member name="T:ZXing.OneD.UPCEANExtension2Support">
            <summary>
            @see UPCEANExtension5Support
            </summary>
        </member>
        <member name="M:ZXing.OneD.UPCEANExtension2Support.parseExtensionString(System.String)">
            <summary>
            Parses the extension string.
            </summary>
            <param name="raw">raw content of extension</param>
            <returns>formatted interpretation of raw content as a {@link Map} mapping</returns>
        </member>
        <member name="T:ZXing.OneD.UPCEANExtension5Support">
            @see UPCEANExtension2Support
        </member>
        <member name="M:ZXing.OneD.UPCEANExtension5Support.parseExtensionString(System.String)">
            <summary>
            Parses the extension string.
            </summary>
            <param name="raw">raw content of extension</param>
            <returns>formatted interpretation of raw content as a {@link Map} mapping
            one {@link ResultMetadataType} to appropriate value, or {@code null} if not known</returns>
        </member>
        <member name="T:ZXing.OneD.UPCEANReader">
            <summary>
              <p>Encapsulates functionality and implementation that is common to UPC and EAN families
            of one-dimensional barcodes.</p>
              <author>dswitkin@google.com (Daniel Switkin)</author>
              <author>Sean Owen</author>
              <author>alasdair@google.com (Alasdair Mackintosh)</author>
            </summary>
        </member>
        <member name="F:ZXing.OneD.UPCEANReader.START_END_PATTERN">
            <summary>
            Start/end guard pattern.
            </summary>
        </member>
        <member name="F:ZXing.OneD.UPCEANReader.MIDDLE_PATTERN">
            <summary>
            Pattern marking the middle of a UPC/EAN pattern, separating the two halves.
            </summary>
        </member>
        <member name="F:ZXing.OneD.UPCEANReader.END_PATTERN">
            <summary>
            end guard pattern.
            </summary>
        </member>
        <member name="F:ZXing.OneD.UPCEANReader.L_PATTERNS">
            <summary>
            "Odd", or "L" patterns used to encode UPC/EAN digits.
            </summary>
        </member>
        <member name="F:ZXing.OneD.UPCEANReader.L_AND_G_PATTERNS">
            <summary>
            As above but also including the "even", or "G" patterns used to encode UPC/EAN digits.
            </summary>
        </member>
        <member name="M:ZXing.OneD.UPCEANReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.OneD.UPCEANReader"/> class.
            </summary>
        </member>
        <member name="M:ZXing.OneD.UPCEANReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Attempts to decode a one-dimensional barcode format given a single row of
            an image.</p>
            </summary>
            <param name="rowNumber">row number from top of the row</param>
            <param name="row">the black/white pixel data of the row</param>
            <param name="hints">decode hints</param>
            <returns>
              <see cref="T:ZXing.Result"/>containing encoded string and start/end of barcode or null, if an error occurs or barcode cannot be found
            </returns>
        </member>
        <member name="M:ZXing.OneD.UPCEANReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Int32[],System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Like <see cref="M:ZXing.OneD.UPCEANReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})"/>, but
            allows caller to inform method about where the UPC/EAN start pattern is
            found. This allows this to be computed once and reused across many implementations.</p>
            </summary>
            <param name="rowNumber">row index into the image</param>
            <param name="row">encoding of the row of the barcode image</param>
            <param name="startGuardRange">start/end column where the opening start pattern was found</param>
            <param name="hints">optional hints that influence decoding</param>
            <returns><see cref="T:ZXing.Result"/> encapsulating the result of decoding a barcode in the row</returns>
        </member>
        <member name="M:ZXing.OneD.UPCEANReader.checkChecksum(System.String)">
            <summary>
            </summary>
            <param name="s">string of digits to check</param>
            <returns>see <see cref="M:ZXing.OneD.UPCEANReader.checkStandardUPCEANChecksum(System.String)"/></returns>
        </member>
        <member name="M:ZXing.OneD.UPCEANReader.checkStandardUPCEANChecksum(System.String)">
            <summary>
            Computes the UPC/EAN checksum on a string of digits, and reports
            whether the checksum is correct or not.
            </summary>
            <param name="s">string of digits to check</param>
            <returns>true iff string of digits passes the UPC/EAN checksum algorithm</returns>
        </member>
        <member name="M:ZXing.OneD.UPCEANReader.decodeEnd(ZXing.Common.BitArray,System.Int32)">
            <summary>
            Decodes the end.
            </summary>
            <param name="row">The row.</param>
            <param name="endStart">The end start.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.UPCEANReader.findGuardPattern(ZXing.Common.BitArray,System.Int32,System.Boolean,System.Int32[],System.Int32[])">
            <summary>
            </summary>
            <param name="row">row of black/white values to search</param>
            <param name="rowOffset">position to start search</param>
            <param name="whiteFirst">if true, indicates that the pattern specifies white/black/white/...</param>
            pixel counts, otherwise, it is interpreted as black/white/black/...
            <param name="pattern">pattern of counts of number of black and white pixels that are being</param>
            searched for as a pattern
            <param name="counters">array of counters, as long as pattern, to re-use</param>
            <returns>start/end horizontal offset of guard pattern, as an array of two ints</returns>
        </member>
        <member name="M:ZXing.OneD.UPCEANReader.decodeDigit(ZXing.Common.BitArray,System.Int32[],System.Int32,System.Int32[][],System.Int32@)">
            <summary>
            Attempts to decode a single UPC/EAN-encoded digit.
            </summary>
            <param name="row">row of black/white values to decode</param>
            <param name="counters">the counts of runs of observed black/white/black/... values</param>
            <param name="rowOffset">horizontal offset to start decoding from</param>
            <param name="patterns">the set of patterns to use to decode -- sometimes different encodings</param>
            for the digits 0-9 are used, and this indicates the encodings for 0 to 9 that should
            be used
            <returns>horizontal offset of first pixel beyond the decoded digit</returns>
        </member>
        <member name="P:ZXing.OneD.UPCEANReader.BarcodeFormat">
            <summary>
            Get the format of this decoder.
            </summary>
            <returns>The 1D format.</returns>
        </member>
        <member name="M:ZXing.OneD.UPCEANReader.decodeMiddle(ZXing.Common.BitArray,System.Int32[],System.Text.StringBuilder)">
            <summary>
            Subclasses override this to decode the portion of a barcode between the start
            and end guard patterns.
            </summary>
            <param name="row">row of black/white values to search</param>
            <param name="startRange">start/end offset of start guard pattern</param>
            <param name="resultString"><see cref="T:System.Text.StringBuilder" />to append decoded chars to</param>
            <returns>horizontal offset of first pixel after the "middle" that was decoded or -1 if decoding could not complete successfully</returns>
        </member>
        <member name="T:ZXing.OneD.UPCEANWriter">
            <summary>
              <p>Encapsulates functionality and implementation that is common to UPC and EAN families
            of one-dimensional barcodes.</p>
              <author>aripollak@gmail.com (Ari Pollak)</author>
              <author>dsbnatut@gmail.com (Kazuki Nishiura)</author>
            </summary>
        </member>
        <member name="P:ZXing.OneD.UPCEANWriter.DefaultMargin">
            <summary>
            Gets the default margin.
            </summary>
        </member>
        <member name="T:ZXing.OneD.UPCEReader">
            <summary>
              <p>Implements decoding of the UPC-E format.</p>
              <p><a href="http://www.barcodeisland.com/upce.phtml">This</a>is a great reference for
            UPC-E information.</p>
              <author>Sean Owen</author>
            </summary>
        </member>
        <member name="F:ZXing.OneD.UPCEReader.MIDDLE_END_PATTERN">
            <summary>
            The pattern that marks the middle, and end, of a UPC-E pattern.
            There is no "second half" to a UPC-E barcode.
            </summary>
        </member>
        <member name="F:ZXing.OneD.UPCEReader.NUMSYS_AND_CHECK_DIGIT_PATTERNS">
            <summary>
            See L_AND_G_PATTERNS these values similarly represent patterns of
            even-odd parity encodings of digits that imply both the number system (0 or 1)
            used, and the check digit.
            </summary>
        </member>
        <member name="M:ZXing.OneD.UPCEReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.OneD.UPCEReader"/> class.
            </summary>
        </member>
        <member name="M:ZXing.OneD.UPCEReader.decodeMiddle(ZXing.Common.BitArray,System.Int32[],System.Text.StringBuilder)">
            <summary>
            Decodes the middle.
            </summary>
            <param name="row">The row.</param>
            <param name="startRange">The start range.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.UPCEReader.decodeEnd(ZXing.Common.BitArray,System.Int32)">
            <summary>
            Decodes the end.
            </summary>
            <param name="row">The row.</param>
            <param name="endStart">The end start.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.UPCEReader.checkChecksum(System.String)">
            <summary>
              <returns>see checkStandardUPCEANChecksum(String)</returns>
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.OneD.UPCEReader.determineNumSysAndCheckDigit(System.Text.StringBuilder,System.Int32)">
            <summary>
            Determines the num sys and check digit.
            </summary>
            <param name="resultString">The result string.</param>
            <param name="lgPatternFound">The lg pattern found.</param>
            <returns></returns>
        </member>
        <member name="P:ZXing.OneD.UPCEReader.BarcodeFormat">
            <summary>
            Get the format of this decoder.
            <returns>The 1D format.</returns>
            </summary>
        </member>
        <member name="M:ZXing.OneD.UPCEReader.convertUPCEtoUPCA(System.String)">
             <summary>
             Expands a UPC-E value back into its full, equivalent UPC-A code value.
            
             <param name="upce">UPC-E code as string of digits</param>
             <returns>equivalent UPC-A code as string of digits</returns>
             </summary>
        </member>
        <member name="T:ZXing.OneD.UPCEWriter">
            <summary>
            This object renders an UPC-E code as a {@link BitMatrix}.
            @author 0979097955s@gmail.com (RX)
            </summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.BarcodeMetadata">
            <summary>
            Metadata about a PDF417 Barcode
            </summary>
            <author>Guenther Grau</author>
        </member>
        <member name="T:ZXing.PDF417.Internal.BarcodeValue">
            <summary>
            A Barcode Value for the PDF417 barcode.  
            The scanner will iterate through the bitmatrix, 
            and given the different methods or iterations 
            will increment a given barcode value's confidence.
            
            When done, this will return the values of highest confidence.
            </summary>
            <author>Guenther Grau</author>
        </member>
        <member name="M:ZXing.PDF417.Internal.BarcodeValue.setValue(System.Int32)">
             <summary>
             Incremenets the Confidence for a given value. (Adds an occurance of a value)
            
             </summary>
             <param name="value">Value.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.BarcodeValue.getValue">
            <summary>
            Determines the maximum occurrence of a set value and returns all values which were set with this occurrence.
            </summary>
            <returns>an array of int, containing the values with the highest occurrence, or null, if no value was set.</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.BarcodeValue.getConfidence(System.Int32)">
            <summary>
            Returns the confience value for a given barcode value
            </summary>
            <param name="barcodeValue">Barcode value.</param>
        </member>
        <member name="T:ZXing.PDF417.Internal.BoundingBox">
            <summary>
            A Bounding Box helper class
            </summary>
            <author>Guenther Grau</author>
        </member>
        <member name="M:ZXing.PDF417.Internal.BoundingBox.Create(ZXing.Common.BitMatrix,ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.PDF417.Internal.BoundingBox"/> class.
            returns null if the corner points don't match up correctly
            </summary>
            <param name="image">The image.</param>
            <param name="topLeft">The top left.</param>
            <param name="bottomLeft">The bottom left.</param>
            <param name="topRight">The top right.</param>
            <param name="bottomRight">The bottom right.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.BoundingBox.Create(ZXing.PDF417.Internal.BoundingBox)">
            <summary>
            Creates the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.BoundingBox.#ctor(ZXing.Common.BitMatrix,ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.PDF417.Internal.BoundingBox"/> class.
            Will throw an exception if the corner points don't match up correctly
            </summary>
            <param name="image">Image.</param>
            <param name="topLeft">Top left.</param>
            <param name="topRight">Top right.</param>
            <param name="bottomLeft">Bottom left.</param>
            <param name="bottomRight">Bottom right.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.BoundingBox.merge(ZXing.PDF417.Internal.BoundingBox,ZXing.PDF417.Internal.BoundingBox)">
            <summary>
            Merge two Bounding Boxes, getting the left corners of left, and the right corners of right
            (Images should be the same)
            </summary>
            <param name="leftBox">Left.</param>
            <param name="rightBox">Right.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.BoundingBox.addMissingRows(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds the missing rows.
            </summary>
            <returns>The missing rows.</returns>
            <param name="missingStartRows">Missing start rows.</param>
            <param name="missingEndRows">Missing end rows.</param>
            <param name="isLeft">If set to <c>true</c> is left.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.BoundingBox.calculateMinMaxValues">
            <summary>
            Calculates the minimum and maximum X &amp; Y values based on the corner points.
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.BoundingBox.SetBottomRight(ZXing.ResultPoint)">
            <summary>
            If we adjust the width, set a new right corner coordinate and recalculate
            </summary>
            <param name="bottomRight">Bottom right.</param>
        </member>
        <member name="T:ZXing.PDF417.Internal.Codeword">
            <summary>
            A Codeword in the PDF417 barcode
            </summary>
            <author>Guenther Grau</author>
        </member>
        <member name="F:ZXing.PDF417.Internal.Codeword.BARCODE_ROW_UNKNOWN">
            <summary>
            Default value for the RowNumber (-1 being an invalid real number)
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Codeword.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.PDF417.Internal.Codeword"/> class.
            </summary>
            <param name="startX">Start x.</param>
            <param name="endX">End x.</param>
            <param name="bucket">Bucket.</param>
            <param name="value">Value.</param>
        </member>
        <member name="P:ZXing.PDF417.Internal.Codeword.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:ZXing.PDF417.Internal.Codeword.HasValidRowNumber">
            <summary>
            Gets a value indicating whether this instance has valid row number.
            </summary>
            <value><c>true</c> if this instance has valid row number; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ZXing.PDF417.Internal.Codeword.IsValidRowNumber(System.Int32)">
            <summary>
            Determines whether this instance is valid row number the specified rowNumber.
            </summary>
            <returns><c>true</c> if this instance is valid row number the specified rowNumber; otherwise, <c>false</c>.</returns>
            <param name="rowNumber">Row number.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.Codeword.setRowNumberAsRowIndicatorColumn">
            <summary>
            Sets the row number as the row's indicator column.
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Codeword.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ZXing.PDF417.Internal.Codeword"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ZXing.PDF417.Internal.Codeword"/>.</returns>
        </member>
        <member name="T:ZXing.PDF417.Internal.DecodedBitStreamParser">
             <summary>
             <p>This class contains the methods for decoding the PDF417 codewords.</p>
            
             <author>SITA Lab (kevin.osullivan@sita.aero)</author>
             </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.DecodedBitStreamParser.EXP900">
            <summary>
            Table containing values for the exponent of 900.
            This is used in the numeric compaction decode algorithm.
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.DecodedBitStreamParser.textCompaction(System.Int32[],System.Int32,System.Text.StringBuilder)">
             <summary>
             Text Compaction mode (see 5.4.1.5) permits all printable ASCII characters to be
             encoded, i.e. values 32 - 126 inclusive in accordance with ISO/IEC 646 (IRV), as
             well as selected control characters.
            
             <param name="codewords">The array of codewords (data + error)</param>
             <param name="codeIndex">The current index into the codeword array.</param>
             <param name="result">The decoded data is appended to the result.</param>
             <returns>The next index into the codeword array.</returns>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.DecodedBitStreamParser.decodeTextCompaction(System.Int32[],System.Int32[],System.Int32,System.Text.StringBuilder)">
             <summary>
             The Text Compaction mode includes all the printable ASCII characters
             (i.e. values from 32 to 126) and three ASCII control characters: HT or tab
             (ASCII value 9), LF or line feed (ASCII value 10), and CR or carriage
             return (ASCII value 13). The Text Compaction mode also includes various latch
             and shift characters which are used exclusively within the mode. The Text
             Compaction mode encodes up to 2 characters per codeword. The compaction rules
             for converting data into PDF417 codewords are defined in 5.4.2.2. The sub-mode
             switches are defined in 5.4.2.3.
            
             <param name="textCompactionData">The text compaction data.</param>
             <param name="byteCompactionData">The byte compaction data if there</param>
                                       was a mode shift.
             <param name="length">The size of the text compaction and byte compaction data.</param>
             <param name="result">The decoded data is appended to the result.</param>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.DecodedBitStreamParser.byteCompaction(System.Int32,System.Int32[],System.Text.Encoding,System.Int32,System.Text.StringBuilder)">
             <summary>
             Byte Compaction mode (see 5.4.3) permits all 256 possible 8-bit byte values to be encoded.
             This includes all ASCII characters value 0 to 127 inclusive and provides for international
             character set support.
            
             <param name="mode">The byte compaction mode i.e. 901 or 924</param>
             <param name="codewords">The array of codewords (data + error)</param>
             <param name="encoding">Currently active character encoding</param>
             <param name="codeIndex">The current index into the codeword array.</param>
             <param name="result">The decoded data is appended to the result.</param>
             <returns>The next index into the codeword array.</returns>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.DecodedBitStreamParser.numericCompaction(System.Int32[],System.Int32,System.Text.StringBuilder)">
             <summary>
             Numeric Compaction mode (see 5.4.4) permits efficient encoding of numeric data strings.
            
             <param name="codewords">The array of codewords (data + error)</param>
             <param name="codeIndex">The current index into the codeword array.</param>
             <param name="result">The decoded data is appended to the result.</param>
             <returns>The next index into the codeword array.</returns>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.DecodedBitStreamParser.decodeBase900toBase10(System.Int32[],System.Int32)">
            <summary>
            Convert a list of Numeric Compacted codewords from Base 900 to Base 10.
            EXAMPLE
            Encode the fifteen digit numeric string 000213298174000
            Prefix the numeric string with a 1 and set the initial value of
            t = 1 000 213 298 174 000
            Calculate codeword 0
            d0 = 1 000 213 298 174 000 mod 900 = 200
            
            t = 1 000 213 298 174 000 div 900 = 1 111 348 109 082
            Calculate codeword 1
            d1 = 1 111 348 109 082 mod 900 = 282
            
            t = 1 111 348 109 082 div 900 = 1 234 831 232
            Calculate codeword 2
            d2 = 1 234 831 232 mod 900 = 632
            
            t = 1 234 831 232 div 900 = 1 372 034
            Calculate codeword 3
            d3 = 1 372 034 mod 900 = 434
            
            t = 1 372 034 div 900 = 1 524
            Calculate codeword 4
            d4 = 1 524 mod 900 = 624
            
            t = 1 524 div 900 = 1
            Calculate codeword 5
            d5 = 1 mod 900 = 1
            t = 1 div 900 = 0
            Codeword sequence is: 1, 624, 434, 632, 282, 200
            
            Decode the above codewords involves
              1 x 900 power of 5 + 624 x 900 power of 4 + 434 x 900 power of 3 +
            632 x 900 power of 2 + 282 x 900 power of 1 + 200 x 900 power of 0 = 1000213298174000
            
            Remove leading 1 =>  Result is 000213298174000
            <param name="codewords">The array of codewords</param>
            <param name="count">The number of codewords</param>
            <returns>The decoded string representing the Numeric data.</returns>
            </summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.DetectionResult">
            <summary>
            
            </summary>
            <author>Guenther Grau</author>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResult.getDetectionResultColumns">
            <summary>
            Returns the DetectionResult Columns.  This does a fair bit of calculation, so call it sparingly.
            </summary>
            <returns>The detection result columns.</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResult.adjustIndicatorColumnRowNumbers(ZXing.PDF417.Internal.DetectionResultColumn)">
            <summary>
            Adjusts the indicator column row numbers.
            </summary>
            <param name="detectionResultColumn">Detection result column.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResult.adjustRowNumbers">
            <summary>
            return number of codewords which don't have a valid row number. Note that the count is not accurate as codewords .
            will be counted several times. It just serves as an indicator to see when we can stop adjusting row numbers
            </summary>
            <returns>The row numbers.</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResult.adjustRowNumbersByRow">
            <summary>
            Adjusts the row numbers by row.
            </summary>
            <returns>The row numbers by row.</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResult.adjustRowNumbersFromBothRI">
            <summary>
            Adjusts the row numbers from both Row Indicators
            </summary>
            <returns> zero </returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResult.adjustRowNumbersFromRRI">
            <summary>
            Adjusts the row numbers from Right Row Indicator.
            </summary>
            <returns>The unadjusted row count.</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResult.adjustRowNumbersFromLRI">
            <summary>
            Adjusts the row numbers from Left Row Indicator.
            </summary>
            <returns> Unadjusted row Count.</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResult.adjustRowNumberIfValid(System.Int32,System.Int32,ZXing.PDF417.Internal.Codeword)">
            <summary>
            Adjusts the row number if valid.
            </summary>
            <returns>The invalid rows</returns>
            <param name="rowIndicatorRowNumber">Row indicator row number.</param>
            <param name="invalidRowCounts">Invalid row counts.</param>
            <param name="codeword">Codeword.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResult.adjustRowNumbers(System.Int32,System.Int32,ZXing.PDF417.Internal.Codeword[])">
            <summary>
            Adjusts the row numbers.
            </summary>
            <param name="barcodeColumn">Barcode column.</param>
            <param name="codewordsRow">Codewords row.</param>
            <param name="codewords">Codewords.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResult.adjustRowNumber(ZXing.PDF417.Internal.Codeword,ZXing.PDF417.Internal.Codeword)">
            <summary>
            Adjusts the row number.
            </summary>
            <returns><c>true</c>, if row number was adjusted, <c>false</c> otherwise.</returns>
            <param name="codeword">Codeword.</param>
            <param name="otherCodeword">Other codeword.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ZXing.PDF417.Internal.DetectionResult"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ZXing.PDF417.Internal.DetectionResult"/>.</returns>
        </member>
        <member name="T:ZXing.PDF417.Internal.DetectionResultColumn">
            <summary>
            Represents a Column in the Detection Result
            </summary>
            <author>Guenther Grau</author>
        </member>
        <member name="F:ZXing.PDF417.Internal.DetectionResultColumn.MAX_NEARBY_DISTANCE">
            <summary>
            The maximum distance to search in the codeword array in both the positive and negative directions
            </summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.DetectionResultColumn.Box">
            <summary>
            The Bounding Box around the column (in the BitMatrix)
            </summary>
            <value>The box.</value>
        </member>
        <member name="P:ZXing.PDF417.Internal.DetectionResultColumn.Codewords">
            <summary>
            The Codewords the Box encodes for, offset by the Box minY.
            Remember to Access this ONLY through GetCodeword(imageRow) if you're accessing it in that manner.
            </summary>
            <value>The codewords.</value>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultColumn.#ctor(ZXing.PDF417.Internal.BoundingBox)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.PDF417.Internal.DetectionResultColumn"/> class.
            </summary>
            <param name="box">The Bounding Box around the column (in the BitMatrix)</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultColumn.IndexForRow(System.Int32)">
            <summary>
            Converts the Image's Row to the index in the Codewords array
            </summary>
            <returns>The Codeword Index.</returns>
            <param name="imageRow">Image row.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultColumn.RowForIndex(System.Int32)">
            <summary>
            Converts the Codeword array index into a Row in the Image (BitMatrix)
            </summary>
            <returns>The Image Row.</returns>
            <param name="codewordIndex">Codeword index.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultColumn.getCodeword(System.Int32)">
            <summary>
            Gets the codeword for a given row
            </summary>
            <returns>The codeword.</returns>
            <param name="imageRow">Image row.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultColumn.getCodewordNearby(System.Int32)">
            <summary>
            Gets the codeword closest to the specified row in the image
            </summary>
            <param name="imageRow">Image row.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultColumn.setCodeword(System.Int32,ZXing.PDF417.Internal.Codeword)">
            <summary>
            Sets the codeword for an image row
            </summary>
            <param name="imageRow">Image row.</param>
            <param name="codeword">Codeword.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultColumn.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ZXing.PDF417.Internal.DetectionResultColumn"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ZXing.PDF417.Internal.DetectionResultColumn"/>.</returns>
        </member>
        <member name="T:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn">
            <summary>
            Represents a Column in the Detection Result
            </summary>
            <author>Guenther Grau</author>
        </member>
        <member name="P:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn.IsLeft">
            <summary>
            Gets or sets a value indicating whether this instance is the left indicator
            </summary>
            <value><c>true</c> if this instance is left; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn.#ctor(ZXing.PDF417.Internal.BoundingBox,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn"/> class.
            </summary>
            <param name="box">Box.</param>
            <param name="isLeft">If set to <c>true</c> is left.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn.setRowNumbers">
            <summary>
            Sets the Row Numbers as Inidicator Columns
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn.adjustCompleteIndicatorColumnRowNumbers(ZXing.PDF417.Internal.BarcodeMetadata)">
            <summary>
            TODO implement properly
            TODO maybe we should add missing codewords to store the correct row number to make
            finding row numbers for other columns easier
            use row height count to make detection of invalid row numbers more reliable
            </summary>
            <returns>The indicator column row numbers.</returns>
            <param name="metadata">Metadata.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn.getRowHeights">
            <summary>
            Gets the row heights.
            </summary>
            <returns>The row heights.</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn.adjustIncompleteIndicatorColumnRowNumbers(ZXing.PDF417.Internal.BarcodeMetadata)">
            <summary>
            Adjusts the in omplete indicator column row numbers.
            </summary>
            <param name="metadata">Metadata.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn.getBarcodeMetadata">
            <summary>
            Gets the barcode metadata.
            </summary>
            <returns>The barcode metadata.</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn.removeIncorrectCodewords(ZXing.PDF417.Internal.Codeword[],ZXing.PDF417.Internal.BarcodeMetadata)">
            <summary>
            Prune the codewords which do not match the metadata
            TODO Maybe we should keep the incorrect codewords for the start and end positions?
            </summary>
            <param name="codewords">Codewords.</param>
            <param name="metadata">Metadata.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn"/>.</returns>
        </member>
        <member name="T:ZXing.PDF417.Internal.EC.ErrorCorrection">
            <summary>
            <p>PDF417 error correction implementation.</p>
            <p>This <a href="http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction#Example">example</a>
            is quite useful in understanding the algorithm.</p>
            <author>Sean Owen</author>
            <see cref="T:ZXing.Common.ReedSolomon.ReedSolomonDecoder" />
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ErrorCorrection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.PDF417.Internal.EC.ErrorCorrection"/> class.
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ErrorCorrection.decode(System.Int32[],System.Int32,System.Int32[],System.Int32@)">
            <summary>
            Decodes the specified received.
            </summary>
            <param name="received">received codewords</param>
            <param name="numECCodewords">number of those codewords used for EC</param>
            <param name="erasures">location of erasures</param>
            <param name="errorLocationsCount">The error locations count.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ErrorCorrection.runEuclideanAlgorithm(ZXing.PDF417.Internal.EC.ModulusPoly,ZXing.PDF417.Internal.EC.ModulusPoly,System.Int32)">
            <summary>
            Runs the euclidean algorithm (Greatest Common Divisor) until r's degree is less than R/2
            </summary>
            <returns>The euclidean algorithm.</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ErrorCorrection.findErrorLocations(ZXing.PDF417.Internal.EC.ModulusPoly)">
            <summary>
            Finds the error locations as a direct application of Chien's search
            </summary>
            <returns>The error locations.</returns>
            <param name="errorLocator">Error locator.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ErrorCorrection.findErrorMagnitudes(ZXing.PDF417.Internal.EC.ModulusPoly,ZXing.PDF417.Internal.EC.ModulusPoly,System.Int32[])">
            <summary>
            Finds the error magnitudes by directly applying Forney's Formula
            </summary>
            <returns>The error magnitudes.</returns>
            <param name="errorEvaluator">Error evaluator.</param>
            <param name="errorLocator">Error locator.</param>
            <param name="errorLocations">Error locations.</param>
        </member>
        <member name="T:ZXing.PDF417.Internal.EC.ModulusGF">
            <summary>
            <p>A field based on powers of a generator integer, modulo some modulus.</p>
            <see cref="T:ZXing.Common.ReedSolomon.GenericGFPoly"/>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="T:ZXing.PDF417.Internal.EC.ModulusPoly">
            <summary>
            <see cref="T:ZXing.Common.ReedSolomon.GenericGFPoly"/>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:ZXing.PDF417.Internal.EC.ModulusPoly.Coefficients">
            <summary>
            Gets the coefficients.
            </summary>
            <value>The coefficients.</value>
        </member>
        <member name="P:ZXing.PDF417.Internal.EC.ModulusPoly.Degree">
            <summary>
            degree of this polynomial
            </summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.EC.ModulusPoly.isZero">
            <summary>
            Gets a value indicating whether this instance is zero.
            </summary>
            <value>true if this polynomial is the monomial "0"
            </value>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ModulusPoly.getCoefficient(System.Int32)">
            <summary>
            coefficient of x^degree term in this polynomial
            </summary>
            <param name="degree">The degree.</param>
            <returns>coefficient of x^degree term in this polynomial</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ModulusPoly.evaluateAt(System.Int32)">
            <summary>
            evaluation of this polynomial at a given point
            </summary>
            <param name="a">A.</param>
            <returns>evaluation of this polynomial at a given point</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ModulusPoly.add(ZXing.PDF417.Internal.EC.ModulusPoly)">
            <summary>
            Adds another Modulus
            </summary>
            <param name="other">Other.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ModulusPoly.subtract(ZXing.PDF417.Internal.EC.ModulusPoly)">
            <summary>
            Subtract another Modulus
            </summary>
            <param name="other">Other.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ModulusPoly.multiply(ZXing.PDF417.Internal.EC.ModulusPoly)">
            <summary>
            Multiply by another Modulus
            </summary>
            <param name="other">Other.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ModulusPoly.getNegative">
            <summary>
            Returns a Negative version of this instance
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ModulusPoly.multiply(System.Int32)">
            <summary>
            Multiply by a Scalar.
            </summary>
            <param name="scalar">Scalar.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ModulusPoly.multiplyByMonomial(System.Int32,System.Int32)">
            <summary>
            Multiplies by a Monomial
            </summary>
            <returns>The by monomial.</returns>
            <param name="degree">Degree.</param>
            <param name="coefficient">Coefficient.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.ModulusPoly.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ZXing.PDF417.Internal.EC.ModulusPoly"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ZXing.PDF417.Internal.EC.ModulusPoly"/>.</returns>
        </member>
        <member name="T:ZXing.PDF417.Internal.PDF417CodewordDecoder">
            <summary>
            
            </summary>
            <author>Guenther Grau</author>
            <author>creatale GmbH (christoph.schulz@creatale.de)</author>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417CodewordDecoder.RATIOS_TABLE">
            <summary>
            The ratios table
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417CodewordDecoder.#cctor">
            <summary>
            Initializes the <see cref="T:ZXing.PDF417.Internal.PDF417CodewordDecoder"/> class &amp; Pre-computes the symbol ratio table.
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417CodewordDecoder.getDecodedValue(System.Int32[])">
            <summary>
            Gets the decoded value.
            </summary>
            <returns>The decoded value.</returns>
            <param name="moduleBitCount">Module bit count.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417CodewordDecoder.sampleBitCounts(System.Int32[])">
            <summary>
            Samples the bit counts.
            </summary>
            <returns>The bit counts.</returns>
            <param name="moduleBitCount">Module bit count.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417CodewordDecoder.getDecodedCodewordValue(System.Int32[])">
            <summary>
            Gets the decoded codeword value.
            </summary>
            <returns>The decoded codeword value.</returns>
            <param name="moduleBitCount">Module bit count.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417CodewordDecoder.getBitValue(System.Int32[])">
            <summary>
            Gets the bit value.
            </summary>
            <returns>The bit value.</returns>
            <param name="moduleBitCount">Module bit count.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417CodewordDecoder.getClosestDecodedValue(System.Int32[])">
            <summary>
            Gets the closest decoded value.
            </summary>
            <returns>The closest decoded value.</returns>
            <param name="moduleBitCount">Module bit count.</param>
        </member>
        <member name="T:ZXing.PDF417.Internal.PDF417ScanningDecoder">
            <summary>
            
            </summary>
            <author>Guenther Grau</author>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.decode(ZXing.Common.BitMatrix,ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint,System.Int32,System.Int32)">
            <summary>
            Decode the specified image, imageTopLeft, imageBottomLeft, imageTopRight, imageBottomRight, minCodewordWidth
            and maxCodewordWidth.
            TODO: don't pass in minCodewordWidth and maxCodewordWidth, pass in barcode columns for start and stop pattern
            columns. That way width can be deducted from the pattern column.
            This approach also allows to detect more details about the barcode, e.g. if a bar type (white or black) is wider 
            than it should be. This can happen if the scanner used a bad blackpoint.
            </summary>
            <param name="image">Image.</param>
            <param name="imageTopLeft">Image top left.</param>
            <param name="imageBottomLeft">Image bottom left.</param>
            <param name="imageTopRight">Image top right.</param>
            <param name="imageBottomRight">Image bottom right.</param>
            <param name="minCodewordWidth">Minimum codeword width.</param>
            <param name="maxCodewordWidth">Max codeword width.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.merge(ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn,ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn)">
            <summary>
            Merge the specified leftRowIndicatorColumn and rightRowIndicatorColumn.
            </summary>
            <param name="leftRowIndicatorColumn">Left row indicator column.</param>
            <param name="rightRowIndicatorColumn">Right row indicator column.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.adjustBoundingBox(ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn)">
            <summary>
            Adjusts the bounding box.
            </summary>
            <returns>The bounding box.</returns>
            <param name="rowIndicatorColumn">Row indicator column.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.getBarcodeMetadata(ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn,ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn)">
            <summary>
            Gets the barcode metadata.
            </summary>
            <returns>The barcode metadata.</returns>
            <param name="leftRowIndicatorColumn">Left row indicator column.</param>
            <param name="rightRowIndicatorColumn">Right row indicator column.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.getRowIndicatorColumn(ZXing.Common.BitMatrix,ZXing.PDF417.Internal.BoundingBox,ZXing.ResultPoint,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Gets the row indicator column.
            </summary>
            <returns>The row indicator column.</returns>
            <param name="image">Image.</param>
            <param name="boundingBox">Bounding box.</param>
            <param name="startPoint">Start point.</param>
            <param name="leftToRight">If set to <c>true</c> left to right.</param>
            <param name="minCodewordWidth">Minimum codeword width.</param>
            <param name="maxCodewordWidth">Max codeword width.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.adjustCodewordCount(ZXing.PDF417.Internal.DetectionResult,ZXing.PDF417.Internal.BarcodeValue[][])">
            <summary>
            Adjusts the codeword count.
            </summary>
            <param name="detectionResult">Detection result.</param>
            <param name="barcodeMatrix">Barcode matrix.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.createDecoderResult(ZXing.PDF417.Internal.DetectionResult)">
            <summary>
            Creates the decoder result.
            </summary>
            <returns>The decoder result.</returns>
            <param name="detectionResult">Detection result.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.createDecoderResultFromAmbiguousValues(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[][])">
            <summary>
            This method deals with the fact, that the decoding process doesn't always yield a single most likely value. The
            current error correction implementation doesn't deal with erasures very well, so it's better to provide a value
            for these ambiguous codewords instead of treating it as an erasure. The problem is that we don't know which of
            the ambiguous values to choose. We try decode using the first value, and if that fails, we use another of the
            ambiguous values and try to decode again. This usually only happens on very hard to read and decode barcodes,
            so decoding the normal barcodes is not affected by this.
            </summary>
            <returns>The decoder result from ambiguous values.</returns>
            <param name="ecLevel">Ec level.</param>
            <param name="codewords">Codewords.</param>
            <param name="erasureArray">contains the indexes of erasures.</param>
            <param name="ambiguousIndexes">array with the indexes that have more than one most likely value.</param>
            <param name="ambiguousIndexValues">two dimensional array that contains the ambiguous values. The first dimension must
            be the same Length as the ambiguousIndexes array.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.createBarcodeMatrix(ZXing.PDF417.Internal.DetectionResult)">
            <summary>
            Creates the barcode matrix.
            </summary>
            <returns>The barcode matrix.</returns>
            <param name="detectionResult">Detection result.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.isValidBarcodeColumn(ZXing.PDF417.Internal.DetectionResult,System.Int32)">
            <summary>
            Tests to see if the Barcode Column is Valid
            </summary>
            <returns><c>true</c>, if barcode column is valid, <c>false</c> otherwise.</returns>
            <param name="detectionResult">Detection result.</param>
            <param name="barcodeColumn">Barcode column.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.getStartColumn(ZXing.PDF417.Internal.DetectionResult,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the start column.
            </summary>
            <returns>The start column.</returns>
            <param name="detectionResult">Detection result.</param>
            <param name="barcodeColumn">Barcode column.</param>
            <param name="imageRow">Image row.</param>
            <param name="leftToRight">If set to <c>true</c> left to right.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.detectCodeword(ZXing.Common.BitMatrix,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Detects the codeword.
            </summary>
            <returns>The codeword.</returns>
            <param name="image">Image.</param>
            <param name="minColumn">Minimum column.</param>
            <param name="maxColumn">Max column.</param>
            <param name="leftToRight">If set to <c>true</c> left to right.</param>
            <param name="startColumn">Start column.</param>
            <param name="imageRow">Image row.</param>
            <param name="minCodewordWidth">Minimum codeword width.</param>
            <param name="maxCodewordWidth">Max codeword width.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.getModuleBitCount(ZXing.Common.BitMatrix,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Gets the module bit count.
            </summary>
            <returns>The module bit count.</returns>
            <param name="image">Image.</param>
            <param name="minColumn">Minimum column.</param>
            <param name="maxColumn">Max column.</param>
            <param name="leftToRight">If set to <c>true</c> left to right.</param>
            <param name="startColumn">Start column.</param>
            <param name="imageRow">Image row.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.getNumberOfECCodeWords(System.Int32)">
            <summary>
            Gets the number of EC code words.
            </summary>
            <returns>The number of EC code words.</returns>
            <param name="barcodeECLevel">Barcode EC level.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.adjustCodewordStartColumn(ZXing.Common.BitMatrix,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Adjusts the codeword start column.
            </summary>
            <returns>The codeword start column.</returns>
            <param name="image">Image.</param>
            <param name="minColumn">Minimum column.</param>
            <param name="maxColumn">Max column.</param>
            <param name="leftToRight">If set to <c>true</c> left to right.</param>
            <param name="codewordStartColumn">Codeword start column.</param>
            <param name="imageRow">Image row.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.checkCodewordSkew(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks the codeword for any skew.
            </summary>
            <returns><c>true</c>, if codeword is within the skew, <c>false</c> otherwise.</returns>
            <param name="codewordSize">Codeword size.</param>
            <param name="minCodewordWidth">Minimum codeword width.</param>
            <param name="maxCodewordWidth">Max codeword width.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.decodeCodewords(System.Int32[],System.Int32,System.Int32[])">
            <summary>
            Decodes the codewords.
            </summary>
            <returns>The codewords.</returns>
            <param name="codewords">Codewords.</param>
            <param name="ecLevel">Ec level.</param>
            <param name="erasures">Erasures.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.correctErrors(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Given data and error-correction codewords received, possibly corrupted by errors, attempts to
            correct the errors in-place.
            </summary>
            <returns>The errors.</returns>
            <param name="codewords">data and error correction codewords.</param>
            <param name="erasures">positions of any known erasures.</param>
            <param name="numECCodewords">number of error correction codewords that are available in codewords.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.verifyCodewordCount(System.Int32[],System.Int32)">
            <summary>
            Verifies that all is well with the the codeword array.
            </summary>
            <param name="codewords">Codewords.</param>
            <param name="numECCodewords">Number EC codewords.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.getBitCountForCodeword(System.Int32)">
            <summary>
            Gets the bit count for codeword.
            </summary>
            <returns>The bit count for codeword.</returns>
            <param name="codeword">Codeword.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.getCodewordBucketNumber(System.Int32)">
            <summary>
            Gets the codeword bucket number.
            </summary>
            <returns>The codeword bucket number.</returns>
            <param name="codeword">Codeword.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.getCodewordBucketNumber(System.Int32[])">
            <summary>
            Gets the codeword bucket number.
            </summary>
            <returns>The codeword bucket number.</returns>
            <param name="moduleBitCount">Module bit count.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ScanningDecoder.ToString(ZXing.PDF417.Internal.BarcodeValue[][])">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the <see cref="T:ZXing.PDF417.Internal.BarcodeValue"/> jagged array.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the <see cref="T:ZXing.PDF417.Internal.BarcodeValue"/> jagged array.</returns>
            <param name="barcodeMatrix">Barcode matrix as a jagged array.</param>
        </member>
        <member name="T:ZXing.PDF417.Internal.Detector">
             <summary>
             <p>Encapsulates logic that can detect a PDF417 Code in an image, even if the
             PDF417 Code is rotated or skewed, or partially obscured.</p>
            
             <author>SITA Lab (kevin.osullivan@sita.aero)</author>
             <author>dswitkin@google.com (Daniel Switkin)</author>
             <author> Guenther Grau</author>
             </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.Detector.START_PATTERN">
            <summary>
            B S B S B S B S Bar/Space pattern
            11111111 0 1 0 1 0 1 000.
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.Detector.STOP_PATTERN">
            <summary>
            1111111 0 1 000 1 0 1 00 1
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.Detector.SKIPPED_ROW_COUNT_MAX">
            <summary>
            if we set the value too low, then we don't detect the correct height of the bar if the start patterns are damaged.
            if we set the value too high, then we might detect the start pattern from a neighbor barcode.
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.Detector.ROW_STEP">
            <summary>
            A PDF471 barcode should have at least 3 rows, with each row being >= 3 times the module width. Therefore it should be at least
            9 pixels tall. To be conservative, we use about half the size to ensure we don't miss it.
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Detector.detect(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object},System.Boolean)">
            <summary>
              <p>Detects a PDF417 Code in an image. Only checks 0 and 180 degree rotations.</p>
            </summary>
            <param name="image">barcode image to decode</param>
            <param name="hints">optional hints to detector</param>
            <param name="multiple">if true, then the image is searched for multiple codes. If false, then at most one code will be found and returned</param>
            <returns>
              <see cref="T:ZXing.PDF417.Internal.PDF417DetectorResult"/> encapsulating results of detecting a PDF417 code
            </returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.Detector.detect(System.Boolean,ZXing.Common.BitMatrix)">
            <summary>
            Detects PDF417 codes in an image. Only checks 0 degree rotation (so rotate the matrix and check again outside of this method)
            </summary>
            <param name="multiple">multiple if true, then the image is searched for multiple codes. If false, then at most one code will be found and returned.</param>
            <param name="bitMatrix">bit matrix to detect barcodes in.</param>
            <returns>List of ResultPoint arrays containing the coordinates of found barcodes</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.Detector.findVertices(ZXing.Common.BitMatrix,System.Int32,System.Int32)">
            <summary>
            Locate the vertices and the codewords area of a black blob using the Start and Stop patterns as locators.
            </summary>
            <param name="matrix">Matrix.</param>
            <param name="startRow">Start row.</param>
            <param name="startColumn">Start column.</param>
            <returns> an array containing the vertices:
                      vertices[0] x, y top left barcode
                      vertices[1] x, y bottom left barcode
                      vertices[2] x, y top right barcode
                      vertices[3] x, y bottom right barcode
                      vertices[4] x, y top left codeword area
                      vertices[5] x, y bottom left codeword area
                      vertices[6] x, y top right codeword area
                      vertices[7] x, y bottom right codeword area
            </returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.Detector.copyToResult(ZXing.ResultPoint[],ZXing.ResultPoint[],System.Int32[])">
            <summary>
            Copies the temp data to the final result
            </summary>
            <param name="result">Result.</param>
            <param name="tmpResult">Temp result.</param>
            <param name="destinationIndexes">Destination indexes.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.Detector.findRowsWithPattern(ZXing.Common.BitMatrix,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Finds the rows with the given pattern.
            </summary>
            <returns>The rows with pattern.</returns>
            <param name="matrix">Matrix.</param>
            <param name="height">Height.</param>
            <param name="width">Width.</param>
            <param name="startRow">Start row.</param>
            <param name="startColumn">Start column.</param>
            <param name="pattern">Pattern.</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.Detector.findGuardPattern(ZXing.Common.BitMatrix,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32[],System.Int32[])">
            <summary>
            Finds the guard pattern.  Uses System.Linq.Enumerable.Repeat to fill in counters.  This might be a performance issue?
            </summary>
            <returns>start/end horizontal offset of guard pattern, as an array of two ints.</returns>
            <param name="matrix">matrix row of black/white values to search</param>
            <param name="column">column x position to start search.</param>
            <param name="row">row y position to start search.</param>
            <param name="width">width the number of pixels to search on this row.</param>
            <param name="whiteFirst">If set to <c>true</c> search the white patterns first.</param>
            <param name="pattern">pattern of counts of number of black and white pixels that are being searched for as a pattern.</param>
            <param name="counters">counters array of counters, as long as pattern, to re-use .</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.Detector.patternMatchVariance(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Determines how closely a set of observed counts of runs of black/white.
            values matches a given target pattern. This is reported as the ratio of
            the total variance from the expected pattern proportions across all
            pattern elements, to the length of the pattern.
            </summary>
            <returns>
            ratio of total variance between counters and pattern compared to
            total pattern size, where the ratio has been multiplied by 256.
            So, 0 means no variance (perfect match); 256 means the total
            variance between counters and patterns equals the pattern length,
            higher values mean even more variance
            </returns>
            <param name="counters">observed counters.</param>
            <param name="pattern">expected pattern.</param>
            <param name="maxIndividualVariance">The most any counter can differ before we give up.</param>
        </member>
        <member name="T:ZXing.PDF417.Internal.PDF417DetectorResult">
            <summary>
            PDF 417 Detector Result class.  Skipped private backing stores.
            <author>Guenther Grau</author> 
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417DetectorResult.#ctor(ZXing.Common.BitMatrix,System.Collections.Generic.List{ZXing.ResultPoint[]})">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.PDF417.Internal.PDF417DetectorResult"/> class.
            </summary>
            <param name="bits">Bits.</param>
            <param name="points">Points.</param>
        </member>
        <member name="T:ZXing.PDF417.Internal.BarcodeMatrix">
             <summary>
             Holds all of the information for a barcode in a format where it can be easily accessible
            
             <author>Jacob Haynes</author>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.BarcodeMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            <param name="height">the height of the matrix (Rows)</param>
            <param name="width">the width of the matrix (Cols)</param>
            </summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.BarcodeRow">
            <summary>
            <author>Jacob Haynes</author>
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.BarcodeRow.#ctor(System.Int32)">
            <summary>
            Creates a Barcode row of the width
            </summary>
            <param name="width">The width.</param>
        </member>
        <member name="P:ZXing.PDF417.Internal.BarcodeRow.Item(System.Int32)">
             <summary>
             Sets a specific location in the bar
            
             <param name="x">The location in the bar</param>
             <param name="value">Black if true, white if false;</param>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.BarcodeRow.set(System.Int32,System.Boolean)">
             <summary>
             Sets a specific location in the bar
            
             <param name="x">The location in the bar</param>
             <param name="black">Black if true, white if false;</param>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.BarcodeRow.addBar(System.Boolean,System.Int32)">
            <summary>
            <param name="black">A boolean which is true if the bar black false if it is white</param>
            <param name="width">How many spots wide the bar is.</param>
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.BarcodeRow.getScaledRow(System.Int32)">
             <summary>
             This function scales the row
            
             <param name="scale">How much you want the image to be scaled, must be greater than or equal to 1.</param>
             <returns>the scaled row</returns>
             </summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Compaction">
            <summary>
            Represents possible PDF417 barcode compaction types.
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.Compaction.AUTO">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.Compaction.TEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.Compaction.BYTE">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.Compaction.NUMERIC">
            <summary>
            
            </summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Dimensions">
            <summary>
            Data object to specify the minimum and maximum number of rows and columns for a PDF417 barcode.
            @author qwandor@google.com (Andrew Walbran)
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Dimensions.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.PDF417.Internal.Dimensions"/> class.
            </summary>
            <param name="minCols">The min cols.</param>
            <param name="maxCols">The max cols.</param>
            <param name="minRows">The min rows.</param>
            <param name="maxRows">The max rows.</param>
        </member>
        <member name="P:ZXing.PDF417.Internal.Dimensions.MinCols">
            <summary>
            Gets the min cols.
            </summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Dimensions.MaxCols">
            <summary>
            Gets the max cols.
            </summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Dimensions.MinRows">
            <summary>
            Gets the min rows.
            </summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Dimensions.MaxRows">
            <summary>
            Gets the max rows.
            </summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.PDF417">
            <summary>
            Top-level class for the logic part of the PDF417 implementation.
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417.START_PATTERN">
            <summary>
            The start pattern (17 bits)
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417.STOP_PATTERN">
            <summary>
            The stop pattern (18 bits)
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417.CODEWORD_TABLE">
            <summary>
            The codeword table from the Annex A of ISO/IEC 15438:2001(E).
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417.calculateNumberOfRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the necessary number of rows as described in annex Q of ISO/IEC 15438:2001(E).
            </summary>
            <param name="m">the number of source codewords prior to the additional of the Symbol Length</param>
                     Descriptor and any pad codewords
            <param name="k">the number of error correction codewords</param>
            <param name="c">the number of columns in the symbol in the data region (excluding start, stop and</param>
                     row indicator codewords)
            <returns>the number of rows in the symbol (r)</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417.getNumberOfPadCodewords(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the number of pad codewords as described in 4.9.2 of ISO/IEC 15438:2001(E).
            </summary>
            <param name="m">the number of source codewords prior to the additional of the Symbol Length</param>
                     Descriptor and any pad codewords
            <param name="k">the number of error correction codewords</param>
            <param name="c">the number of columns in the symbol in the data region (excluding start, stop and</param>
                     row indicator codewords)
            <param name="r">the number of rows in the symbol</param>
            <returns>the number of pad codewords</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417.generateBarcodeLogic(System.String,System.Int32)">
            <summary>
            Generates the barcode logic.
            </summary>
            <param name="msg">the message to encode</param>
            <param name="errorCorrectionLevel">PDF417 error correction level to use</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417.determineDimensions(System.Int32,System.Int32)">
            <summary>
            Determine optimal nr of columns and rows for the specified number of
            codewords.
            </summary>
            <param name="sourceCodeWords">number of code words</param>
            <param name="errorCorrectionCodeWords">number of error correction code words</param>
            <returns>dimension object containing cols as width and rows as height</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417.setDimensions(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets max/min row/col values
            </summary>
            <param name="maxCols">maximum allowed columns</param>
            <param name="minCols">minimum allowed columns</param>
            <param name="maxRows">maximum allowed rows</param>
            <param name="minRows">minimum allowed rows</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417.setCompaction(ZXing.PDF417.Internal.Compaction)">
            <summary>
            Sets compaction to values stored in <see cref="T:ZXing.PDF417.Internal.Compaction"/>enum
            </summary>
            <param name="compaction">compaction mode to use</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417.setCompact(System.Boolean)">
            <summary>
            Sets compact to be true or false
            </summary>
            <param name="compact">if true, enables compaction</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417.setEncoding(System.String)">
            <summary>
            Sets output encoding.
            </summary>
            <param name="encodingname">sets character encoding to use</param>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417.setDisableEci(System.Boolean)">
            <summary>
            Sets the disable eci.
            </summary>
            <param name="disabled">if set to <c>true</c> don't add an ECI segment for different encodings than default.</param>
        </member>
        <member name="T:ZXing.PDF417.Internal.PDF417ErrorCorrection">
            <summary>
            PDF417 error correction code following the algorithm described in ISO/IEC 15438:2001(E) in
            chapter 4.10.
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417ErrorCorrection.EC_COEFFICIENTS">
            <summary>
            Tables of coefficients for calculating error correction words
            (see annex F, ISO/IEC 15438:2001(E))
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ErrorCorrection.getErrorCorrectionCodewordCount(System.Int32)">
            <summary>
            Determines the number of error correction codewords for a specified error correction
            level.
            </summary>
            <param name="errorCorrectionLevel">the error correction level (0-8)</param>
            <returns>the number of codewords generated for error correction</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ErrorCorrection.getRecommendedMinimumErrorCorrectionLevel(System.Int32)">
            <summary>
            Returns the recommended minimum error correction level as described in annex E of
            ISO/IEC 15438:2001(E).
            </summary>
            <param name="n">the number of data codewords</param>
            <returns>the recommended minimum error correction level</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417ErrorCorrection.generateErrorCorrection(System.String,System.Int32)">
            <summary>
            Generates the error correction codewords according to 4.10 in ISO/IEC 15438:2001(E).
            </summary>
            <param name="dataCodewords">the data codewords</param>
            <param name="errorCorrectionLevel">the error correction level (0-8)</param>
            <returns>the String representing the error correction codewords</returns>
        </member>
        <member name="T:ZXing.PDF417.Internal.PDF417ErrorCorrectionLevel">
            <summary>
            defines the level of the error correction / count of error correction codewords
            </summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.PDF417HighLevelEncoder">
            <summary>
            PDF417 high-level encoder following the algorithm described in ISO/IEC 15438:2001(E) in
            annex P.
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.TEXT_COMPACTION">
            <summary>
            code for Text compaction
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.BYTE_COMPACTION">
            <summary>
            code for Byte compaction
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.NUMERIC_COMPACTION">
            <summary>
            code for Numeric compaction
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.SUBMODE_ALPHA">
            <summary>
            Text compaction submode Alpha
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.SUBMODE_LOWER">
            <summary>
            Text compaction submode Lower
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.SUBMODE_MIXED">
            <summary>
            Text compaction submode Mixed
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.SUBMODE_PUNCTUATION">
            <summary>
            Text compaction submode Punctuation
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.LATCH_TO_TEXT">
            <summary>
            mode latch to Text Compaction mode
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.LATCH_TO_BYTE_PADDED">
            <summary>
            mode latch to Byte Compaction mode (number of characters NOT a multiple of 6)
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.LATCH_TO_NUMERIC">
            <summary>
            mode latch to Numeric Compaction mode
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.SHIFT_TO_BYTE">
            <summary>
            mode shift to Byte Compaction mode
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.LATCH_TO_BYTE">
            <summary>
            mode latch to Byte Compaction mode (number of characters a multiple of 6)
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.ECI_USER_DEFINED">
            <summary>
            identifier for a user defined Extended Channel Interpretation (ECI)
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.ECI_GENERAL_PURPOSE">
            <summary>
            identifier for a general purpose ECO format
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.ECI_CHARSET">
            <summary>
            identifier for an ECI of a character set of code page
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.TEXT_MIXED_RAW">
            <summary>
            Raw code table for text compaction Mixed sub-mode
            </summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.PDF417HighLevelEncoder.TEXT_PUNCTUATION_RAW">
            <summary>
            Raw code table for text compaction: Punctuation sub-mode
            </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417HighLevelEncoder.encodeHighLevel(System.String,ZXing.PDF417.Internal.Compaction,System.Text.Encoding,System.Boolean)">
            <summary>
            Performs high-level encoding of a PDF417 message using the algorithm described in annex P
            of ISO/IEC 15438:2001(E). If byte compaction has been selected, then only byte compaction
            is used.
            </summary>
            <param name="msg">the message</param>
            <param name="compaction">compaction mode to use</param>
            <param name="encoding">character encoding used to encode in default or byte compaction
            or null for default / not applicable</param>
            <param name="disableEci">if true, don't add an ECI segment for different encodings than default</param>
            <returns>the encoded message (the char values range from 0 to 928)</returns>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417HighLevelEncoder.encodeText(System.String,System.Int32,System.Int32,System.Text.StringBuilder,System.Int32)">
             <summary>
             Encode parts of the message using Text Compaction as described in ISO/IEC 15438:2001(E),
             chapter 4.4.2.
            
             <param name="msg">the message</param>
             <param name="startpos">the start position within the message</param>
             <param name="count">the number of characters to encode</param>
             <param name="sb">receives the encoded codewords</param>
             <param name="initialSubmode">should normally be SUBMODE_ALPHA</param>
             <returns>the text submode in which this method ends</returns>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417HighLevelEncoder.encodeBinary(System.Byte[],System.Int32,System.Int32,System.Int32,System.Text.StringBuilder)">
             <summary>
             Encode parts of the message using Byte Compaction as described in ISO/IEC 15438:2001(E),
             chapter 4.4.3. The Unicode characters will be converted to binary using the cp437
             codepage.
            
             <param name="bytes">the message converted to a byte array</param>
             <param name="startpos">the start position within the message</param>
             <param name="count">the number of bytes to encode</param>
             <param name="startmode">the mode from which this method starts</param>
             <param name="sb">receives the encoded codewords</param>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417HighLevelEncoder.determineConsecutiveDigitCount(System.String,System.Int32)">
             <summary>
             Determines the number of consecutive characters that are encodable using numeric compaction.
            
             <param name="msg">the message</param>
             <param name="startpos">the start position within the message</param>
             <returns>the requested character count</returns>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417HighLevelEncoder.determineConsecutiveTextCount(System.String,System.Int32)">
             <summary>
             Determines the number of consecutive characters that are encodable using text compaction.
            
             <param name="msg">the message</param>
             <param name="startpos">the start position within the message</param>
             <returns>the requested character count</returns>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.PDF417HighLevelEncoder.determineConsecutiveBinaryCount(System.String,System.Byte[],System.Int32,System.Text.Encoding)">
            <summary>
            Determines the number of consecutive characters that are encodable using binary compaction.
            </summary>
            <param name="msg">the message</param>
            <param name="bytes">the message converted to a byte array</param>
            <param name="startpos">the start position within the message</param>
            <param name="encoding"></param>
            <returns>the requested character count</returns>
        </member>
        <member name="T:ZXing.PDF417.PDF417EncodingOptions">
            <summary>
            The class holds the available options for the <see cref="T:ZXing.PDF417.PDF417Writer" />
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.Compact">
            <summary>
            Specifies whether to use compact mode for PDF417 (type <see cref="T:System.Boolean" />).
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.Compaction">
            <summary>
            Specifies what compaction mode to use for PDF417 (type
            <see cref="P:ZXing.PDF417.PDF417EncodingOptions.Compaction" />).
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.Dimensions">
            <summary>
            Specifies the minimum and maximum number of rows and columns for PDF417 (type
            <see cref="P:ZXing.PDF417.PDF417EncodingOptions.Dimensions" />).
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.ErrorCorrection">
            <summary>
            Specifies what degree of error correction to use
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.CharacterSet">
            <summary>
            Specifies what character encoding to use where applicable (type {@link String})
            </summary>
        </member>
        <member name="P:ZXing.PDF417.PDF417EncodingOptions.DisableECI">
            <summary>
            Explicitly disables ECI segment when generating PDF417 Code
            That is against the specification but some
            readers have problems if the charset is switched from
            CP437 (default) to UTF-8 with the necessary ECI segment.
            If you set the property to true you can use different encodings
            and the ECI segment is omitted.
            </summary>
        </member>
        <member name="T:ZXing.PDF417.PDF417Common">
            <summary>
            <author>SITA Lab (kevin.osullivan@sita.aero) </author>
            <author>Guenther Grau</author>
            </summary>
        </member>
        <member name="F:ZXing.PDF417.PDF417Common.MAX_CODEWORDS_IN_BARCODE">
            <summary>
            Maximum Codewords (Data + Error).
            </summary>
        </member>
        <member name="M:ZXing.PDF417.PDF417Common.getBitCountSum(System.Int32[])">
            <summary>
            Gets the bit count sum.
            </summary>
            <returns>The bit count sum.</returns>
            <param name="moduleBitCount">Module bit count.</param>
        </member>
        <member name="M:ZXing.PDF417.PDF417Common.toIntArray(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Converts an ICollection&lt;int&gt; to an int[]
            Carry-over from Java.  Will likely remove and replace with the Generic .ToArray() method.
            </summary>
            <returns>The int array.</returns>
            <param name="list">List.</param>
        </member>
        <member name="M:ZXing.PDF417.PDF417Common.getCodeword(System.Int64)">
            <summary>
            Translate the symbol into a codeword
            </summary>
            <returns>the codeword corresponding to the symbol.</returns>
            <param name="symbol">encoded symbol to translate to a codeword</param>
        </member>
        <member name="F:ZXing.PDF417.PDF417Common.SYMBOL_TABLE">
            <summary>
            The sorted table of all possible symbols. Extracted from the PDF417
            specification. The index of a symbol in this table corresponds to the
            index into the codeword table.
            </summary>
        </member>
        <member name="F:ZXing.PDF417.PDF417Common.CODEWORD_TABLE">
            <summary>
            This table contains to codewords for all symbols.
            </summary>
        </member>
        <member name="T:ZXing.PDF417.PDF417Reader">
             <summary>
             This implementation can detect and decode PDF417 codes in an image.
            
             <author>SITA Lab (kevin.osullivan@sita.aero)</author>
             <author>Guenther Grau</author>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.PDF417Reader.decode(ZXing.BinaryBitmap)">
             <summary>
             Locates and decodes a PDF417 code in an image.
            
             <returns>a String representing the content encoded by the PDF417 code</returns>
             <exception cref="T:ZXing.FormatException">if a PDF417 cannot be decoded</exception>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.PDF417Reader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Locates and decodes a barcode in some format within an image. This method also accepts
            hints, each possibly associated to some data, which may help the implementation decode.
            **Note** this will return the FIRST barcode discovered if there are many.
            </summary>
            <param name="image">image of barcode to decode</param>
            <param name="hints">passed as a <see cref="T:System.Collections.Generic.IDictionary`2"/> from <see cref="T:ZXing.DecodeHintType"/>
            to arbitrary data. The
            meaning of the data depends upon the hint type. The implementation may or may not do
            anything with these hints.</param>
            <returns>
            String which the barcode encodes
            </returns>
        </member>
        <member name="M:ZXing.PDF417.PDF417Reader.decodeMultiple(ZXing.BinaryBitmap)">
             <summary>
             Locates and decodes Multiple PDF417 codes in an image.
            
             <returns>an array of Strings representing the content encoded by the PDF417 codes</returns>
             </summary>
        </member>
        <member name="M:ZXing.PDF417.PDF417Reader.decodeMultiple(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Locates and decodes multiple barcodes in some format within an image. This method also accepts
            hints, each possibly associated to some data, which may help the implementation decode.
            </summary>
            <param name="image">image of barcode to decode</param>
            <param name="hints">passed as a <see cref="T:System.Collections.Generic.IDictionary`2"/> from <see cref="T:ZXing.DecodeHintType"/>
            to arbitrary data. The
            meaning of the data depends upon the hint type. The implementation may or may not do
            anything with these hints.</param>
            <returns>
            String which the barcodes encode
            </returns>
        </member>
        <member name="M:ZXing.PDF417.PDF417Reader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object},System.Boolean)">
            <summary>
            Decode the specified image, with the hints and optionally multiple barcodes.
            Based on Owen's Comments in <see cref="T:ZXing.ReaderException"/>, this method has been modified to continue silently
            if a barcode was not decoded where it was detected instead of throwing a new exception object.
            </summary>
            <param name="image">Image.</param>
            <param name="hints">Hints.</param>
            <param name="multiple">If set to <c>true</c> multiple.</param>
        </member>
        <member name="M:ZXing.PDF417.PDF417Reader.getMaxWidth(ZXing.ResultPoint,ZXing.ResultPoint)">
            <summary>
            Gets the maximum width of the barcode
            </summary>
            <returns>The max width.</returns>
            <param name="p1">P1.</param>
            <param name="p2">P2.</param>
        </member>
        <member name="M:ZXing.PDF417.PDF417Reader.getMinWidth(ZXing.ResultPoint,ZXing.ResultPoint)">
            <summary>
            Gets the minimum width of the barcode
            </summary>
            <returns>The minimum width.</returns>
            <param name="p1">P1.</param>
            <param name="p2">P2.</param>
        </member>
        <member name="M:ZXing.PDF417.PDF417Reader.getMaxCodewordWidth(ZXing.ResultPoint[])">
            <summary>
            Gets the maximum width of the codeword.
            </summary>
            <returns>The max codeword width.</returns>
            <param name="p">P.</param>
        </member>
        <member name="M:ZXing.PDF417.PDF417Reader.getMinCodewordWidth(ZXing.ResultPoint[])">
            <summary>
            Gets the minimum width of the codeword.
            </summary>
            <returns>The minimum codeword width.</returns>
            <param name="p">P.</param>
        </member>
        <member name="M:ZXing.PDF417.PDF417Reader.reset">
            <summary>
            Resets any internal state the implementation has after a decode, to prepare it
            for reuse.
            </summary>
        </member>
        <member name="T:ZXing.PDF417.PDF417ResultMetadata">
            <summary>
            PDF 417 result meta data.
            <author>Guenther Grau</author>
            </summary>
        </member>
        <member name="T:ZXing.PDF417.PDF417Writer">
            <summary>
            <author>Jacob Haynes</author>
            <author>qwandor@google.com (Andrew Walbran)</author>
            </summary>
        </member>
        <member name="F:ZXing.PDF417.PDF417Writer.WHITE_SPACE">
            <summary>
            default white space (margin) around the code
            </summary>
        </member>
        <member name="F:ZXing.PDF417.PDF417Writer.DEFAULT_ERROR_CORRECTION_LEVEL">
            <summary>
            default error correction level
            </summary>
        </member>
        <member name="M:ZXing.PDF417.PDF417Writer.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            </summary>
            <param name="contents">The contents to encode in the barcode</param>
            <param name="format">The barcode format to generate</param>
            <param name="width">The preferred width in pixels</param>
            <param name="height">The preferred height in pixels</param>
            <param name="hints">Additional parameters to supply to the encoder</param>
            <returns>
            The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)
            </returns>
        </member>
        <member name="M:ZXing.PDF417.PDF417Writer.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32)">
            <summary>
            Encode a barcode using the default settings.
            </summary>
            <param name="contents">The contents to encode in the barcode</param>
            <param name="format">The barcode format to generate</param>
            <param name="width">The preferred width in pixels</param>
            <param name="height">The preferred height in pixels</param>
            <returns>
            The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)
            </returns>
        </member>
        <member name="M:ZXing.PDF417.PDF417Writer.bitMatrixFromEncoder(ZXing.PDF417.Internal.PDF417,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Takes encoder, accounts for width/height, and retrieves bit matrix
            </summary>
        </member>
        <member name="M:ZXing.PDF417.PDF417Writer.bitMatrixFromBitArray(System.SByte[][],System.Int32)">
            <summary>
            This takes an array holding the values of the PDF 417
            </summary>
            <param name="input">a byte array of information with 0 is black, and 1 is white</param>
            <param name="margin">border around the barcode</param>
            <returns>BitMatrix of the input</returns>
        </member>
        <member name="M:ZXing.PDF417.PDF417Writer.rotateArray(System.SByte[][])">
            <summary>
            Takes and rotates the it 90 degrees
            </summary>
        </member>
        <member name="T:ZXing.PlanarYUVLuminanceSource">
            <summary>
            This object extends LuminanceSource around an array of YUV data returned from the camera driver,
            with the option to crop to a rectangle within the full data. This can be used to exclude
            superfluous pixels around the perimeter and speed up decoding.
            It works for any pixel format where the Y channel is planar and appears first, including
            YCbCr_420_SP and YCbCr_422_SP.
            @author dswitkin@google.com (Daniel Switkin)
            </summary>
        </member>
        <member name="M:ZXing.PlanarYUVLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.PlanarYUVLuminanceSource"/> class.
            </summary>
            <param name="yuvData">The yuv data.</param>
            <param name="dataWidth">Width of the data.</param>
            <param name="dataHeight">Height of the data.</param>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="reverseHoriz">if set to <c>true</c> [reverse horiz].</param>
        </member>
        <member name="M:ZXing.PlanarYUVLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.PlanarYUVLuminanceSource"/> class.
            </summary>
            <param name="luminances">The luminances.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:ZXing.PlanarYUVLuminanceSource.getRow(System.Int32,System.Byte[])">
            <summary>
            Fetches one row of luminance data from the underlying platform's bitmap. Values range from
            0 (black) to 255 (white). Because Java does not have an unsigned byte type, callers will have
            to bitwise and with 0xff for each value. It is preferable for implementations of this method
            to only fetch this row rather than the whole image, since no 2D Readers may be installed and
            getMatrix() may never be called.
            </summary>
            <param name="y">The row to fetch, 0 &lt;= y &lt; Height.</param>
            <param name="row">An optional preallocated array. If null or too small, it will be ignored.
            Always use the returned object, and ignore the .length of the array.</param>
            <returns>
            An array containing the luminance data.
            </returns>
        </member>
        <member name="P:ZXing.PlanarYUVLuminanceSource.Matrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:ZXing.PlanarYUVLuminanceSource.CropSupported">
            <summary>
            </summary>
            <returns> Whether this subclass supports cropping.</returns>
        </member>
        <member name="M:ZXing.PlanarYUVLuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new object with cropped image data. Implementations may keep a reference to the
            original data rather than a copy. Only callable if CropSupported is true.
            </summary>
            <param name="left">The left coordinate, 0 &lt;= left &lt; Width.</param>
            <param name="top">The top coordinate, 0 &lt;= top &lt;= Height.</param>
            <param name="width">The width of the rectangle to crop.</param>
            <param name="height">The height of the rectangle to crop.</param>
            <returns>
            A cropped version of this object.
            </returns>
        </member>
        <member name="M:ZXing.PlanarYUVLuminanceSource.renderThumbnail">
            <summary>
            Renders the cropped greyscale bitmap.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZXing.PlanarYUVLuminanceSource.ThumbnailWidth">
            <summary>
            width of image from {@link #renderThumbnail()}
            </summary>
        </member>
        <member name="P:ZXing.PlanarYUVLuminanceSource.ThumbnailHeight">
            <summary>
            height of image from {@link #renderThumbnail()}
            </summary>
        </member>
        <member name="M:ZXing.PlanarYUVLuminanceSource.CreateLuminanceSource(System.Byte[],System.Int32,System.Int32)">
            <summary>
            creates a new instance
            </summary>
            <param name="newLuminances"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Presentation.BarcodeReader">
            <summary>
            A smart class to decode the barcode inside a bitmap object which is derived from BitmapSource
            </summary>
        </member>
        <member name="M:ZXing.Presentation.BarcodeReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Presentation.BarcodeReader"/> class.
            </summary>
        </member>
        <member name="M:ZXing.Presentation.BarcodeReader.#ctor(ZXing.Reader,System.Func{System.Windows.Media.Imaging.BitmapSource,ZXing.LuminanceSource},System.Func{ZXing.LuminanceSource,ZXing.Binarizer})">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Presentation.BarcodeReader"/> class.
            </summary>
            <param name="reader">Sets the reader which should be used to find and decode the barcode.
            If null then MultiFormatReader is used</param>
            <param name="createLuminanceSource">Sets the function to create a luminance source object for a bitmap.
            If null, default is used</param>
            <param name="createBinarizer">Sets the function to create a binarizer object for a luminance source.
            If null then HybridBinarizer is used</param>
        </member>
        <member name="M:ZXing.Presentation.BarcodeReader.#ctor(ZXing.Reader,System.Func{System.Windows.Media.Imaging.BitmapSource,ZXing.LuminanceSource},System.Func{ZXing.LuminanceSource,ZXing.Binarizer},System.Func{System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat,ZXing.LuminanceSource})">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Presentation.BarcodeReader"/> class.
            </summary>
            <param name="reader">Sets the reader which should be used to find and decode the barcode.
            If null then MultiFormatReader is used</param>
            <param name="createLuminanceSource">Sets the function to create a luminance source object for a bitmap.
            If null, default is used</param>
            <param name="createBinarizer">Sets the function to create a binarizer object for a luminance source.
            If null then HybridBinarizer is used</param>
            <param name="createRGBLuminanceSource">The create RGB luminance source.</param>
        </member>
        <member name="T:ZXing.Presentation.BarcodeWriter">
            <summary>
            A smart class to encode some content to a barcode image
            </summary>
        </member>
        <member name="M:ZXing.Presentation.BarcodeWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Presentation.BarcodeWriter"/> class.
            </summary>
        </member>
        <member name="T:ZXing.Presentation.BarcodeWriterGeometry">
            <summary>
            A smart class to encode some content to a barcode image into a geometry
            Autor: Rob Fonseca-Ensor
            </summary>
        </member>
        <member name="M:ZXing.Presentation.BarcodeWriterGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Presentation.BarcodeWriterGeometry"/> class.
            </summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.BitMatrixParser">
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.QrCode.Internal.BitMatrixParser.createBitMatrixParser(ZXing.Common.BitMatrix)">
            <param name="bitMatrix">{@link BitMatrix} to parse</param>
            <throws>ReaderException if dimension is not >= 21 and 1 mod 4</throws>
        </member>
        <member name="M:ZXing.QrCode.Internal.BitMatrixParser.readFormatInformation">
            <summary> <p>Reads format information from one of its two locations within the QR Code.</p>
            
            </summary>
            <returns> {@link FormatInformation} encapsulating the QR Code's format info
            </returns>
            <throws>  ReaderException if both format information locations cannot be parsed as </throws>
            <summary> the valid encoding of format information
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.BitMatrixParser.readVersion">
            <summary> <p>Reads version information from one of its two locations within the QR Code.</p>
            
            </summary>
            <returns> {@link Version} encapsulating the QR Code's version
            </returns>
            <throws>  ReaderException if both version information locations cannot be parsed as </throws>
            <summary> the valid encoding of version information
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.BitMatrixParser.readCodewords">
            <summary> <p>Reads the bits in the {@link BitMatrix} representing the finder pattern in the
            correct order in order to reconstruct the codewords bytes contained within the
            QR Code.</p>
            
            </summary>
            <returns> bytes encoded within the QR Code
            </returns>
            <throws>  ReaderException if the exact number of bytes expected is not read </throws>
        </member>
        <member name="M:ZXing.QrCode.Internal.BitMatrixParser.remask">
            Revert the mask removal done while reading the code words. The bit matrix should revert to its original state.
        </member>
        <member name="M:ZXing.QrCode.Internal.BitMatrixParser.setMirror(System.Boolean)">
            Prepare the parser for a mirrored operation.
            This flag has effect only on the {@link #readFormatInformation()} and the
            {@link #readVersion()}. Before proceeding with {@link #readCodewords()} the
            {@link #mirror()} method should be called.
            
            @param mirror Whether to read version and format information mirrored.
        </member>
        <member name="M:ZXing.QrCode.Internal.BitMatrixParser.mirror">
            Mirror the bit matrix in order to attempt a second reading. 
        </member>
        <member name="T:ZXing.QrCode.Internal.DataBlock">
            <summary> <p>Encapsulates a block of data within a QR Code. QR Codes may split their data into
            multiple blocks, each of which is a unit of data and error-correction codewords. Each
            is represented by an instance of this class.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:ZXing.QrCode.Internal.DataBlock.getDataBlocks(System.Byte[],ZXing.QrCode.Internal.Version,ZXing.QrCode.Internal.ErrorCorrectionLevel)">
            <summary> <p>When QR Codes use multiple data blocks, they are actually interleaved.
            That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This
            method will separate the data into original blocks.</p>
            
            </summary>
            <param name="rawCodewords">bytes as read directly from the QR Code
            </param>
            <param name="version">version of the QR Code
            </param>
            <param name="ecLevel">error-correction level of the QR Code
            </param>
            <returns> {@link DataBlock}s containing original bytes, "de-interleaved" from representation in the
            QR Code
            </returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.DataMask">
            <summary> <p>Encapsulates data masks for the data bits in a QR code, per ISO 18004:2006 6.8. Implementations
            of this class can un-mask a raw BitMatrix. For simplicity, they will unmask the entire BitMatrix,
            including areas used for finder patterns, timing patterns, etc. These areas should be unused
            after the point they are unmasked anyway.</p>
            
            <p>Note that the diagram in section 6.8.1 is misleading since it indicates that i is column position
            and j is row position. In fact, as the text says, i is row position and j is column position.</p>
            
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="F:ZXing.QrCode.Internal.DataMask.DATA_MASKS">
            <summary> See ISO 18004:2006 6.8.1</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.DataMask.unmaskBitMatrix(System.Int32,ZXing.Common.BitMatrix,System.Int32)">
            <summary> <p>Implementations of this method reverse the data masking process applied to a QR Code and
            make its bits ready to read.</p>
            </summary>
            <param name="reference"></param>
            <param name="bits">representation of QR Code bits</param>
            <param name="dimension">dimension of QR Code, represented by bits, being unmasked</param>
        </member>
        <member name="T:ZXing.QrCode.Internal.DecodedBitStreamParser">
            <summary> <p>QR Codes can encode text as bits in one of several modes, and can use multiple modes
            in one QR Code. This class decodes the bits back into text.</p>
            
            <p>See ISO 18004:2006, 6.4.3 - 6.4.7</p>
            <author>Sean Owen</author>
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.DecodedBitStreamParser.ALPHANUMERIC_CHARS">
            <summary>
            See ISO 18004:2006, 6.4.4 Table 5
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.DecodedBitStreamParser.decodeHanziSegment(ZXing.Common.BitSource,System.Text.StringBuilder,System.Int32)">
            <summary>
            See specification GBT 18284-2000
            </summary>
            <param name="bits">The bits.</param>
            <param name="result">The result.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.Decoder">
            <summary>
              <p>The main class which implements QR Code decoding -- as opposed to locating and extracting
            the QR Code from an image.</p>
            </summary>
            <author>
            Sean Owen
            </author>
        </member>
        <member name="M:ZXing.QrCode.Internal.Decoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.QrCode.Internal.Decoder"/> class.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Decoder.decode(System.Boolean[][],System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Convenience method that can decode a QR Code represented as a 2D array of booleans.
            "true" is taken to mean a black module.</p>
            </summary>
            <param name="image">booleans representing white/black QR Code modules</param>
            <param name="hints">decoding hints that should be used to influence decoding</param>
            <returns>
            text and bytes encoded within the QR Code
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Decoder.decode(ZXing.Common.BitMatrix,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Decodes a QR Code represented as a {@link BitMatrix}. A 1 or "true" is taken to mean a black module.</p>
            </summary>
            <param name="bits">booleans representing white/black QR Code modules</param>
            <param name="hints">decoding hints that should be used to influence decoding</param>
            <returns>
            text and bytes encoded within the QR Code
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Decoder.correctErrors(System.Byte[],System.Int32)">
            <summary>
              <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to
            correct the errors in-place using Reed-Solomon error correction.</p>
            </summary>
            <param name="codewordBytes">data and error correction codewords</param>
            <param name="numDataCodewords">number of codewords that are data bytes</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.ErrorCorrectionLevel">
            <summary>
            <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels
            defined by the QR code standard.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="F:ZXing.QrCode.Internal.ErrorCorrectionLevel.L">
            <summary> L = ~7% correction</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.ErrorCorrectionLevel.M">
            <summary> M = ~15% correction</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.ErrorCorrectionLevel.Q">
            <summary> Q = ~25% correction</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.ErrorCorrectionLevel.H">
            <summary> H = ~30% correction</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.ErrorCorrectionLevel.Bits">
            <summary>
            Gets the bits.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.ErrorCorrectionLevel.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.ErrorCorrectionLevel.ordinal">
            <summary>
            Ordinals this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.ErrorCorrectionLevel.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.ErrorCorrectionLevel.forBits(System.Int32)">
            <summary>
            Fors the bits.
            </summary>
            <param name="bits">int containing the two bits encoding a QR Code's error correction level</param>
            <returns>
              <see cref="T:ZXing.QrCode.Internal.ErrorCorrectionLevel"/> representing the encoded error correction level
            </returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.FormatInformation">
            <summary> <p>Encapsulates a QR Code's format information, including the data mask used and
            error correction level.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
            <seealso cref="P:ZXing.QrCode.Internal.FormatInformation.DataMask">
            </seealso>
            <seealso cref="P:ZXing.QrCode.Internal.FormatInformation.ErrorCorrectionLevel">
            </seealso>
        </member>
        <member name="F:ZXing.QrCode.Internal.FormatInformation.FORMAT_INFO_DECODE_LOOKUP">
            <summary> See ISO 18004:2006, Annex C, Table C.1</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.FormatInformation.BITS_SET_IN_HALF_BYTE">
            <summary> Offset i holds the number of 1 bits in the binary representation of i</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.FormatInformation.decodeFormatInformation(System.Int32,System.Int32)">
            <summary>
            Decodes the format information.
            </summary>
            <param name="maskedFormatInfo1">format info indicator, with mask still applied</param>
            <param name="maskedFormatInfo2">The masked format info2.</param>
            <returns>
            information about the format it specifies, or <code>null</code>
            if doesn't seem to match any known pattern
            </returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.Mode">
            <summary>
            <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the various modes in which
            data can be encoded to bits in the QR code standard.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:ZXing.QrCode.Internal.Mode.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Mode.Names">
            <summary>
            enumeration for encoding modes
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.Names.TERMINATOR">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.Names.NUMERIC">
            <summary>
            numeric encoding
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.Names.ALPHANUMERIC">
            <summary>
            alpha-numeric encoding
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.Names.STRUCTURED_APPEND">
            <summary>
            structured append
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.Names.BYTE">
            <summary>
            byte mode encoding
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.Names.ECI">
            <summary>
            ECI segment
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.Names.KANJI">
            <summary>
            Kanji mode
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.Names.FNC1_FIRST_POSITION">
            <summary>
            FNC1 char, first position
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.Names.FNC1_SECOND_POSITION">
            <summary>
            FNC1 char, second position
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.Names.HANZI">
            <summary>
            Hanzi mode
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.TERMINATOR">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.NUMERIC">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.ALPHANUMERIC">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.STRUCTURED_APPEND">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.BYTE">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.ECI">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.KANJI">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.FNC1_FIRST_POSITION">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.FNC1_SECOND_POSITION">
            <summary>
            
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Mode.HANZI">
            <summary>See GBT 18284-2000; "Hanzi" is a transliteration of this mode name.</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Mode.forBits(System.Int32)">
            <summary>
            Fors the bits.
            </summary>
            <param name="bits">four bits encoding a QR Code data mode</param>
            <returns>
              <see cref="T:ZXing.QrCode.Internal.Mode"/> encoded by these bits
            </returns>
            <exception cref="T:System.ArgumentException">if bits do not correspond to a known mode</exception>
        </member>
        <member name="M:ZXing.QrCode.Internal.Mode.getCharacterCountBits(ZXing.QrCode.Internal.Version)">
            <param name="version">version in question
            </param>
            <returns> number of bits used, in this QR Code symbol {@link Version}, to encode the
            count of characters that will follow encoded in this {@link Mode}
            </returns>
        </member>
        <member name="P:ZXing.QrCode.Internal.Mode.Bits">
            <summary>
            Gets the bits.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Mode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.QRCodeDecoderMetaData">
            <summary>
            Meta-data container for QR Code decoding. Instances of this class may be used to convey information back to the
            decoding caller. Callers are expected to process this.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.QRCodeDecoderMetaData.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.QrCode.Internal.QRCodeDecoderMetaData"/> class.
            </summary>
            <param name="mirrored">if set to <c>true</c> [mirrored].</param>
        </member>
        <member name="P:ZXing.QrCode.Internal.QRCodeDecoderMetaData.IsMirrored">
            <summary>
            true if the QR Code was mirrored. 
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.QRCodeDecoderMetaData.applyMirroredCorrection(ZXing.ResultPoint[])">
            <summary>
            Apply the result points' order correction due to mirroring.
            </summary>
            <param name="points">Array of points to apply mirror correction to.</param>
        </member>
        <member name="T:ZXing.QrCode.Internal.Version">
            <summary>
            See ISO 18004:2006 Annex D
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="F:ZXing.QrCode.Internal.Version.VERSION_DECODE_INFO">
            <summary> See ISO 18004:2006 Annex D.
            Element i represents the raw version bits that specify version i + 7
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Version.VersionNumber">
            <summary>
            Gets the version number.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Version.AlignmentPatternCenters">
            <summary>
            Gets the alignment pattern centers.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Version.TotalCodewords">
            <summary>
            Gets the total codewords.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Version.DimensionForVersion">
            <summary>
            Gets the dimension for version.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Version.getECBlocksForLevel(ZXing.QrCode.Internal.ErrorCorrectionLevel)">
            <summary>
            Gets the EC blocks for level.
            </summary>
            <param name="ecLevel">The ec level.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Version.getProvisionalVersionForDimension(System.Int32)">
            <summary> <p>Deduces version information purely from QR Code dimensions.</p>
            
            </summary>
            <param name="dimension">dimension in modules
            </param>
            <returns><see cref="T:ZXing.QrCode.Internal.Version" /> for a QR Code of that dimension or null</returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Version.getVersionForNumber(System.Int32)">
            <summary>
            Gets the version for number.
            </summary>
            <param name="versionNumber">The version number.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Version.buildFunctionPattern">
            <summary> See ISO 18004:2006 Annex E</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Version.ECBlocks">
            <summary> <p>Encapsulates a set of error-correction blocks in one symbol version. Most versions will
            use blocks of differing sizes within one version, so, this encapsulates the parameters for
            each set of blocks. It also holds the number of error-correction codewords per block since it
            will be the same across all blocks within one version.</p>
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Version.ECBlocks.ECCodewordsPerBlock">
            <summary>
            Gets the EC codewords per block.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Version.ECBlocks.NumBlocks">
            <summary>
            Gets the num blocks.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Version.ECBlocks.TotalECCodewords">
            <summary>
            Gets the total EC codewords.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Version.ECBlocks.getECBlocks">
            <summary>
            Gets the EC blocks.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.Version.ECB">
            <summary> <p>Encapsulates the parameters for one error-correction block in one symbol version.
            This includes the number of data codewords, and the number of times a block with these
            parameters is used consecutively in the QR code version's format.</p>
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Version.ECB.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Version.ECB.DataCodewords">
            <summary>
            Gets the data codewords.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Version.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Version.buildVersions">
            <summary> See ISO 18004:2006 6.5.1 Table 9</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.AlignmentPattern">
            <summary> <p>Encapsulates an alignment pattern, which are the smaller square patterns found in
            all but the simplest QR Codes.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:ZXing.QrCode.Internal.AlignmentPattern.aboutEquals(System.Single,System.Single,System.Single)">
            <summary> <p>Determines if this alignment pattern "about equals" an alignment pattern at the stated
            position and size -- meaning, it is at nearly the same center with nearly the same size.</p>
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.AlignmentPattern.combineEstimate(System.Single,System.Single,System.Single)">
            <summary>
            Combines this object's current estimate of a finder pattern position and module size
            with a new estimate. It returns a new {@code FinderPattern} containing an average of the two.
            </summary>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <param name="newModuleSize">New size of the module.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.AlignmentPatternFinder">
            <summary> <p>This class attempts to find alignment patterns in a QR Code. Alignment patterns look like finder
            patterns but are smaller and appear at regular intervals throughout the image.</p>
            
            <p>At the moment this only looks for the bottom-right alignment pattern.</p>
            
            <p>This is mostly a simplified copy of {@link FinderPatternFinder}. It is copied,
            pasted and stripped down here for maximum performance but does unfortunately duplicate
            some code.</p>
            
            <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.</p>
            
            </summary>
            <author>  Sean Owen
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:ZXing.QrCode.Internal.AlignmentPatternFinder.#ctor(ZXing.Common.BitMatrix,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,ZXing.ResultPointCallback)">
            <summary> <p>Creates a finder that will look in a portion of the whole image.</p>
            
            </summary>
            <param name="image">image to search
            </param>
            <param name="startX">left column from which to start searching
            </param>
            <param name="startY">top row from which to start searching
            </param>
            <param name="width">width of region to search
            </param>
            <param name="height">height of region to search
            </param>
            <param name="moduleSize">estimated module size so far
            </param>
            <param name="resultPointCallback">callback function which is called, when a result point is found</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.AlignmentPatternFinder.find">
            <summary> <p>This method attempts to find the bottom-right alignment pattern in the image. It is a bit messy since
            it's pretty performance-critical and so is written to be fast foremost.</p>
            
            </summary>
            <returns><see cref="T:ZXing.QrCode.Internal.AlignmentPattern"/> if found</returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.AlignmentPatternFinder.centerFromEnd(System.Int32[],System.Int32)">
            <summary> Given a count of black/white/black pixels just seen and an end position,
            figures the location of the center of this black/white/black run.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.AlignmentPatternFinder.foundPatternCross(System.Int32[])">
            <param name="stateCount">count of black/white/black pixels just read
            </param>
            <returns> true iff the proportions of the counts is close enough to the 1/1/1 ratios
            used by alignment patterns to be considered a match
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.AlignmentPatternFinder.crossCheckVertical(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              <p>After a horizontal scan finds a potential alignment pattern, this method
            "cross-checks" by scanning down vertically through the center of the possible
            alignment pattern to see if the same proportion is detected.</p>
            </summary>
            <param name="startI">row where an alignment pattern was detected</param>
            <param name="centerJ">center of the section that appears to cross an alignment pattern</param>
            <param name="maxCount">maximum reasonable number of modules that should be
            observed in any reading state, based on the results of the horizontal scan</param>
            <param name="originalStateCountTotal">The original state count total.</param>
            <returns>
            vertical center of alignment pattern, or null if not found
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.AlignmentPatternFinder.handlePossibleCenter(System.Int32[],System.Int32,System.Int32)">
            <summary> <p>This is called when a horizontal scan finds a possible alignment pattern. It will
            cross check with a vertical scan, and if successful, will see if this pattern had been
            found on a previous horizontal scan. If so, we consider it confirmed and conclude we have
            found the alignment pattern.</p>
            
            </summary>
            <param name="stateCount">reading state module counts from horizontal scan
            </param>
            <param name="i">row where alignment pattern may be found
            </param>
            <param name="j">end of possible alignment pattern in row
            </param>
            <returns> {@link AlignmentPattern} if we have found the same pattern twice, or null if not
            </returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.Detector">
            <summary>
            <p>Encapsulates logic that can detect a QR Code in an image, even if the QR Code
            is rotated or skewed, or partially obscured.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.QrCode.Internal.Detector.#ctor(ZXing.Common.BitMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.QrCode.Internal.Detector"/> class.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="P:ZXing.QrCode.Internal.Detector.Image">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Detector.ResultPointCallback">
            <summary>
            Gets the result point callback.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Detector.detect">
            <summary>
              <p>Detects a QR Code in an image.</p>
            </summary>
            <returns>
              <see cref="T:ZXing.Common.DetectorResult"/> encapsulating results of detecting a QR Code
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Detector.detect(System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
              <p>Detects a QR Code in an image.</p>
            </summary>
            <param name="hints">optional hints to detector</param>
            <returns>
              <see cref="T:ZXing.Common.DetectorResult"/> encapsulating results of detecting a QR Code
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Detector.processFinderPatternInfo(ZXing.QrCode.Internal.FinderPatternInfo)">
            <summary>
            Processes the finder pattern info.
            </summary>
            <param name="info">The info.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Detector.computeDimension(ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint,System.Single,System.Int32@)">
            <summary> <p>Computes the dimension (number of modules on a size) of the QR Code based on the position
            of the finder patterns and estimated module size.</p>
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Detector.calculateModuleSize(ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint)">
            <summary>
              <p>Computes an average estimated module size based on estimated derived from the positions
            of the three finder patterns.</p>
            </summary>
            <param name="topLeft">detected top-left finder pattern center</param>
            <param name="topRight">detected top-right finder pattern center</param>
            <param name="bottomLeft">detected bottom-left finder pattern center</param>
            <returns>estimated module size</returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Detector.calculateModuleSizeOneWay(ZXing.ResultPoint,ZXing.ResultPoint)">
            <summary> <p>Estimates module size based on two finder patterns -- it uses
            {@link #sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)} to figure the
            width of each, measuring along the axis between their centers.</p>
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Detector.sizeOfBlackWhiteBlackRunBothWays(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> See {@link #sizeOfBlackWhiteBlackRun(int, int, int, int)}; computes the total width of
            a finder pattern by looking for a black-white-black run from the center in the direction
            of another point (another finder pattern center), and in the opposite direction too.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Detector.sizeOfBlackWhiteBlackRun(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <p>This method traces a line from a point in the image, in the direction towards another point.
            It begins in a black region, and keeps going until it finds white, then black, then white again.
            It reports the distance from the start to this point.</p>
            
            <p>This is used when figuring out how wide a finder pattern is, when the finder pattern
            may be skewed or rotated.</p>
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Detector.findAlignmentInRegion(System.Single,System.Int32,System.Int32,System.Single)">
            <summary>
              <p>Attempts to locate an alignment pattern in a limited region of the image, which is
            guessed to contain it. This method uses {@link AlignmentPattern}.</p>
            </summary>
            <param name="overallEstModuleSize">estimated module size so far</param>
            <param name="estAlignmentX">x coordinate of center of area probably containing alignment pattern</param>
            <param name="estAlignmentY">y coordinate of above</param>
            <param name="allowanceFactor">number of pixels in all directions to search from the center</param>
            <returns>
              <see cref="T:ZXing.QrCode.Internal.AlignmentPattern"/> if found, or null otherwise
            </returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.FinderPattern">
            <summary>
            <p>Encapsulates a finder pattern, which are the three square patterns found in
            the corners of QR Codes. It also encapsulates a count of similar finder patterns,
            as a convenience to the finder's bookkeeping.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="P:ZXing.QrCode.Internal.FinderPattern.EstimatedModuleSize">
            <summary>
            Gets the size of the estimated module.
            </summary>
            <value>
            The size of the estimated module.
            </value>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPattern.aboutEquals(System.Single,System.Single,System.Single)">
            <summary> <p>Determines if this finder pattern "about equals" a finder pattern at the stated
            position and size -- meaning, it is at nearly the same center with nearly the same size.</p>
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPattern.combineEstimate(System.Single,System.Single,System.Single)">
            <summary>
            Combines this object's current estimate of a finder pattern position and module size
            with a new estimate. It returns a new {@code FinderPattern} containing a weighted average
            based on count.
            </summary>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <param name="newModuleSize">New size of the module.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.FinderPatternFinder">
            <summary>
            <p>This class attempts to find finder patterns in a QR Code. Finder patterns are the square
            markers at three corners of a QR Code.</p>
            
            <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="F:ZXing.QrCode.Internal.FinderPatternFinder.MIN_SKIP">
            <summary>
            1 pixel/module times 3 modules/center
            </summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.FinderPatternFinder.MAX_MODULES">
            <summary>
            support up to version 10 for mobile clients
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPatternFinder.#ctor(ZXing.Common.BitMatrix)">
            <summary>
            <p>Creates a finder that will search the image for three finder patterns.</p>
            </summary>
            <param name="image">image to search</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPatternFinder.#ctor(ZXing.Common.BitMatrix,ZXing.ResultPointCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.QrCode.Internal.FinderPatternFinder"/> class.
            </summary>
            <param name="image">The image.</param>
            <param name="resultPointCallback">The result point callback.</param>
        </member>
        <member name="P:ZXing.QrCode.Internal.FinderPatternFinder.Image">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.FinderPatternFinder.PossibleCenters">
            <summary>
            Gets the possible centers.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPatternFinder.centerFromEnd(System.Int32[],System.Int32)">
            <summary> Given a count of black/white/black/white/black pixels just seen and an end position,
            figures the location of the center of this run.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPatternFinder.foundPatternCross(System.Int32[])">
            <param name="stateCount">count of black/white/black/white/black pixels just read
            </param>
            <returns> true iff the proportions of the counts is close enough to the 1/1/3/1/1 ratios
            used by finder patterns to be considered a match
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPatternFinder.crossCheckDiagonal(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            After a vertical and horizontal scan finds a potential finder pattern, this method
            "cross-cross-cross-checks" by scanning down diagonally through the center of the possible
            finder pattern to see if the same proportion is detected.
            </summary>
            <param name="startI">row where a finder pattern was detected</param>
            <param name="centerJ">center of the section that appears to cross a finder pattern</param>
            <param name="maxCount">maximum reasonable number of modules that should be observed in any reading state, based on the results of the horizontal scan</param>
            <param name="originalStateCountTotal">The original state count total.</param>
            <returns>true if proportions are withing expected limits</returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPatternFinder.crossCheckVertical(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              <p>After a horizontal scan finds a potential finder pattern, this method
            "cross-checks" by scanning down vertically through the center of the possible
            finder pattern to see if the same proportion is detected.</p>
            </summary>
            <param name="startI">row where a finder pattern was detected</param>
            <param name="centerJ">center of the section that appears to cross a finder pattern</param>
            <param name="maxCount">maximum reasonable number of modules that should be
            observed in any reading state, based on the results of the horizontal scan</param>
            <param name="originalStateCountTotal">The original state count total.</param>
            <returns>
            vertical center of finder pattern, or null if not found
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPatternFinder.crossCheckHorizontal(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> <p>Like {@link #crossCheckVertical(int, int, int, int)}, and in fact is basically identical,
            except it reads horizontally instead of vertically. This is used to cross-cross
            check a vertical cross check and locate the real center of the alignment pattern.</p>
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPatternFinder.handlePossibleCenter(System.Int32[],System.Int32,System.Int32,System.Boolean)">
            <summary>
              <p>This is called when a horizontal scan finds a possible alignment pattern. It will
            cross check with a vertical scan, and if successful, will, ah, cross-cross-check
            with another horizontal scan. This is needed primarily to locate the real horizontal
            center of the pattern in cases of extreme skew.
            And then we cross-cross-cross check with another diagonal scan.</p>
            If that succeeds the finder pattern location is added to a list that tracks
            the number of times each location has been nearly-matched as a finder pattern.
            Each additional find is more evidence that the location is in fact a finder
            pattern center
            </summary>
            <param name="stateCount">reading state module counts from horizontal scan</param>
            <param name="i">row where finder pattern may be found</param>
            <param name="j">end of possible finder pattern in row</param>
            <param name="pureBarcode">true if in "pure barcode" mode</param>
            <returns>
            true if a finder pattern candidate was found this time
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPatternFinder.findRowSkip">
            <returns> number of rows we could safely skip during scanning, based on the first
            two finder patterns that have been located. In some cases their position will
            allow us to infer that the third pattern must lie below a certain point farther
            down in the image.
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPatternFinder.haveMultiplyConfirmedCenters">
            <returns> true iff we have found at least 3 finder patterns that have been detected
            at least {@link #CENTER_QUORUM} times each, and, the estimated module size of the
            candidates is "pretty similar"
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPatternFinder.selectBestPatterns">
            <returns> the 3 best {@link FinderPattern}s from our list of candidates. The "best" are
            those that have been detected at least {@link #CENTER_QUORUM} times, and whose module
            size differs from the average among those patterns the least
            </returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.FinderPatternFinder.FurthestFromAverageComparator">
            <summary>
            Orders by furthest from average
            </summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.FinderPatternFinder.CenterComparator">
            <summary> <p>Orders by {@link FinderPattern#getCount()}, descending.</p></summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.FinderPatternInfo">
            <summary>
            <p>Encapsulates information about finder patterns in an image, including the location of
            the three finder patterns, and their estimated module size.</p>
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.QrCode.Internal.FinderPatternInfo.#ctor(ZXing.QrCode.Internal.FinderPattern[])">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.QrCode.Internal.FinderPatternInfo"/> class.
            </summary>
            <param name="patternCenters">The pattern centers.</param>
        </member>
        <member name="P:ZXing.QrCode.Internal.FinderPatternInfo.BottomLeft">
            <summary>
            Gets the bottom left.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.FinderPatternInfo.TopLeft">
            <summary>
            Gets the top left.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.FinderPatternInfo.TopRight">
            <summary>
            Gets the top right.
            </summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.ByteMatrix">
            <summary>
            JAVAPORT: The original code was a 2D array of ints, but since it only ever gets assigned
            0, 1 and 2 I'm going to use less memory and go with bytes.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="M:ZXing.QrCode.Internal.ByteMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.QrCode.Internal.ByteMatrix"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:ZXing.QrCode.Internal.ByteMatrix.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.ByteMatrix.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.ByteMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Int32"/> with the specified x.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.ByteMatrix.Array">
            <summary>
            an internal representation as bytes, in row-major order. array[y][x] represents point (x,y)
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.ByteMatrix.set(System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.ByteMatrix.set(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.ByteMatrix.clear(System.Byte)">
            <summary>
            Clears the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.ByteMatrix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.Encoder">
            <summary>
            </summary>
            <author>satorux@google.com (Satoru Takabayashi) - creator</author>
            <author>dswitkin@google.com (Daniel Switkin) - ported from C++</author>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.encode(System.String,ZXing.QrCode.Internal.ErrorCorrectionLevel)">
            <summary>
            Encode "bytes" with the error correction level "ecLevel". The encoding mode will be chosen
            internally by chooseMode(). On success, store the result in "qrCode".
            We recommend you to use QRCode.EC_LEVEL_L (the lowest level) for
            "getECLevel" since our primary use is to show QR code on desktop screens. We don't need very
            strong error correction for this purpose.
            Note that there is no way to encode bytes in MODE_KANJI. We might want to add EncodeWithMode()
            with which clients can specify the encoding mode. For now, we don't need the functionality.
            </summary>
            <param name="content">text to encode</param>
            <param name="ecLevel">error correction level to use</param>
            <returns><see cref="T:ZXing.QrCode.Internal.QRCode"/> representing the encoded QR code</returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.encode(System.String,ZXing.QrCode.Internal.ErrorCorrectionLevel,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            Encodes the specified content.
            </summary>
            <param name="content">The content.</param>
            <param name="ecLevel">The ec level.</param>
            <param name="hints">The hints.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.recommendVersion(ZXing.QrCode.Internal.ErrorCorrectionLevel,ZXing.QrCode.Internal.Mode,ZXing.Common.BitArray,ZXing.Common.BitArray)">
            <summary>
            Decides the smallest version of QR code that will contain all of the provided data.
            </summary>
            <exception cref="T:ZXing.WriterException">if the data cannot fit in any version</exception>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.getAlphanumericCode(System.Int32)">
            <summary>
            Gets the alphanumeric code.
            </summary>
            <param name="code">The code.</param>
            <returns>the code point of the table used in alphanumeric mode or
            -1 if there is no corresponding code in the table.</returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.chooseMode(System.String)">
            <summary>
            Chooses the mode.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.chooseMode(System.String,System.String)">
            <summary>
            Choose the best mode by examining the content. Note that 'encoding' is used as a hint;
            if it is Shift_JIS, and the input is only double-byte Kanji, then we return {@link Mode#KANJI}.
            </summary>
            <param name="content">The content.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.willFit(System.Int32,ZXing.QrCode.Internal.Version,ZXing.QrCode.Internal.ErrorCorrectionLevel)">
            <summary></summary>
            <returns>true if the number of input bits will fit in a code with the specified version and error correction level.</returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.terminateBits(System.Int32,ZXing.Common.BitArray)">
            <summary>
            Terminate bits as described in 8.4.8 and 8.4.9 of JISX0510:2004 (p.24).
            </summary>
            <param name="numDataBytes">The num data bytes.</param>
            <param name="bits">The bits.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.getNumDataBytesAndNumECBytesForBlockID(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Get number of data bytes and number of error correction bytes for block id "blockID". Store
            the result in "numDataBytesInBlock", and "numECBytesInBlock". See table 12 in 8.5.1 of
            JISX0510:2004 (p.30)
            </summary>
            <param name="numTotalBytes">The num total bytes.</param>
            <param name="numDataBytes">The num data bytes.</param>
            <param name="numRSBlocks">The num RS blocks.</param>
            <param name="blockID">The block ID.</param>
            <param name="numDataBytesInBlock">The num data bytes in block.</param>
            <param name="numECBytesInBlock">The num EC bytes in block.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.interleaveWithECBytes(ZXing.Common.BitArray,System.Int32,System.Int32,System.Int32)">
            <summary>
            Interleave "bits" with corresponding error correction bytes. On success, store the result in
            "result". The interleave rule is complicated. See 8.6 of JISX0510:2004 (p.37) for details.
            </summary>
            <param name="bits">The bits.</param>
            <param name="numTotalBytes">The num total bytes.</param>
            <param name="numDataBytes">The num data bytes.</param>
            <param name="numRSBlocks">The num RS blocks.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.appendModeInfo(ZXing.QrCode.Internal.Mode,ZXing.Common.BitArray)">
            <summary>
            Append mode info. On success, store the result in "bits".
            </summary>
            <param name="mode">The mode.</param>
            <param name="bits">The bits.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.appendLengthInfo(System.Int32,ZXing.QrCode.Internal.Version,ZXing.QrCode.Internal.Mode,ZXing.Common.BitArray)">
            <summary>
            Append length info. On success, store the result in "bits".
            </summary>
            <param name="numLetters">The num letters.</param>
            <param name="version">The version.</param>
            <param name="mode">The mode.</param>
            <param name="bits">The bits.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.Encoder.appendBytes(System.String,ZXing.QrCode.Internal.Mode,ZXing.Common.BitArray,System.String)">
            <summary>
            Append "bytes" in "mode" mode (encoding) into "bits". On success, store the result in "bits".
            </summary>
            <param name="content">The content.</param>
            <param name="mode">The mode.</param>
            <param name="bits">The bits.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="T:ZXing.QrCode.Internal.MaskUtil">
            <summary>
            
            </summary>
            <author>Satoru Takabayashi</author>
            <author>Daniel Switkin</author>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.QrCode.Internal.MaskUtil.applyMaskPenaltyRule1(ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Apply mask penalty rule 1 and return the penalty. Find repetitive cells with the same color and
            give penalty to them. Example: 00000 or 11111.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.MaskUtil.applyMaskPenaltyRule2(ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Apply mask penalty rule 2 and return the penalty. Find 2x2 blocks with the same color and give
            penalty to them. This is actually equivalent to the spec's rule, which is to find MxN blocks and give a
            penalty proportional to (M-1)x(N-1), because this is the number of 2x2 blocks inside such a block.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.MaskUtil.applyMaskPenaltyRule3(ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Apply mask penalty rule 3 and return the penalty. Find consecutive cells of 00001011101 or
            10111010000, and give penalty to them.  If we find patterns like 000010111010000, we give
            penalties twice (i.e. 40 * 2).
            </summary>
            <param name="matrix">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.MaskUtil.applyMaskPenaltyRule4(ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Apply mask penalty rule 4 and return the penalty. Calculate the ratio of dark cells and give
            penalty if the ratio is far from 50%. It gives 10 penalty for 5% distance.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.MaskUtil.getDataMaskBit(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the mask bit for "getMaskPattern" at "x" and "y". See 8.8 of JISX0510:2004 for mask
            pattern conditions.
            </summary>
            <param name="maskPattern">The mask pattern.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.MaskUtil.applyMaskPenaltyRule1Internal(ZXing.QrCode.Internal.ByteMatrix,System.Boolean)">
            <summary>
            Helper function for applyMaskPenaltyRule1. We need this for doing this calculation in both
            vertical and horizontal orders respectively.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="isHorizontal">if set to <c>true</c> [is horizontal].</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.QrCode.Internal.MatrixUtil">
            <summary>
            
            </summary>
            <author>
            satorux@google.com (Satoru Takabayashi) - creator
            </author>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.clearMatrix(ZXing.QrCode.Internal.ByteMatrix)">
             <summary>
             Set all cells to 2.  2 means that the cell is empty (not set yet).
            
             JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding
             with the ByteMatrix initialized all to zero.
             </summary>
             <param name="matrix">The matrix.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.buildMatrix(ZXing.Common.BitArray,ZXing.QrCode.Internal.ErrorCorrectionLevel,ZXing.QrCode.Internal.Version,System.Int32,ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Build 2D matrix of QR Code from "dataBits" with "ecLevel", "version" and "getMaskPattern". On
            success, store the result in "matrix" and return true.
            </summary>
            <param name="dataBits">The data bits.</param>
            <param name="ecLevel">The ec level.</param>
            <param name="version">The version.</param>
            <param name="maskPattern">The mask pattern.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.embedBasicPatterns(ZXing.QrCode.Internal.Version,ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Embed basic patterns. On success, modify the matrix and return true.
            The basic patterns are:
            - Position detection patterns
            - Timing patterns
            - Dark dot at the left bottom corner
            - Position adjustment patterns, if need be
            </summary>
            <param name="version">The version.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.embedTypeInfo(ZXing.QrCode.Internal.ErrorCorrectionLevel,System.Int32,ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Embed type information. On success, modify the matrix.
            </summary>
            <param name="ecLevel">The ec level.</param>
            <param name="maskPattern">The mask pattern.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.maybeEmbedVersionInfo(ZXing.QrCode.Internal.Version,ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Embed version information if need be. On success, modify the matrix and return true.
            See 8.10 of JISX0510:2004 (p.47) for how to embed version information.
            </summary>
            <param name="version">The version.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.embedDataBits(ZXing.Common.BitArray,System.Int32,ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Embed "dataBits" using "getMaskPattern". On success, modify the matrix and return true.
            For debugging purposes, it skips masking process if "getMaskPattern" is -1.
            See 8.7 of JISX0510:2004 (p.38) for how to embed data bits.
            </summary>
            <param name="dataBits">The data bits.</param>
            <param name="maskPattern">The mask pattern.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.findMSBSet(System.Int32)">
            <summary>
            Return the position of the most significant bit set (to one) in the "value". The most
            significant bit is position 32. If there is no bit set, return 0. Examples:
            - findMSBSet(0) => 0
            - findMSBSet(1) => 1
            - findMSBSet(255) => 8
            </summary>
            <param name="value_Renamed">The value_ renamed.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.calculateBCHCode(System.Int32,System.Int32)">
             <summary>
             Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for "value" using polynomial "poly". The BCH
             code is used for encoding type information and version information.
             Example: Calculation of version information of 7.
             f(x) is created from 7.
               - 7 = 000111 in 6 bits
               - f(x) = x^2 + x^2 + x^1
             g(x) is given by the standard (p. 67)
               - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1
             Multiply f(x) by x^(18 - 6)
               - f'(x) = f(x) * x^(18 - 6)
               - f'(x) = x^14 + x^13 + x^12
             Calculate the remainder of f'(x) / g(x)
                     x^2
                     __________________________________________________
               g(x) )x^14 + x^13 + x^12
                     x^14 + x^13 + x^12 + x^11 + x^10 + x^7 + x^4 + x^2
                     --------------------------------------------------
                                          x^11 + x^10 + x^7 + x^4 + x^2
            
             The remainder is x^11 + x^10 + x^7 + x^4 + x^2
             Encode it in binary: 110010010100
             The return value is 0xc94 (1100 1001 0100)
            
             Since all coefficients in the polynomials are 1 or 0, we can do the calculation by bit
             operations. We don't care if coefficients are positive or negative.
             </summary>
             <param name="value">The value.</param>
             <param name="poly">The poly.</param>
             <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.makeTypeInfoBits(ZXing.QrCode.Internal.ErrorCorrectionLevel,System.Int32,ZXing.Common.BitArray)">
            <summary>
            Make bit vector of type information. On success, store the result in "bits" and return true.
            Encode error correction level and mask pattern. See 8.9 of
            JISX0510:2004 (p.45) for details.
            </summary>
            <param name="ecLevel">The ec level.</param>
            <param name="maskPattern">The mask pattern.</param>
            <param name="bits">The bits.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.makeVersionInfoBits(ZXing.QrCode.Internal.Version,ZXing.Common.BitArray)">
            <summary>
            Make bit vector of version information. On success, store the result in "bits" and return true.
            See 8.10 of JISX0510:2004 (p.45) for details.
            </summary>
            <param name="version">The version.</param>
            <param name="bits">The bits.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.isEmpty(System.Int32)">
            <summary>
            Check if "value" is empty.
            </summary>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the specified value is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.embedDarkDotAtLeftBottomCorner(ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Embed the lonely dark dot at left bottom corner. JISX0510:2004 (p.46)
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.embedPositionAdjustmentPattern(System.Int32,System.Int32,ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            
            </summary>
            <param name="xStart">The x start.</param>
            <param name="yStart">The y start.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.embedPositionDetectionPatternsAndSeparators(ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Embed position detection patterns and surrounding vertical/horizontal separators.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:ZXing.QrCode.Internal.MatrixUtil.maybeEmbedPositionAdjustmentPatterns(ZXing.QrCode.Internal.Version,ZXing.QrCode.Internal.ByteMatrix)">
            <summary>
            Embed position adjustment patterns if need be.
            </summary>
            <param name="version">The version.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="T:ZXing.QrCode.Internal.QRCode">
            <author>satorux@google.com (Satoru Takabayashi) - creator</author>
            <author>dswitkin@google.com (Daniel Switkin) - ported from C++</author>
        </member>
        <member name="F:ZXing.QrCode.Internal.QRCode.NUM_MASK_PATTERNS">
            <summary>
            
            </summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.QRCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.QrCode.Internal.QRCode"/> class.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.QRCode.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:ZXing.QrCode.Internal.QRCode.ECLevel">
            <summary>
            Gets or sets the EC level.
            </summary>
            <value>
            The EC level.
            </value>
        </member>
        <member name="P:ZXing.QrCode.Internal.QRCode.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:ZXing.QrCode.Internal.QRCode.MaskPattern">
            <summary>
            Gets or sets the mask pattern.
            </summary>
            <value>
            The mask pattern.
            </value>
        </member>
        <member name="P:ZXing.QrCode.Internal.QRCode.Matrix">
            <summary>
            Gets or sets the matrix.
            </summary>
            <value>
            The matrix.
            </value>
        </member>
        <member name="M:ZXing.QrCode.Internal.QRCode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:ZXing.QrCode.Internal.QRCode.isValidMaskPattern(System.Int32)">
            <summary>
            Check if "mask_pattern" is valid.
            </summary>
            <param name="maskPattern">The mask pattern.</param>
            <returns>
              <c>true</c> if [is valid mask pattern] [the specified mask pattern]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ZXing.QrCode.QrCodeEncodingOptions">
            <summary>
            The class holds the available options for the QrCodeWriter
            </summary>
        </member>
        <member name="P:ZXing.QrCode.QrCodeEncodingOptions.ErrorCorrection">
            <summary>
            Specifies what degree of error correction to use, for example in QR Codes.
            Type depends on the encoder. For example for QR codes it's type
            <see cref="T:ZXing.QrCode.Internal.ErrorCorrectionLevel"/>.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.QrCodeEncodingOptions.CharacterSet">
            <summary>
            Specifies what character encoding to use where applicable (type <see cref="T:System.String"/>)
            </summary>
        </member>
        <member name="P:ZXing.QrCode.QrCodeEncodingOptions.DisableECI">
            <summary>
            Explicitly disables ECI segment when generating QR Code
            That is against the specification of QR Code but some
            readers have problems if the charset is switched from
            ISO-8859-1 (default) to UTF-8 with the necessary ECI segment.
            If you set the property to true you can use UTF-8 encoding
            and the ECI segment is omitted.
            </summary>
        </member>
        <member name="P:ZXing.QrCode.QrCodeEncodingOptions.QrVersion">
            <summary>
            Specifies the exact version of QR code to be encoded. An integer, range 1 to 40. If the data specified
            cannot fit within the required version, a WriterException will be thrown.
            </summary>
        </member>
        <member name="T:ZXing.QrCode.QRCodeReader">
            <summary>
            This implementation can detect and decode QR Codes in an image.
            <author>Sean Owen</author>
            </summary>
        </member>
        <member name="M:ZXing.QrCode.QRCodeReader.getDecoder">
            <summary>
            Gets the decoder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZXing.QrCode.QRCodeReader.decode(ZXing.BinaryBitmap)">
             <summary>
             Locates and decodes a QR code in an image.
            
             <returns>a String representing the content encoded by the QR code</returns>
             </summary>
        </member>
        <member name="M:ZXing.QrCode.QRCodeReader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>
            Locates and decodes a barcode in some format within an image. This method also accepts
            hints, each possibly associated to some data, which may help the implementation decode.
            </summary>
            <param name="image">image of barcode to decode</param>
            <param name="hints">passed as a <see cref="T:System.Collections.Generic.IDictionary`2"/> from <see cref="T:ZXing.DecodeHintType"/>
            to arbitrary data. The
            meaning of the data depends upon the hint type. The implementation may or may not do
            anything with these hints.</param>
            <returns>
            String which the barcode encodes
            </returns>
        </member>
        <member name="M:ZXing.QrCode.QRCodeReader.reset">
            <summary>
            Resets any internal state the implementation has after a decode, to prepare it
            for reuse.
            </summary>
        </member>
        <member name="M:ZXing.QrCode.QRCodeReader.extractPureBits(ZXing.Common.BitMatrix)">
            <summary>
            This method detects a code in a "pure" image -- that is, pure monochrome image
            which contains only an unrotated, unskewed, image of a code, with some white border
            around it. This is a specialized method that works exceptionally fast in this special
            case.
            
            <seealso cref="M:ZXing.Datamatrix.DataMatrixReader.extractPureBits(ZXing.Common.BitMatrix)" />
            </summary>
        </member>
        <member name="T:ZXing.QrCode.QRCodeWriter">
             <summary>
             This object renders a QR Code as a BitMatrix 2D array of greyscale values.
            
             <author>dswitkin@google.com (Daniel Switkin)</author>
             </summary>
        </member>
        <member name="M:ZXing.QrCode.QRCodeWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32)">
            <summary>
            Encode a barcode using the default settings.
            </summary>
            <param name="contents">The contents to encode in the barcode</param>
            <param name="format">The barcode format to generate</param>
            <param name="width">The preferred width in pixels</param>
            <param name="height">The preferred height in pixels</param>
            <returns>
            The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)
            </returns>
        </member>
        <member name="M:ZXing.QrCode.QRCodeWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>
            </summary>
            <param name="contents">The contents to encode in the barcode</param>
            <param name="format">The barcode format to generate</param>
            <param name="width">The preferred width in pixels</param>
            <param name="height">The preferred height in pixels</param>
            <param name="hints">Additional parameters to supply to the encoder</param>
            <returns>
            The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)
            </returns>
        </member>
        <member name="T:ZXing.Reader">
            <summary>
            Implementations of this interface can decode an image of a barcode in some format into
            the String it encodes. For example, <see cref="T:ZXing.QrCode.QRCodeReader" /> can
            decode a QR code. The decoder may optionally receive hints from the caller which may help
            it decode more quickly or accurately.
            
            See <see cref="T:ZXing.MultiFormatReader" />, which attempts to determine what barcode
            format is present within the image as well, and then decodes it accordingly.
            </summary>
            <author>Sean Owen</author>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="M:ZXing.Reader.decode(ZXing.BinaryBitmap)">
            <summary>
            Locates and decodes a barcode in some format within an image.
            </summary>
            <param name="image">image of barcode to decode</param>
            <returns>String which the barcode encodes</returns>
        </member>
        <member name="M:ZXing.Reader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary> Locates and decodes a barcode in some format within an image. This method also accepts
            hints, each possibly associated to some data, which may help the implementation decode.
            </summary>
            <param name="image">image of barcode to decode</param>
            <param name="hints">passed as a <see cref="T:System.Collections.Generic.IDictionary`2" /> from <see cref="T:ZXing.DecodeHintType" />
            to arbitrary data. The
            meaning of the data depends upon the hint type. The implementation may or may not do
            anything with these hints.
            </param>
            <returns>String which the barcode encodes</returns>
        </member>
        <member name="M:ZXing.Reader.reset">
            <summary>
            Resets any internal state the implementation has after a decode, to prepare it
            for reuse.
            </summary>
        </member>
        <member name="T:ZXing.ReaderException">
            <summary>
            The general exception class throw when something goes wrong during decoding of a barcode.
            This includes, but is not limited to, failing checksums / error correction algorithms, being
            unable to locate finder timing patterns, and so on.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.ReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.ReaderException"/> class.
            </summary>
        </member>
        <member name="M:ZXing.ReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.ReaderException"/> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ZXing.ReaderException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.ReaderException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ZXing.ReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.ReaderException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="message"></param>
        </member>
        <member name="T:ZXing.Rendering.BitmapRenderer">
            <summary>
            Renders a <see cref="T:ZXing.Common.BitMatrix" /> to a <see cref="T:System.Drawing.Bitmap" /> image
            </summary>
        </member>
        <member name="P:ZXing.Rendering.BitmapRenderer.Foreground">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <value>The foreground color.</value>
        </member>
        <member name="P:ZXing.Rendering.BitmapRenderer.Background">
            <summary>
            Gets or sets the background color.
            </summary>
            <value>The background color.</value>
        </member>
        <member name="P:ZXing.Rendering.BitmapRenderer.DpiX">
            <summary>
            Gets or sets the resolution which should be used to create the bitmap
            If nothing is set the current system settings are used
            </summary>
        </member>
        <member name="P:ZXing.Rendering.BitmapRenderer.DpiY">
            <summary>
            Gets or sets the resolution which should be used to create the bitmap
            If nothing is set the current system settings are used
            </summary>
        </member>
        <member name="P:ZXing.Rendering.BitmapRenderer.TextFont">
            <summary>
            Gets or sets the text font.
            </summary>
            <value>
            The text font.
            </value>
        </member>
        <member name="M:ZXing.Rendering.BitmapRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Rendering.BitmapRenderer"/> class.
            </summary>
        </member>
        <member name="M:ZXing.Rendering.BitmapRenderer.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String)">
            <summary>
            Renders the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="format">The format.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Rendering.BitmapRenderer.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String,ZXing.Common.EncodingOptions)">
            <summary>
            Renders the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="format">The format.</param>
            <param name="content">The content.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Rendering.GeometryRenderer">
            <summary>
            Renders a barcode into a geometry
            Autor: Rob Fonseca-Ensor
            </summary>
        </member>
        <member name="M:ZXing.Rendering.GeometryRenderer.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String)">
            <summary>
            Renders the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="format">The format.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Rendering.GeometryRenderer.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String,ZXing.Common.EncodingOptions)">
            <summary>
            Renders the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="format">The format.</param>
            <param name="content">The content.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Rendering.IBarcodeRenderer`1">
            <summary>
            Interface for a class to convert a BitMatrix to an output image format
            </summary>
        </member>
        <member name="M:ZXing.Rendering.IBarcodeRenderer`1.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String)">
            <summary>
            Renders the specified matrix to its graphically representation
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="format">The format.</param>
            <param name="content">The encoded content of the barcode which should be included in the image.
            That can be the numbers below a 1D barcode or something other.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Rendering.IBarcodeRenderer`1.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String,ZXing.Common.EncodingOptions)">
            <summary>
            Renders the specified matrix to its graphically representation
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="format">The format.</param>
            <param name="content">The encoded content of the barcode which should be included in the image.
            That can be the numbers below a 1D barcode or something other.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Rendering.PixelData">
            <summary>
            represents the generated code as a byte array with pixel data (4 byte per pixel, BGRA)
            </summary>
            <summary>
            represents the generated code as a byte array with pixel data (4 byte per pixel, BGRA)
            </summary>
        </member>
        <member name="M:ZXing.Rendering.PixelData.ToBitmap">
            <summary>
            converts the pixel data to a bitmap object
            </summary>
            <returns></returns>
        </member>
        <member name="P:ZXing.Rendering.PixelData.Pixels">
            <summary>
            the generated code as byte array of BGRA pixels
            </summary>
        </member>
        <member name="P:ZXing.Rendering.PixelData.Width">
            <summary>
            the width of the image
            </summary>
        </member>
        <member name="P:ZXing.Rendering.PixelData.Height">
            <summary>
            the height of the image
            </summary>
        </member>
        <member name="T:ZXing.Rendering.PixelDataRenderer">
            <summary>
            Renders a <see cref="T:ZXing.Common.BitMatrix" /> to an byte array with pixel data (4 byte per pixel, BGRA)
            </summary>
        </member>
        <member name="P:ZXing.Rendering.PixelDataRenderer.Foreground">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <value>
            The foreground color.
            </value>
        </member>
        <member name="P:ZXing.Rendering.PixelDataRenderer.Background">
            <summary>
            Gets or sets the background color.
            </summary>
            <value>
            The background color.
            </value>
        </member>
        <member name="M:ZXing.Rendering.PixelDataRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Rendering.PixelDataRenderer"/> class.
            </summary>
        </member>
        <member name="M:ZXing.Rendering.PixelDataRenderer.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String)">
            <summary>
            Renders the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="format">The format.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Rendering.PixelDataRenderer.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String,ZXing.Common.EncodingOptions)">
            <summary>
            Renders the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="format">The format.</param>
            <param name="content">The content.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Rendering.SvgRenderer">
            <summary>
            Renders a barcode into a Svg image
            </summary>
        </member>
        <member name="P:ZXing.Rendering.SvgRenderer.Foreground">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <value>The foreground color.</value>
        </member>
        <member name="P:ZXing.Rendering.SvgRenderer.Background">
            <summary>
            Gets or sets the background color.
            </summary>
            <value>The background color.</value>
        </member>
        <member name="P:ZXing.Rendering.SvgRenderer.FontName">
            <summary>
            Gets or sets the font family name
            </summary>
            <value>The font family name.</value>
        </member>
        <member name="P:ZXing.Rendering.SvgRenderer.FontSize">
            <summary>
            Gets or sets the font size in pixel
            </summary>
            <value>The font size in pixel.</value>
        </member>
        <member name="M:ZXing.Rendering.SvgRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Rendering.SvgRenderer"/> class.
            </summary>
        </member>
        <member name="M:ZXing.Rendering.SvgRenderer.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String)">
            <summary>
            Renders the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="format">The format.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Rendering.SvgRenderer.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String,ZXing.Common.EncodingOptions)">
            <summary>
            Renders the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="format">The format.</param>
            <param name="content">The content.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Rendering.SvgRenderer.SvgImage">
            <summary>
            Represents a barcode as a Svg image
            </summary>
        </member>
        <member name="P:ZXing.Rendering.SvgRenderer.SvgImage.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:ZXing.Rendering.SvgRenderer.SvgImage.Height">
            <summary>
            The original height of the bitmatrix for the barcode
            </summary>
        </member>
        <member name="P:ZXing.Rendering.SvgRenderer.SvgImage.Width">
            <summary>
            The original width of the bitmatrix for the barcode
            </summary>
        </member>
        <member name="M:ZXing.Rendering.SvgRenderer.SvgImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Rendering.SvgRenderer.SvgImage"/> class.
            </summary>
        </member>
        <member name="M:ZXing.Rendering.SvgRenderer.SvgImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Rendering.SvgRenderer.SvgImage"/> class.
            </summary>
        </member>
        <member name="M:ZXing.Rendering.SvgRenderer.SvgImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Rendering.SvgRenderer.SvgImage"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:ZXing.Rendering.SvgRenderer.SvgImage.ToString">
            <summary>
            Gives the XML representation of the SVG image
            </summary>
        </member>
        <member name="T:ZXing.Rendering.WriteableBitmapRenderer">
            <summary>
            Renders a <see cref="T:ZXing.Common.BitMatrix" /> to a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" />
            </summary>
        </member>
        <member name="P:ZXing.Rendering.WriteableBitmapRenderer.Foreground">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <value>
            The foreground color.
            </value>
        </member>
        <member name="P:ZXing.Rendering.WriteableBitmapRenderer.Background">
            <summary>
            Gets or sets the background color.
            </summary>
            <value>
            The background color.
            </value>
        </member>
        <member name="P:ZXing.Rendering.WriteableBitmapRenderer.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
            <value>
            The font family.
            </value>
        </member>
        <member name="P:ZXing.Rendering.WriteableBitmapRenderer.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>
            The size of the font.
            </value>
        </member>
        <member name="P:ZXing.Rendering.WriteableBitmapRenderer.FontStretch">
            <summary>
            Gets or sets the font stretch.
            </summary>
            <value>
            The font stretch.
            </value>
        </member>
        <member name="P:ZXing.Rendering.WriteableBitmapRenderer.FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
            <value>
            The font style.
            </value>
        </member>
        <member name="P:ZXing.Rendering.WriteableBitmapRenderer.FontWeight">
            <summary>
            Gets or sets the font weight.
            </summary>
            <value>
            The font weight.
            </value>
        </member>
        <member name="M:ZXing.Rendering.WriteableBitmapRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Rendering.WriteableBitmapRenderer"/> class.
            </summary>
        </member>
        <member name="M:ZXing.Rendering.WriteableBitmapRenderer.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String)">
            <summary>
            Renders the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="format">The format.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.Rendering.WriteableBitmapRenderer.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String,ZXing.Common.EncodingOptions)">
            <summary>
            Renders the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="format">The format.</param>
            <param name="content">The content.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Result">
            <summary>
            Encapsulates the result of decoding a barcode within an image.
            </summary>
        </member>
        <member name="P:ZXing.Result.Text">
            <returns>raw text encoded by the barcode, if applicable, otherwise <code>null</code></returns>
        </member>
        <member name="P:ZXing.Result.RawBytes">
            <returns>raw bytes encoded by the barcode, if applicable, otherwise <code>null</code></returns>
        </member>
        <member name="P:ZXing.Result.ResultPoints">
            <returns>
            points related to the barcode in the image. These are typically points
            identifying finder patterns or the corners of the barcode. The exact meaning is
            specific to the type of barcode that was decoded.
            </returns>
        </member>
        <member name="P:ZXing.Result.BarcodeFormat">
            <returns>{@link BarcodeFormat} representing the format of the barcode that was decoded</returns>
        </member>
        <member name="P:ZXing.Result.ResultMetadata">
            <returns>
            {@link Hashtable} mapping {@link ResultMetadataType} keys to values. May be
            <code>null</code>. This contains optional metadata about what was detected about the barcode,
            like orientation.
            </returns>
        </member>
        <member name="P:ZXing.Result.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:ZXing.Result.NumBits">
            <summary>
            how many bits of <see cref="P:ZXing.Result.RawBytes"/> are valid; typically 8 times its length
            </summary>
        </member>
        <member name="M:ZXing.Result.#ctor(System.String,System.Byte[],ZXing.ResultPoint[],ZXing.BarcodeFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Result"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="rawBytes">The raw bytes.</param>
            <param name="resultPoints">The result points.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:ZXing.Result.#ctor(System.String,System.Byte[],System.Int32,ZXing.ResultPoint[],ZXing.BarcodeFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Result"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="rawBytes">The raw bytes.</param>
            <param name="numBits"></param>
            <param name="resultPoints">The result points.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:ZXing.Result.#ctor(System.String,System.Byte[],ZXing.ResultPoint[],ZXing.BarcodeFormat,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Result"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="rawBytes">The raw bytes.</param>
            <param name="resultPoints">The result points.</param>
            <param name="format">The format.</param>
            <param name="timestamp">The timestamp.</param>
        </member>
        <member name="M:ZXing.Result.#ctor(System.String,System.Byte[],System.Int32,ZXing.ResultPoint[],ZXing.BarcodeFormat,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.Result"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="rawBytes">The raw bytes.</param>
            <param name="numBits"></param>
            <param name="resultPoints">The result points.</param>
            <param name="format">The format.</param>
            <param name="timestamp">The timestamp.</param>
        </member>
        <member name="M:ZXing.Result.putMetadata(ZXing.ResultMetadataType,System.Object)">
            <summary>
            Adds one metadata to the result
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ZXing.Result.putAllMetadata(System.Collections.Generic.IDictionary{ZXing.ResultMetadataType,System.Object})">
            <summary>
            Adds a list of metadata to the result
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:ZXing.Result.addResultPoints(ZXing.ResultPoint[])">
            <summary>
            Adds the result points.
            </summary>
            <param name="newPoints">The new points.</param>
        </member>
        <member name="M:ZXing.Result.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:ZXing.ResultMetadataType">
            <summary>
            Represents some type of metadata about the result of the decoding that the decoder
            wishes to communicate back to the caller.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="F:ZXing.ResultMetadataType.OTHER">
            <summary>
            Unspecified, application-specific metadata. Maps to an unspecified {@link Object}.
            </summary>
        </member>
        <member name="F:ZXing.ResultMetadataType.ORIENTATION">
            <summary>
            Denotes the likely approximate orientation of the barcode in the image. This value
            is given as degrees rotated clockwise from the normal, upright orientation.
            For example a 1D barcode which was found by reading top-to-bottom would be
            said to have orientation "90". This key maps to an {@link Integer} whose
            value is in the range [0,360).
            </summary>
        </member>
        <member name="F:ZXing.ResultMetadataType.BYTE_SEGMENTS">
            <summary>
            <p>2D barcode formats typically encode text, but allow for a sort of 'byte mode'
            which is sometimes used to encode binary data. While {@link Result} makes available
            the complete raw bytes in the barcode for these formats, it does not offer the bytes
            from the byte segments alone.</p>
            <p>This maps to a {@link java.util.List} of byte arrays corresponding to the
            raw bytes in the byte segments in the barcode, in order.</p>
            </summary>
        </member>
        <member name="F:ZXing.ResultMetadataType.ERROR_CORRECTION_LEVEL">
            <summary>
            Error correction level used, if applicable. The value type depends on the
            format, but is typically a String.
            </summary>
        </member>
        <member name="F:ZXing.ResultMetadataType.ISSUE_NUMBER">
            <summary>
            For some periodicals, indicates the issue number as an {@link Integer}.
            </summary>
        </member>
        <member name="F:ZXing.ResultMetadataType.SUGGESTED_PRICE">
            <summary>
            For some products, indicates the suggested retail price in the barcode as a
            formatted {@link String}.
            </summary>
        </member>
        <member name="F:ZXing.ResultMetadataType.POSSIBLE_COUNTRY">
            <summary>
            For some products, the possible country of manufacture as a {@link String} denoting the
            ISO country code. Some map to multiple possible countries, like "US/CA".
            </summary>
        </member>
        <member name="F:ZXing.ResultMetadataType.UPC_EAN_EXTENSION">
            <summary>
            For some products, the extension text
            </summary>
        </member>
        <member name="F:ZXing.ResultMetadataType.STRUCTURED_APPEND_SEQUENCE">
            <summary>
            If the code format supports structured append and
            the current scanned code is part of one then the
            sequence number is given with it.
            </summary>
        </member>
        <member name="F:ZXing.ResultMetadataType.STRUCTURED_APPEND_PARITY">
            <summary>
            If the code format supports structured append and
            the current scanned code is part of one then the
            parity is given with it.
            </summary>
        </member>
        <member name="F:ZXing.ResultMetadataType.PDF417_EXTRA_METADATA">
            <summary>
            PDF417-specific metadata
            </summary>
        </member>
        <member name="F:ZXing.ResultMetadataType.AZTEC_EXTRA_METADATA">
            <summary>
            Aztec-specific metadata
            </summary>
        </member>
        <member name="T:ZXing.ResultPoint">
            <summary>
            Encapsulates a point of interest in an image containing a barcode. Typically, this
            would be the location of a finder pattern or the corner of the barcode, for example.
            </summary>
            <author>Sean Owen</author>
        </member>
        <member name="M:ZXing.ResultPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.ResultPoint"/> class.
            </summary>
        </member>
        <member name="M:ZXing.ResultPoint.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.ResultPoint"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="P:ZXing.ResultPoint.X">
            <summary>
            Gets the X.
            </summary>
        </member>
        <member name="P:ZXing.ResultPoint.Y">
            <summary>
            Gets the Y.
            </summary>
        </member>
        <member name="M:ZXing.ResultPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ZXing.ResultPoint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:ZXing.ResultPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:ZXing.ResultPoint.orderBestPatterns(ZXing.ResultPoint[])">
            <summary>
            Orders an array of three ResultPoints in an order [A,B,C] such that AB is less than AC and
            BC is less than AC and the angle between BC and BA is less than 180 degrees.
            </summary>
            <param name="patterns">array of three <see cref="T:ZXing.ResultPoint" /> to order</param>
        </member>
        <member name="M:ZXing.ResultPoint.distance(ZXing.ResultPoint,ZXing.ResultPoint)">
            <summary>
            calculates the distance between two points
            </summary>
            <param name="pattern1">first pattern</param>
            <param name="pattern2">second pattern</param>
            <returns>
            distance between two points
            </returns>
        </member>
        <member name="M:ZXing.ResultPoint.crossProductZ(ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint)">
            <summary>
            Returns the z component of the cross product between vectors BC and BA.
            </summary>
        </member>
        <member name="T:ZXing.ResultPointCallback">
            <summary> Callback which is invoked when a possible result point (significant
            point in the barcode image such as a corner) is found.
            
            </summary>
            <seealso cref="F:ZXing.DecodeHintType.NEED_RESULT_POINT_CALLBACK">
            </seealso>
        </member>
        <member name="T:ZXing.RGBLuminanceSource">
            <summary>
            Luminance source class which support different formats of images.
            </summary>
        </member>
        <member name="T:ZXing.RGBLuminanceSource.BitmapFormat">
            <summary>
            enumeration of supported bitmap format which the RGBLuminanceSource can process
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.Unknown">
            <summary>
            format of the byte[] isn't known. RGBLuminanceSource tries to determine the best possible value
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.Gray8">
            <summary>
            grayscale array, the byte array is a luminance array with 1 byte per pixel
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.Gray16">
            <summary>
            grayscale array, the byte array is a luminance array with 2 bytes per pixel
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.RGB24">
            <summary>
            3 bytes per pixel with the channels red, green and blue
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.RGB32">
            <summary>
            4 bytes per pixel with the channels red, green and blue
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.ARGB32">
            <summary>
            4 bytes per pixel with the channels alpha, red, green and blue
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.BGR24">
            <summary>
            3 bytes per pixel with the channels blue, green and red
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.BGR32">
            <summary>
            4 bytes per pixel with the channels blue, green and red
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.BGRA32">
            <summary>
            4 bytes per pixel with the channels blue, green, red and alpha
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.RGB565">
            <summary>
            2 bytes per pixel, 5 bit red, 6 bits green and 5 bits blue
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.RGBA32">
            <summary>
            4 bytes per pixel with the channels red, green, blue and alpha
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.UYVY">
            <summary>
            4 bytes for two pixels, UYVY formatted
            </summary>
        </member>
        <member name="F:ZXing.RGBLuminanceSource.BitmapFormat.YUYV">
            <summary>
            4 bytes for two pixels, YUYV formatted
            </summary>
        </member>
        <member name="M:ZXing.RGBLuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.RGBLuminanceSource"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:ZXing.RGBLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.RGBLuminanceSource"/> class.
            It supports a byte array with 3 bytes per pixel (RGB24).
            </summary>
            <param name="rgbRawBytes">The RGB raw bytes.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:ZXing.RGBLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.RGBLuminanceSource"/> class.
            It supports a byte array with 1 byte per pixel (Gray8).
            That means the whole array consists of the luminance values (grayscale).
            </summary>
            <param name="luminanceArray">The luminance array.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="is8Bit">if set to <c>true</c> [is8 bit].</param>
        </member>
        <member name="M:ZXing.RGBLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.RGBLuminanceSource"/> class.
            It supports a byte array with 3 bytes per pixel (RGB24).
            </summary>
            <param name="rgbRawBytes">The RGB raw bytes.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitmapFormat">The bitmap format.</param>
        </member>
        <member name="M:ZXing.RGBLuminanceSource.CreateLuminanceSource(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Should create a new luminance source with the right class type.
            The method is used in methods crop and rotate.
            </summary>
            <param name="newLuminances">The new luminances.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.RGBLuminanceSource.CalculateLuminance(System.Byte[],ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>
            calculates the luminance values for the given byte array and bitmap format
            </summary>
            <param name="rgbRawBytes"></param>
            <param name="bitmapFormat"></param>
        </member>
        <member name="T:ZXing.SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:ZXing.SupportClass.GetCharsFromString(System.String,System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Copies an array of chars obtained from a String into a specified array of chars
            </summary>
            <param name="sourceString">The String to get the chars from</param>
            <param name="sourceStart">Position of the String to start getting the chars</param>
            <param name="sourceEnd">Position of the String to end getting the chars</param>
            <param name="destinationArray">Array to return the chars</param>
            <param name="destinationStart">Position of the destination array of chars to start storing the chars</param>
            <returns>An array of chars</returns>
        </member>
        <member name="M:ZXing.SupportClass.SetCapacity``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Sets the capacity for the specified List
            </summary>
            <param name="vector">The List which capacity will be set</param>
            <param name="newCapacity">The new capacity value</param>
        </member>
        <member name="M:ZXing.SupportClass.toStringArray(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts a string-Collection to an array
            </summary>
            <param name="strings">The strings.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.SupportClass.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Joins all elements to one string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator">The separator.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:ZXing.SupportClass.Fill``1(``0[],``0)">
            <summary>
            Fills the specified array.
            (can't use extension method because of .Net 2.0 support)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ZXing.SupportClass.Fill``1(``0[],System.Int32,System.Int32,``0)">
            <summary>
            Fills the specified array.
            (can't use extension method because of .Net 2.0 support)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ZXing.SupportClass.ToBinaryString(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.SupportClass.bitCount(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:ZXing.SupportClass.GetValue``1(System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object},ZXing.DecodeHintType,``0)">
            <summary>
            Savely gets the value of a decoding hint
            if hints is null the default is returned
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hints">The hints.</param>
            <param name="hintType">Type of the hint.</param>
            <param name="default">The @default.</param>
            <returns></returns>
        </member>
        <member name="T:ZXing.Writer">
            <summary> The base class for all objects which encode/generate a barcode image.
            
            </summary>
            <author>  dswitkin@google.com (Daniel Switkin)
            </author>
            <author>www.Redivivus.in (suraj.supekar@redivivus.in) - Ported from ZXING Java Source 
            </author>
        </member>
        <member name="M:ZXing.Writer.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32)">
            <summary>
            Encode a barcode using the default settings.
            </summary>
            <param name="contents">The contents to encode in the barcode</param>
            <param name="format">The barcode format to generate</param>
            <param name="width">The preferred width in pixels</param>
            <param name="height">The preferred height in pixels</param>
            <returns> The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)</returns>
        </member>
        <member name="M:ZXing.Writer.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary> </summary>
            <param name="contents">The contents to encode in the barcode</param>
            <param name="format">The barcode format to generate</param>
            <param name="width">The preferred width in pixels</param>
            <param name="height">The preferred height in pixels</param>
            <param name="hints">Additional parameters to supply to the encoder</param>
            <returns> The generated barcode as a Matrix of unsigned bytes (0 == black, 255 == white)</returns>
        </member>
        <member name="T:ZXing.WriterException">
            <summary>
            A base class which covers the range of exceptions which may occur when encoding a barcode using
            the Writer framework.
            </summary>
            <author>dswitkin@google.com (Daniel Switkin)</author>
        </member>
        <member name="M:ZXing.WriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.WriterException"/> class.
            </summary>
        </member>
        <member name="M:ZXing.WriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.WriterException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ZXing.WriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ZXing.WriterException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerExc">The inner exc.</param>
        </member>
        <member name="T:log4net.Appender.AdoNetAppender">
            <summary>
            Appender that logs to a database.
            </summary>
            <remarks>
            <para>
            <see cref="T:log4net.Appender.AdoNetAppender"/> appends logging events to a table within a
            database. The appender can be configured to specify the connection 
            string by setting the <see cref="P:log4net.Appender.AdoNetAppender.ConnectionString"/> property. 
            The connection type (provider) can be specified by setting the <see cref="P:log4net.Appender.AdoNetAppender.ConnectionType"/>
            property. For more information on database connection strings for
            your specific database see <a href="http://www.connectionstrings.com/">http://www.connectionstrings.com/</a>.
            </para>
            <para>
            Records are written into the database either using a prepared
            statement or a stored procedure. The <see cref="P:log4net.Appender.AdoNetAppender.CommandType"/> property
            is set to <see cref="F:System.Data.CommandType.Text"/> (<c>System.Data.CommandType.Text</c>) to specify a prepared statement
            or to <see cref="F:System.Data.CommandType.StoredProcedure"/> (<c>System.Data.CommandType.StoredProcedure</c>) to specify a stored
            procedure.
            </para>
            <para>
            The prepared statement text or the name of the stored procedure
            must be set in the <see cref="P:log4net.Appender.AdoNetAppender.CommandText"/> property.
            </para>
            <para>
            The prepared statement or stored procedure can take a number
            of parameters. Parameters are added using the <see cref="M:log4net.Appender.AdoNetAppender.AddParameter(log4net.Appender.AdoNetAppenderParameter)"/>
            method. This adds a single <see cref="T:log4net.Appender.AdoNetAppenderParameter"/> to the
            ordered list of parameters. The <see cref="T:log4net.Appender.AdoNetAppenderParameter"/>
            type may be subclassed if required to provide database specific
            functionality. The <see cref="T:log4net.Appender.AdoNetAppenderParameter"/> specifies
            the parameter name, database type, size, and how the value should
            be generated using a <see cref="T:log4net.Layout.ILayout"/>.
            </para>
            </remarks>
            <example>
            An example of a SQL Server table that could be logged to:
            <code lang="SQL">
            CREATE TABLE [dbo].[Log] ( 
              [ID] [int] IDENTITY (1, 1) NOT NULL ,
              [Date] [datetime] NOT NULL ,
              [Thread] [varchar] (255) NOT NULL ,
              [Level] [varchar] (20) NOT NULL ,
              [Logger] [varchar] (255) NOT NULL ,
              [Message] [varchar] (4000) NOT NULL 
            ) ON [PRIMARY]
            </code>
            </example>
            <example>
            An example configuration to log to the above table:
            <code lang="XML" escaped="true">
            <appender name="AdoNetAppender_SqlServer" type="log4net.Appender.AdoNetAppender" >
              <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
              <connectionString value="data source=SQLSVR;initial catalog=test_log4net;integrated security=false;persist security info=True;User ID=sa;Password=sa" />
              <commandText value="INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)" />
              <parameter>
                <parameterName value="@log_date" />
                <dbType value="DateTime" />
                <layout type="log4net.Layout.PatternLayout" value="%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}" />
              </parameter>
              <parameter>
                <parameterName value="@thread" />
                <dbType value="String" />
                <size value="255" />
                <layout type="log4net.Layout.PatternLayout" value="%thread" />
              </parameter>
              <parameter>
                <parameterName value="@log_level" />
                <dbType value="String" />
                <size value="50" />
                <layout type="log4net.Layout.PatternLayout" value="%level" />
              </parameter>
              <parameter>
                <parameterName value="@logger" />
                <dbType value="String" />
                <size value="255" />
                <layout type="log4net.Layout.PatternLayout" value="%logger" />
              </parameter>
              <parameter>
                <parameterName value="@message" />
                <dbType value="String" />
                <size value="4000" />
                <layout type="log4net.Layout.PatternLayout" value="%message" />
              </parameter>
            </appender>
            </code>
            </example>
            <author>Julian Biddle</author>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Lance Nehring</author>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:log4net.Appender.AdoNetAppender" /> class.
            </summary>
            <remarks>
            Public default constructor to initialize a new instance of this class.
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.ConnectionString">
            <summary>
            Gets or sets the database connection string that is used to connect to 
            the database.
            </summary>
            <value>
            The database connection string used to connect to the database.
            </value>
            <remarks>
            <para>
            The connections string is specific to the connection type.
            See <see cref="P:log4net.Appender.AdoNetAppender.ConnectionType"/> for more information.
            </para>
            </remarks>
            <example>Connection string for MS Access via ODBC:
            <code>"DSN=MS Access Database;UID=admin;PWD=;SystemDB=C:\data\System.mdw;SafeTransactions = 0;FIL=MS Access;DriverID = 25;DBQ=C:\data\train33.mdb"</code>
            </example>
            <example>Another connection string for MS Access via ODBC:
            <code>"Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Work\cvs_root\log4net-1.2\access.mdb;UID=;PWD=;"</code>
            </example>
            <example>Connection string for MS Access via OLE DB:
            <code>"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Work\cvs_root\log4net-1.2\access.mdb;User Id=;Password=;"</code>
            </example>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.AppSettingsKey">
            <summary>
            The appSettings key from App.Config that contains the connection string.
            </summary>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.ConnectionStringName">
            <summary>
            The connectionStrings key from App.Config that contains the connection string.
            </summary>
            <remarks>
            This property requires at least .NET 2.0.
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.ConnectionType">
            <summary>
            Gets or sets the type name of the <see cref="T:System.Data.IDbConnection"/> connection
            that should be created.
            </summary>
            <value>
            The type name of the <see cref="T:System.Data.IDbConnection"/> connection.
            </value>
            <remarks>
            <para>
            The type name of the ADO.NET provider to use.
            </para>
            <para>
            The default is to use the OLE DB provider.
            </para>
            </remarks>
            <example>Use the OLE DB Provider. This is the default value.
            <code>System.Data.OleDb.OleDbConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code>
            </example>
            <example>Use the MS SQL Server Provider. 
            <code>System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code>
            </example>
            <example>Use the ODBC Provider. 
            <code>Microsoft.Data.Odbc.OdbcConnection,Microsoft.Data.Odbc,version=1.0.3300.0,publicKeyToken=b77a5c561934e089,culture=neutral</code>
            This is an optional package that you can download from 
            <a href="http://msdn.microsoft.com/downloads">http://msdn.microsoft.com/downloads</a> 
            search for <b>ODBC .NET Data Provider</b>.
            </example>
            <example>Use the Oracle Provider. 
            <code>System.Data.OracleClient.OracleConnection, System.Data.OracleClient, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code>
            This is an optional package that you can download from 
            <a href="http://msdn.microsoft.com/downloads">http://msdn.microsoft.com/downloads</a> 
            search for <b>.NET Managed Provider for Oracle</b>.
            </example>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.CommandText">
            <summary>
            Gets or sets the command text that is used to insert logging events
            into the database.
            </summary>
            <value>
            The command text used to insert logging events into the database.
            </value>
            <remarks>
            <para>
            Either the text of the prepared statement or the
            name of the stored procedure to execute to write into
            the database.
            </para>
            <para>
            The <see cref="P:log4net.Appender.AdoNetAppender.CommandType"/> property determines if
            this text is a prepared statement or a stored procedure.
            </para>
            <para>
            If this property is not set, the command text is retrieved by invoking
            <see cref="M:log4net.Appender.AdoNetAppender.GetLogStatement(log4net.Core.LoggingEvent)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.CommandType">
            <summary>
            Gets or sets the command type to execute.
            </summary>
            <value>
            The command type to execute.
            </value>
            <remarks>
            <para>
            This value may be either <see cref="F:System.Data.CommandType.Text"/> (<c>System.Data.CommandType.Text</c>) to specify
            that the <see cref="P:log4net.Appender.AdoNetAppender.CommandText"/> is a prepared statement to execute, 
            or <see cref="F:System.Data.CommandType.StoredProcedure"/> (<c>System.Data.CommandType.StoredProcedure</c>) to specify that the
            <see cref="P:log4net.Appender.AdoNetAppender.CommandText"/> property is the name of a stored procedure
            to execute.
            </para>
            <para>
            The default value is <see cref="F:System.Data.CommandType.Text"/> (<c>System.Data.CommandType.Text</c>).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.UseTransactions">
            <summary>
            Should transactions be used to insert logging events in the database.
            </summary>
            <value>
            <c>true</c> if transactions should be used to insert logging events in
            the database, otherwise <c>false</c>. The default value is <c>true</c>.
            </value>
            <remarks>
            <para>
            Gets or sets a value that indicates whether transactions should be used
            to insert logging events in the database.
            </para>
            <para>
            When set a single transaction will be used to insert the buffered events
            into the database. Otherwise each event will be inserted without using
            an explicit transaction.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:log4net.Appender.AdoNetAppender.SecurityContext"/> used to call the NetSend method.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.AdoNetAppender.SecurityContext"/> used to call the NetSend method.
            </value>
            <remarks>
            <para>
            Unless a <see cref="P:log4net.Appender.AdoNetAppender.SecurityContext"/> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider"/> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.ReconnectOnError">
            <summary>
            Should this appender try to reconnect to the database on error.
            </summary>
            <value>
            <c>true</c> if the appender should try to reconnect to the database after an
            error has occurred, otherwise <c>false</c>. The default value is <c>false</c>, 
            i.e. not to try to reconnect.
            </value>
            <remarks>
            <para>
            The default behaviour is for the appender not to try to reconnect to the
            database if an error occurs. Subsequent logging events are discarded.
            </para>
            <para>
            To force the appender to attempt to reconnect to the database set this
            property to <c>true</c>.
            </para>
            <note>
            When the appender attempts to connect to the database there may be a
            delay of up to the connection timeout specified in the connection string.
            This delay will block the calling application's thread. 
            Until the connection can be reestablished this potential delay may occur multiple times.
            </note>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.Connection">
            <summary>
            Gets or sets the underlying <see cref="T:System.Data.IDbConnection" />.
            </summary>
            <value>
            The underlying <see cref="T:System.Data.IDbConnection" />.
            </value>
            <remarks>
            <see cref="T:log4net.Appender.AdoNetAppender" /> creates a <see cref="T:System.Data.IDbConnection" /> to insert 
            logging events into a database.  Classes deriving from <see cref="T:log4net.Appender.AdoNetAppender" /> 
            can use this property to get or set this <see cref="T:System.Data.IDbConnection" />.  Use the 
            underlying <see cref="T:System.Data.IDbConnection" /> returned from <see cref="P:log4net.Appender.AdoNetAppender.Connection" /> if 
            you require access beyond that which <see cref="T:log4net.Appender.AdoNetAppender" /> provides.
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Appender.AdoNetAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.AdoNetAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.AdoNetAppender.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.OnClose">
            <summary>
            Override the parent method to close the database
            </summary>
            <remarks>
            <para>
            Closes the database command and database connection.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Inserts the events into the database.
            </summary>
            <param name="events">The events to insert into the database.</param>
            <remarks>
            <para>
            Insert all the events specified in the <paramref name="events"/>
            array into the database.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.AddParameter(log4net.Appender.AdoNetAppenderParameter)">
            <summary>
            Adds a parameter to the command.
            </summary>
            <param name="parameter">The parameter to add to the command.</param>
            <remarks>
            <para>
            Adds a parameter to the ordered list of command parameters.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.SendBuffer(System.Data.IDbTransaction,log4net.Core.LoggingEvent[])">
            <summary>
            Writes the events to the database using the transaction specified.
            </summary>
            <param name="dbTran">The transaction that the events will be executed under.</param>
            <param name="events">The array of events to insert into the database.</param>
            <remarks>
            <para>
            The transaction argument can be <c>null</c> if the appender has been
            configured not to use transactions. See <see cref="P:log4net.Appender.AdoNetAppender.UseTransactions"/>
            property for more information.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.GetLogStatement(log4net.Core.LoggingEvent)">
            <summary>
            Formats the log message into database statement text.
            </summary>
            <param name="logEvent">The event being logged.</param>
            <remarks>
            This method can be overridden by subclasses to provide 
            more control over the format of the database statement.
            </remarks>
            <returns>
            Text that can be passed to a <see cref="T:System.Data.IDbCommand"/>.
            </returns>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.CreateConnection(System.Type,System.String)">
            <summary>
            Creates an <see cref="T:System.Data.IDbConnection"/> instance used to connect to the database.
            </summary>
            <remarks>
            This method is called whenever a new IDbConnection is needed (i.e. when a reconnect is necessary).
            </remarks>
            <param name="connectionType">The <see cref="T:System.Type"/> of the <see cref="T:System.Data.IDbConnection"/> object.</param>
            <param name="connectionString">The connectionString output from the ResolveConnectionString method.</param>
            <returns>An <see cref="T:System.Data.IDbConnection"/> instance with a valid connection string.</returns>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.ResolveConnectionString(System.String@)">
            <summary>
            Resolves the connection string from the ConnectionString, ConnectionStringName, or AppSettingsKey
            property.
            </summary>
            <remarks>
            ConnectiongStringName is only supported on .NET 2.0 and higher.
            </remarks>
            <param name="connectionStringContext">Additional information describing the connection string.</param>
            <returns>A connection string used to connect to the database.</returns>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.ResolveConnectionType">
            <summary>
            Retrieves the class type of the ADO.NET provider.
            </summary>
            <remarks>
            <para>
            Gets the Type of the ADO.NET provider to use to connect to the
            database. This method resolves the type specified in the 
            <see cref="P:log4net.Appender.AdoNetAppender.ConnectionType"/> property.
            </para>
            <para>
            Subclasses can override this method to return a different type
            if necessary.
            </para>
            </remarks>
            <returns>The <see cref="T:System.Type"/> of the ADO.NET provider</returns>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.InitializeDatabaseConnection">
            <summary>
            Connects to the database.
            </summary>		
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.DiposeConnection">
            <summary>
            Cleanup the existing connection.
            </summary>
            <remarks>
            Calls the IDbConnection's <see cref="M:System.Data.IDbConnection.Close"/> method.
            </remarks>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_parameters">
            <summary>
            The list of <see cref="T:log4net.Appender.AdoNetAppenderParameter"/> objects.
            </summary>
            <remarks>
            <para>
            The list of <see cref="T:log4net.Appender.AdoNetAppenderParameter"/> objects.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_dbConnection">
            <summary>
            The <see cref="T:System.Data.IDbConnection" /> that will be used
            to insert logging events into a database.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_connectionString">
            <summary>
            Database connection string.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_appSettingsKey">
            <summary>
            The appSettings key from App.Config that contains the connection string.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_connectionStringName">
            <summary>
            The connectionStrings key from App.Config that contains the connection string.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_connectionType">
            <summary>
            String type name of the <see cref="T:System.Data.IDbConnection"/> type name.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_commandText">
            <summary>
            The text of the command.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_commandType">
            <summary>
            The command type.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_useTransactions">
            <summary>
            Indicates whether to use transactions when writing to the database.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_reconnectOnError">
            <summary>
            Indicates whether to reconnect when a connection is lost.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.declaringType">
            <summary>
            The fully qualified type of the AdoNetAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Appender.AdoNetAppenderParameter">
            <summary>
            Parameter type used by the <see cref="T:log4net.Appender.AdoNetAppender"/>.
            </summary>
            <remarks>
            <para>
            This class provides the basic database parameter properties
            as defined by the <see cref="T:System.Data.IDbDataParameter"/> interface.
            </para>
            <para>This type can be subclassed to provide database specific
            functionality. The two methods that are called externally are
            <see cref="M:log4net.Appender.AdoNetAppenderParameter.Prepare(System.Data.IDbCommand)"/> and <see cref="M:log4net.Appender.AdoNetAppenderParameter.FormatValue(System.Data.IDbCommand,log4net.Core.LoggingEvent)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppenderParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> class.
            </summary>
            <remarks>
            Default constructor for the AdoNetAppenderParameter class.
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppenderParameter.ParameterName">
            <summary>
            Gets or sets the name of this parameter.
            </summary>
            <value>
            The name of this parameter.
            </value>
            <remarks>
            <para>
            The name of this parameter. The parameter name
            must match up to a named parameter to the SQL stored procedure
            or prepared statement.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppenderParameter.DbType">
            <summary>
            Gets or sets the database type for this parameter.
            </summary>
            <value>
            The database type for this parameter.
            </value>
            <remarks>
            <para>
            The database type for this parameter. This property should
            be set to the database type from the <see cref="P:log4net.Appender.AdoNetAppenderParameter.DbType"/>
            enumeration. See <see cref="P:System.Data.IDataParameter.DbType"/>.
            </para>
            <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the type from the value.
            </para>
            </remarks>
            <seealso cref="P:System.Data.IDataParameter.DbType" />
        </member>
        <member name="P:log4net.Appender.AdoNetAppenderParameter.Precision">
            <summary>
            Gets or sets the precision for this parameter.
            </summary>
            <value>
            The precision for this parameter.
            </value>
            <remarks>
            <para>
            The maximum number of digits used to represent the Value.
            </para>
            <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the precision from the value.
            </para>
            </remarks>
            <seealso cref="P:System.Data.IDbDataParameter.Precision" />
        </member>
        <member name="P:log4net.Appender.AdoNetAppenderParameter.Scale">
            <summary>
            Gets or sets the scale for this parameter.
            </summary>
            <value>
            The scale for this parameter.
            </value>
            <remarks>
            <para>
            The number of decimal places to which Value is resolved.
            </para>
            <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the scale from the value.
            </para>
            </remarks>
            <seealso cref="P:System.Data.IDbDataParameter.Scale" />
        </member>
        <member name="P:log4net.Appender.AdoNetAppenderParameter.Size">
            <summary>
            Gets or sets the size for this parameter.
            </summary>
            <value>
            The size for this parameter.
            </value>
            <remarks>
            <para>
            The maximum size, in bytes, of the data within the column.
            </para>
            <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the size from the value.
            </para>
            <para>
            For BLOB data types like VARCHAR(max) it may be impossible to infer the value automatically, use -1 as the size in this case.
            </para>
            </remarks>
            <seealso cref="P:System.Data.IDbDataParameter.Size" />
        </member>
        <member name="P:log4net.Appender.AdoNetAppenderParameter.Layout">
            <summary>
            Gets or sets the <see cref="T:log4net.Layout.IRawLayout"/> to use to 
            render the logging event into an object for this 
            parameter.
            </summary>
            <value>
            The <see cref="T:log4net.Layout.IRawLayout"/> used to render the
            logging event into an object for this parameter.
            </value>
            <remarks>
            <para>
            The <see cref="T:log4net.Layout.IRawLayout"/> that renders the value for this
            parameter.
            </para>
            <para>
            The <see cref="T:log4net.Layout.RawLayoutConverter"/> can be used to adapt
            any <see cref="T:log4net.Layout.ILayout"/> into a <see cref="T:log4net.Layout.IRawLayout"/>
            for use in the property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppenderParameter.Prepare(System.Data.IDbCommand)">
            <summary>
            Prepare the specified database command object.
            </summary>
            <param name="command">The command to prepare.</param>
            <remarks>
            <para>
            Prepares the database command object by adding
            this parameter to its collection of parameters.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppenderParameter.FormatValue(System.Data.IDbCommand,log4net.Core.LoggingEvent)">
            <summary>
            Renders the logging event and set the parameter value in the command.
            </summary>
            <param name="command">The command containing the parameter.</param>
            <param name="loggingEvent">The event to be rendered.</param>
            <remarks>
            <para>
            Renders the logging event using this parameters layout
            object. Sets the value of the parameter on the command object.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_parameterName">
            <summary>
            The name of this parameter.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_dbType">
            <summary>
            The database type for this parameter.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_inferType">
            <summary>
            Flag to infer type rather than use the DbType
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_precision">
            <summary>
            The precision for this parameter.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_scale">
            <summary>
            The scale for this parameter.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_size">
            <summary>
            The size for this parameter.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_layout">
            <summary>
            The <see cref="T:log4net.Layout.IRawLayout"/> to use to render the
            logging event into an object for this parameter.
            </summary>
        </member>
        <member name="T:log4net.Appender.AnsiColorTerminalAppender">
            <summary>
            Appends logging events to the terminal using ANSI color escape sequences.
            </summary>
            <remarks>
            <para>
            AnsiColorTerminalAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user. It also allows the color of a specific level of message to be set.
            </para>
            <note>
            This appender expects the terminal to understand the VT100 control set 
            in order to interpret the color codes. If the terminal or console does not
            understand the control codes the behavior is not defined.
            </note>
            <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target"/> property can be set to direct the output to the
            error stream.
            </para>
            <para>
            NOTE: This appender writes each message to the <c>System.Console.Out</c> or 
            <c>System.Console.Error</c> that is set at the time the event is appended.
            Therefore it is possible to programmatically redirect the output of this appender 
            (for example NUnit does this to capture program output). While this is the desired
            behavior of this appender it may have security implications in your application. 
            </para>
            <para>
            When configuring the ANSI colored terminal appender, a mapping should be
            specified to map a logging level to a color. For example:
            </para>
            <code lang="XML" escaped="true">
            <mapping>
            	<level value="ERROR" />
            	<foreColor value="White" />
            	<backColor value="Red" />
                <attributes value="Bright,Underscore" />
            </mapping>
            <mapping>
            	<level value="DEBUG" />
            	<backColor value="Green" />
            </mapping>
            </code>
            <para>
            The Level is the standard log4net logging level and ForeColor and BackColor can be any
            of the following values:
            <list type="bullet">
            <item><term>Blue</term><description></description></item>
            <item><term>Green</term><description></description></item>
            <item><term>Red</term><description></description></item>
            <item><term>White</term><description></description></item>
            <item><term>Yellow</term><description></description></item>
            <item><term>Purple</term><description></description></item>
            <item><term>Cyan</term><description></description></item>
            </list>
            These color values cannot be combined together to make new colors.
            </para>
            <para>
            The attributes can be any combination of the following:
            <list type="bullet">
            <item><term>Bright</term><description>foreground is brighter</description></item>
            <item><term>Dim</term><description>foreground is dimmer</description></item>
            <item><term>Underscore</term><description>message is underlined</description></item>
            <item><term>Blink</term><description>foreground is blinking (does not work on all terminals)</description></item>
            <item><term>Reverse</term><description>foreground and background are reversed</description></item>
            <item><term>Hidden</term><description>output is hidden</description></item>
            <item><term>Strikethrough</term><description>message has a line through it</description></item>
            </list>
            While any of these attributes may be combined together not all combinations
            work well together, for example setting both <i>Bright</i> and <i>Dim</i> attributes makes
            no sense.
            </para>
            </remarks>
            <author>Patrick Wagstrom</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="T:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes">
            <summary>
            The enum of possible display attributes
            </summary>
            <remarks>
            <para>
            The following flags can be combined together to
            form the ANSI color attributes.
            </para>
            </remarks>
            <seealso cref="T:log4net.Appender.AnsiColorTerminalAppender" />
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Bright">
            <summary>
            text is bright
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Dim">
            <summary>
            text is dim
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Underscore">
            <summary>
            text is underlined
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Blink">
            <summary>
            text is blinking
            </summary>
            <remarks>
            Not all terminals support this attribute
            </remarks>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Reverse">
            <summary>
            text and background colors are reversed
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Hidden">
            <summary>
            text is hidden
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Strikethrough">
            <summary>
            text is displayed with a strikethrough
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Light">
            <summary>
            text color is light
            </summary>
        </member>
        <member name="T:log4net.Appender.AnsiColorTerminalAppender.AnsiColor">
            <summary>
            The enum of possible foreground or background color values for 
            use with the color mapping method
            </summary>
            <remarks>
            <para>
            The output can be in one for the following ANSI colors.
            </para>
            </remarks>
            <seealso cref="T:log4net.Appender.AnsiColorTerminalAppender" />
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Black">
            <summary>
            color is black
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Red">
            <summary>
            color is red
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Green">
            <summary>
            color is green
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Yellow">
            <summary>
            color is yellow
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Blue">
            <summary>
            color is blue
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Magenta">
            <summary>
            color is magenta
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Cyan">
            <summary>
            color is cyan
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.White">
            <summary>
            color is white
            </summary>
        </member>
        <member name="M:log4net.Appender.AnsiColorTerminalAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.AnsiColorTerminalAppender" /> class.
            </summary>
            <remarks>
            The instance of the <see cref="T:log4net.Appender.AnsiColorTerminalAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
        </member>
        <member name="P:log4net.Appender.AnsiColorTerminalAppender.Target">
            <summary>
            Target is the value of the console output stream.
            </summary>
            <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
            <remarks>
            <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AnsiColorTerminalAppender.AddMapping(log4net.Appender.AnsiColorTerminalAppender.LevelColors)">
            <summary>
            Add a mapping of level to color
            </summary>
            <param name="mapping">The mapping to add</param>
            <remarks>
            <para>
            Add a <see cref="T:log4net.Appender.AnsiColorTerminalAppender.LevelColors"/> mapping to this appender.
            Each mapping defines the foreground and background colours
            for a level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AnsiColorTerminalAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes the event to the console.
            </para>
            <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AnsiColorTerminalAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AnsiColorTerminalAppender.ActivateOptions">
            <summary>
            Initialize the options for this appender
            </summary>
            <remarks>
            <para>
            Initialize the level to color mappings set on this appender.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.ConsoleOut">
            <summary>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target"/> to use when writing to the Console 
            standard output stream.
            </summary>
            <remarks>
            <para>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target"/> to use when writing to the Console 
            standard output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.ConsoleError">
            <summary>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target"/> to use when writing to the Console 
            standard error output stream.
            </summary>
            <remarks>
            <para>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target"/> to use when writing to the Console 
            standard error output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.m_writeToErrorStream">
            <summary>
            Flag to write output to the error stream rather than the standard output stream
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.m_levelMapping">
            <summary>
            Mapping from level object to color value
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.PostEventCodes">
            <summary>
            Ansi code to reset terminal
            </summary>
        </member>
        <member name="T:log4net.Appender.AnsiColorTerminalAppender.LevelColors">
            <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
            <remarks>
            <para>
            Defines the mapping between a level and the color it should be displayed in.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ForeColor">
            <summary>
            The mapped foreground color for the specified level
            </summary>
            <remarks>
            <para>
            Required property.
            The mapped foreground color for the specified level
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.BackColor">
            <summary>
            The mapped background color for the specified level
            </summary>
            <remarks>
            <para>
            Required property.
            The mapped background color for the specified level
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.Attributes">
            <summary>
            The color attributes for the specified level
            </summary>
            <remarks>
            <para>
            Required property.
            The color attributes for the specified level
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ActivateOptions">
            <summary>
            Initialize the options for the object
            </summary>
            <remarks>
            <para>
            Combine the <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ForeColor"/> and <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.BackColor"/> together
            and append the attributes.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.CombinedColor">
            <summary>
            The combined <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ForeColor"/>, <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.BackColor"/> and
            <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.Attributes"/> suitable for setting the ansi terminal color.
            </summary>
        </member>
        <member name="T:log4net.Appender.AppenderCollection">
            <summary>
            A strongly-typed collection of <see cref="T:log4net.Appender.IAppender"/> objects.
            </summary>
            <author>Nicko Cadell</author>
        </member>
        <member name="T:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator">
            <summary>
            Supports type-safe iteration over a <see cref="T:log4net.Appender.AppenderCollection"/>.
            </summary>
            <exclude/>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.ReadOnly(log4net.Appender.AppenderCollection)">
            <summary>
            Creates a read-only wrapper for a <c>AppenderCollection</c> instance.
            </summary>
            <param name="list">list to create a readonly wrapper arround</param>
            <returns>
            An <c>AppenderCollection</c> wrapper that is read-only.
            </returns>
        </member>
        <member name="F:log4net.Appender.AppenderCollection.EmptyCollection">
            <summary>
            An empty readonly static AppenderCollection
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.#ctor">
            <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that has the specified initial capacity.
            </summary>
            <param name="capacity">
            The number of elements that the new <c>AppenderCollection</c> is initially capable of storing.
            </param>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.#ctor(log4net.Appender.AppenderCollection)">
            <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that contains elements copied from the specified <c>AppenderCollection</c>.
            </summary>
            <param name="c">The <c>AppenderCollection</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.#ctor(log4net.Appender.IAppender[])">
            <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Appender.IAppender"/> array.
            </summary>
            <param name="a">The <see cref="T:log4net.Appender.IAppender"/> array whose elements are copied to the new list.</param>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Appender.IAppender"/> collection.
            </summary>
            <param name="col">The <see cref="T:log4net.Appender.IAppender"/> collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:log4net.Appender.AppenderCollection.Tag">
            <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
            <exclude/>
        </member>
        <member name="F:log4net.Appender.AppenderCollection.Tag.Default">
            <summary>
            A value
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.#ctor(log4net.Appender.AppenderCollection.Tag)">
            <summary>
            Allow subclasses to avoid our default constructors
            </summary>
            <param name="tag"></param>
            <exclude/>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.Count">
            <summary>
            Gets the number of elements actually contained in the <c>AppenderCollection</c>.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.CopyTo(log4net.Appender.IAppender[])">
            <summary>
            Copies the entire <c>AppenderCollection</c> to a one-dimensional
            <see cref="T:log4net.Appender.IAppender"/> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:log4net.Appender.IAppender"/> array to copy to.</param>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.CopyTo(log4net.Appender.IAppender[],System.Int32)">
            <summary>
            Copies the entire <c>AppenderCollection</c> to a one-dimensional
            <see cref="T:log4net.Appender.IAppender"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:log4net.Appender.IAppender"/> array to copy to.</param>
            <param name="start">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <returns>false, because the backing type is an array, which is never thread-safe.</returns>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:log4net.Appender.IAppender"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="index"/> is less than zero</para>
            	<para>-or-</para>
            	<para><paramref name="index"/> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Add(log4net.Appender.IAppender)">
            <summary>
            Adds a <see cref="T:log4net.Appender.IAppender"/> to the end of the <c>AppenderCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Appender.IAppender"/> to be added to the end of the <c>AppenderCollection</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Clear">
            <summary>
            Removes all elements from the <c>AppenderCollection</c>.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:log4net.Appender.AppenderCollection"/>.
            </summary>
            <returns>A new <see cref="T:log4net.Appender.AppenderCollection"/> with a shallow copy of the collection data.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Contains(log4net.Appender.IAppender)">
            <summary>
            Determines whether a given <see cref="T:log4net.Appender.IAppender"/> is in the <c>AppenderCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Appender.IAppender"/> to check for.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the <c>AppenderCollection</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.IndexOf(log4net.Appender.IAppender)">
            <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:log4net.Appender.IAppender"/>
            in the <c>AppenderCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Appender.IAppender"/> to locate in the <c>AppenderCollection</c>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item"/> 
            in the entire <c>AppenderCollection</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Insert(System.Int32,log4net.Appender.IAppender)">
            <summary>
            Inserts an element into the <c>AppenderCollection</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:log4net.Appender.IAppender"/> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Remove(log4net.Appender.IAppender)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:log4net.Appender.IAppender"/> from the <c>AppenderCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Appender.IAppender"/> to remove from the <c>AppenderCollection</c>.</param>
            <exception cref="T:System.ArgumentException">
            The specified <see cref="T:log4net.Appender.IAppender"/> was not found in the <c>AppenderCollection</c>.
            </exception>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <c>AppenderCollection</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false. The default is false</value>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <c>AppenderCollection</c>.
            </summary>
            <returns>An <see cref="T:log4net.Appender.AppenderCollection.Enumerator"/> for the entire <c>AppenderCollection</c>.</returns>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.Capacity">
            <summary>
            Gets or sets the number of elements the <c>AppenderCollection</c> can contain.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.AddRange(log4net.Appender.AppenderCollection)">
            <summary>
            Adds the elements of another <c>AppenderCollection</c> to the current <c>AppenderCollection</c>.
            </summary>
            <param name="x">The <c>AppenderCollection</c> whose elements should be added to the end of the current <c>AppenderCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Appender.AppenderCollection.Count"/> of the <c>AppenderCollection</c>.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.AddRange(log4net.Appender.IAppender[])">
            <summary>
            Adds the elements of a <see cref="T:log4net.Appender.IAppender"/> array to the current <c>AppenderCollection</c>.
            </summary>
            <param name="x">The <see cref="T:log4net.Appender.IAppender"/> array whose elements should be added to the end of the <c>AppenderCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Appender.AppenderCollection.Count"/> of the <c>AppenderCollection</c>.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of a <see cref="T:log4net.Appender.IAppender"/> collection to the current <c>AppenderCollection</c>.
            </summary>
            <param name="col">The <see cref="T:log4net.Appender.IAppender"/> collection whose elements should be added to the end of the <c>AppenderCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Appender.AppenderCollection.Count"/> of the <c>AppenderCollection</c>.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.ToArray">
            <summary>
            Return the collection elements as an array
            </summary>
            <returns>the array</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="i"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="i"/> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="i"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="i"/> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="T:log4net.Appender.AppenderCollection.Enumerator">
            <summary>
            Supports simple iteration over a <see cref="T:log4net.Appender.AppenderCollection"/>.
            </summary>
            <exclude/>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Enumerator.#ctor(log4net.Appender.AppenderCollection)">
            <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="T:log4net.Appender.AppenderCollection.ReadOnlyAppenderCollection">
            <exclude/>
        </member>
        <member name="T:log4net.Appender.AppenderSkeleton">
            <summary>
            Abstract base class implementation of <see cref="T:log4net.Appender.IAppender"/>. 
            </summary>
            <remarks>
            <para>
            This class provides the code for common functionality, such 
            as support for threshold filtering and support for general filters.
            </para>
            <para>
            Appenders can also implement the <see cref="T:log4net.Core.IOptionHandler"/> interface. Therefore
            they would require that the <see cref="M:IOptionHandler.ActivateOptions()"/> method
            be called after the appenders properties have been configured.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>Empty default constructor</para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Finalize">
            <summary>
            Finalizes this appender by calling the implementation's 
            <see cref="M:log4net.Appender.AppenderSkeleton.Close"/> method.
            </summary>
            <remarks>
            <para>
            If this appender has not been closed then the <c>Finalize</c> method
            will call <see cref="M:log4net.Appender.AppenderSkeleton.Close"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Threshold">
            <summary>
            Gets or sets the threshold <see cref="T:log4net.Core.Level"/> of this appender.
            </summary>
            <value>
            The threshold <see cref="T:log4net.Core.Level"/> of the appender. 
            </value>
            <remarks>
            <para>
            All log events with lower level than the threshold level are ignored 
            by the appender.
            </para>
            <para>
            In configuration files this option is specified by setting the
            value of the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold"/> option to a level
            string, such as "DEBUG", "INFO" and so on.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.ErrorHandler">
            <summary>
            Gets or sets the <see cref="T:log4net.Core.IErrorHandler"/> for this appender.
            </summary>
            <value>The <see cref="T:log4net.Core.IErrorHandler"/> of the appender</value>
            <remarks>
            <para>
            The <see cref="T:log4net.Appender.AppenderSkeleton"/> provides a default 
            implementation for the <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler"/> property. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.FilterHead">
            <summary>
            The filter chain.
            </summary>
            <value>The head of the filter chain filter chain.</value>
            <remarks>
            <para>
            Returns the head Filter. The Filters are organized in a linked list
            and so all Filters on this Appender are available through the result.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Layout">
            <summary>
            Gets or sets the <see cref="T:log4net.Layout.ILayout"/> for this appender.
            </summary>
            <value>The layout of the appender.</value>
            <remarks>
            <para>
            See <see cref="P:log4net.Appender.AppenderSkeleton.RequiresLayout"/> for more information.
            </para>
            </remarks>
            <seealso cref="P:log4net.Appender.AppenderSkeleton.RequiresLayout"/>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Name">
            <summary>
            Gets or sets the name of this appender.
            </summary>
            <value>The name of the appender.</value>
            <remarks>
            <para>
            The name uniquely identifies the appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Close">
            <summary>
            Closes the appender and release resources.
            </summary>
            <remarks>
            <para>
            Release any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
            <para>
            It is a programming error to append to a closed appender.
            </para>
            <para>
            This method cannot be overridden by subclasses. This method 
            delegates the closing of the appender to the <see cref="M:log4net.Appender.AppenderSkeleton.OnClose"/>
            method which must be overridden in the subclass.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)">
            <summary>
            Performs threshold checks and invokes filters before 
            delegating actual logging to the subclasses specific 
            <see cref="M:Append(LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            This method cannot be overridden by derived classes. A
            derived class should override the <see cref="M:Append(LoggingEvent)"/> method
            which is called by this method.
            </para>
            <para>
            The implementation of this method is as follows:
            </para>
            <para>
            <list type="bullet">
            	<item>
            		<description>
            		Checks that the severity of the <paramref name="loggingEvent"/>
            		is greater than or equal to the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold"/> of this
            		appender.</description>
            	</item>
            	<item>
            		<description>
            		Checks that the <see cref="T:log4net.Filter.IFilter"/> chain accepts the 
            		<paramref name="loggingEvent"/>.
            		</description>
            	</item>
            	<item>
            		<description>
            		Calls <see cref="M:PreAppendCheck()"/> and checks that 
            		it returns <c>true</c>.</description>
            	</item>
            </list>
            </para>
            <para>
            If all of the above steps succeed then the <paramref name="loggingEvent"/>
            will be passed to the abstract <see cref="M:Append(LoggingEvent)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent[])">
            <summary>
            Performs threshold checks and invokes filters before 
            delegating actual logging to the subclasses specific 
            <see cref="M:Append(LoggingEvent[])"/> method.
            </summary>
            <param name="loggingEvents">The array of events to log.</param>
            <remarks>
            <para>
            This method cannot be overridden by derived classes. A
            derived class should override the <see cref="M:Append(LoggingEvent[])"/> method
            which is called by this method.
            </para>
            <para>
            The implementation of this method is as follows:
            </para>
            <para>
            <list type="bullet">
            	<item>
            		<description>
            		Checks that the severity of the <paramref name="loggingEvents"/>
            		is greater than or equal to the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold"/> of this
            		appender.</description>
            	</item>
            	<item>
            		<description>
            		Checks that the <see cref="T:log4net.Filter.IFilter"/> chain accepts the 
            		<paramref name="loggingEvents"/>.
            		</description>
            	</item>
            	<item>
            		<description>
            		Calls <see cref="M:PreAppendCheck()"/> and checks that 
            		it returns <c>true</c>.</description>
            	</item>
            </list>
            </para>
            <para>
            If all of the above steps succeed then the <paramref name="loggingEvents"/>
            will be passed to the <see cref="M:Append(LoggingEvent[])"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.FilterEvent(log4net.Core.LoggingEvent)">
            <summary>
            Test if the logging event should we output by this appender
            </summary>
            <param name="loggingEvent">the event to test</param>
            <returns><c>true</c> if the event should be output, <c>false</c> if the event should be ignored</returns>
            <remarks>
            <para>
            This method checks the logging event against the threshold level set
            on this appender and also against the filters specified on this
            appender.
            </para>
            <para>
            The implementation of this method is as follows:
            </para>
            <para>
            <list type="bullet">
            	<item>
            		<description>
            		Checks that the severity of the <paramref name="loggingEvent"/>
            		is greater than or equal to the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold"/> of this
            		appender.</description>
            	</item>
            	<item>
            		<description>
            		Checks that the <see cref="T:log4net.Filter.IFilter"/> chain accepts the 
            		<paramref name="loggingEvent"/>.
            		</description>
            	</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.AddFilter(log4net.Filter.IFilter)">
            <summary>
            Adds a filter to the end of the filter chain.
            </summary>
            <param name="filter">the filter to add to this appender</param>
            <remarks>
            <para>
            The Filters are organized in a linked list.
            </para>
            <para>
            Setting this property causes the new filter to be pushed onto the 
            back of the filter chain.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.ClearFilters">
            <summary>
            Clears the filter list for this appender.
            </summary>
            <remarks>
            <para>
            Clears the filter list for this appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.IsAsSevereAsThreshold(log4net.Core.Level)">
            <summary>
            Checks if the message level is below this appender's threshold.
            </summary>
            <param name="level"><see cref="T:log4net.Core.Level"/> to test against.</param>
            <remarks>
            <para>
            If there is no threshold set, then the return value is always <c>true</c>.
            </para>
            </remarks>
            <returns>
            <c>true</c> if the <paramref name="level"/> meets the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold"/> 
            requirements of this appender.
            </returns>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.OnClose">
            <summary>
            Is called when the appender is closed. Derived classes should override 
            this method if resources need to be released.
            </summary>
            <remarks>
            <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
            <para>
            It is a programming error to append to a closed appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)">
            <summary>
            Subclasses of <see cref="T:log4net.Appender.AppenderSkeleton"/> should implement this method 
            to perform actual logging.
            </summary>
            <param name="loggingEvent">The event to append.</param>
            <remarks>
            <para>
            A subclass must implement this method to perform
            logging of the <paramref name="loggingEvent"/>.
            </para>
            <para>This method will be called by <see cref="M:DoAppend(LoggingEvent)"/>
            if all the conditions listed for that method are met.
            </para>
            <para>
            To restrict the logging of events in the appender
            override the <see cref="M:PreAppendCheck()"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent[])">
            <summary>
            Append a bulk array of logging events.
            </summary>
            <param name="loggingEvents">the array of logging events</param>
            <remarks>
            <para>
            This base class implementation calls the <see cref="M:Append(LoggingEvent)"/>
            method for each element in the bulk array.
            </para>
            <para>
            A sub class that can better process a bulk array of events should
            override this method in addition to <see cref="M:Append(LoggingEvent)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.PreAppendCheck">
            <summary>
            Called before <see cref="M:Append(LoggingEvent)"/> as a precondition.
            </summary>
            <remarks>
            <para>
            This method is called by <see cref="M:DoAppend(LoggingEvent)"/>
            before the call to the abstract <see cref="M:Append(LoggingEvent)"/> method.
            </para>
            <para>
            This method can be overridden in a subclass to extend the checks 
            made before the event is passed to the <see cref="M:Append(LoggingEvent)"/> method.
            </para>
            <para>
            A subclass should ensure that they delegate this call to
            this base class if it is overridden.
            </para>
            </remarks>
            <returns><c>true</c> if the call to <see cref="M:Append(LoggingEvent)"/> should proceed.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(log4net.Core.LoggingEvent)">
            <summary>
            Renders the <see cref="T:log4net.Core.LoggingEvent"/> to a string.
            </summary>
            <param name="loggingEvent">The event to render.</param>
            <returns>The event rendered as a string.</returns>
            <remarks>
            <para>
            Helper method to render a <see cref="T:log4net.Core.LoggingEvent"/> to 
            a string. This appender must have a <see cref="P:log4net.Appender.AppenderSkeleton.Layout"/>
            set to render the <paramref name="loggingEvent"/> to 
            a string.
            </para>
            <para>If there is exception data in the logging event and 
            the layout does not process the exception, this method 
            will append the exception text to the rendered string.
            </para>
            <para>
            Where possible use the alternative version of this method
            <see cref="M:RenderLoggingEvent(TextWriter,LoggingEvent)"/>.
            That method streams the rendering onto an existing Writer
            which can give better performance if the caller already has
            a <see cref="T:System.IO.TextWriter"/> open and ready for writing.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Renders the <see cref="T:log4net.Core.LoggingEvent"/> to a string.
            </summary>
            <param name="loggingEvent">The event to render.</param>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <remarks>
            <para>
            Helper method to render a <see cref="T:log4net.Core.LoggingEvent"/> to 
            a string. This appender must have a <see cref="P:log4net.Appender.AppenderSkeleton.Layout"/>
            set to render the <paramref name="loggingEvent"/> to 
            a string.
            </para>
            <para>If there is exception data in the logging event and 
            the layout does not process the exception, this method 
            will append the exception text to the rendered string.
            </para>
            <para>
            Use this method in preference to <see cref="M:RenderLoggingEvent(LoggingEvent)"/>
            where possible. If, however, the caller needs to render the event
            to a string then <see cref="M:RenderLoggingEvent(LoggingEvent)"/> does
            provide an efficient mechanism for doing so.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.RequiresLayout">
            <summary>
            Tests if this appender requires a <see cref="P:log4net.Appender.AppenderSkeleton.Layout"/> to be set.
            </summary>
            <remarks>
            <para>
            In the rather exceptional case, where the appender 
            implementation admits a layout but can also work without it, 
            then the appender should return <c>true</c>.
            </para>
            <para>
            This default implementation always returns <c>false</c>.
            </para>
            </remarks>
            <returns>
            <c>true</c> if the appender requires a layout object, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <remarks>
            This implementation doesn't flush anything and always returns true
            </remarks>
            <returns><c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_layout">
            <summary>
            The layout of this appender.
            </summary>
            <remarks>
            See <see cref="P:log4net.Appender.AppenderSkeleton.Layout"/> for more information.
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_name">
            <summary>
            The name of this appender.
            </summary>
            <remarks>
            See <see cref="P:log4net.Appender.AppenderSkeleton.Name"/> for more information.
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_threshold">
            <summary>
            The level threshold of this appender.
            </summary>
            <remarks>
            <para>
            There is no level threshold filtering by default.
            </para>
            <para>
            See <see cref="P:log4net.Appender.AppenderSkeleton.Threshold"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_errorHandler">
            <summary>
            It is assumed and enforced that errorHandler is never null.
            </summary>
            <remarks>
            <para>
            It is assumed and enforced that errorHandler is never null.
            </para>
            <para>
            See <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_headFilter">
            <summary>
            The first filter in the filter chain.
            </summary>
            <remarks>
            <para>
            Set to <c>null</c> initially.
            </para>
            <para>
            See <see cref="T:log4net.Filter.IFilter"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_tailFilter">
            <summary>
            The last filter in the filter chain.
            </summary>
            <remarks>
            See <see cref="T:log4net.Filter.IFilter"/> for more information.
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_closed">
            <summary>
            Flag indicating if this appender is closed.
            </summary>
            <remarks>
            See <see cref="M:log4net.Appender.AppenderSkeleton.Close"/> for more information.
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_recursiveGuard">
            <summary>
            The guard prevents an appender from repeatedly calling its own DoAppend method
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_renderWriter">
            <summary>
            StringWriter used to render events
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.c_renderBufferSize">
            <summary>
            Initial buffer size
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.c_renderBufferMaxCapacity">
            <summary>
            Maximum buffer size before it is recycled
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.declaringType">
            <summary>
            The fully qualified type of the AppenderSkeleton class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Appender.AspNetTraceAppender">
            <summary>
            <para>
            Appends log events to the ASP.NET <see cref="T:System.Web.TraceContext"/> system.
            </para>
            </summary>
            <remarks>
            <para>
            Diagnostic information and tracing messages that you specify are appended to the output 
            of the page that is sent to the requesting browser. Optionally, you can view this information
            from a separate trace viewer (Trace.axd) that displays trace information for every page in a 
            given application.
            </para>
            <para>
            Trace statements are processed and displayed only when tracing is enabled. You can control 
            whether tracing is displayed to a page, to the trace viewer, or both.
            </para>
            <para>
            The logging event is passed to the <see cref="M:TraceContext.Write(string)"/> or 
            <see cref="M:TraceContext.Warn(string)"/> method depending on the level of the logging event.
            The event's logger name is the default value for the category parameter of the Write/Warn method. 
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Ron Grabowski</author>
        </member>
        <member name="M:log4net.Appender.AspNetTraceAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.AspNetTraceAppender" /> class.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AspNetTraceAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Write the logging event to the ASP.NET trace
            </summary>
            <param name="loggingEvent">the event to log</param>
            <remarks>
            <para>
            Write the logging event to the ASP.NET trace
            <c>HttpContext.Current.Trace</c> 
            (<see cref="T:System.Web.TraceContext"/>).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AspNetTraceAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AspNetTraceAppender.Category">
            <summary>
            The category parameter sent to the Trace method.
            </summary>
            <remarks>
            <para>
            Defaults to %logger which will use the logger name of the current 
            <see cref="T:log4net.Core.LoggingEvent"/> as the category parameter.
            </para>
            <para>
            </para> 
            </remarks>
        </member>
        <member name="F:log4net.Appender.AspNetTraceAppender.m_category">
            <summary>
            Defaults to %logger
            </summary>
        </member>
        <member name="T:log4net.Appender.BufferingAppenderSkeleton">
            <summary>
            Abstract base class implementation of <see cref="T:log4net.Appender.IAppender"/> that 
            buffers events in a fixed size buffer.
            </summary>
            <remarks>
            <para>
            This base class should be used by appenders that need to buffer a 
            number of events before logging them. For example the <see cref="T:log4net.Appender.AdoNetAppender"/> 
            buffers events and then submits the entire contents of the buffer to 
            the underlying database in one go.
            </para>
            <para>
            Subclasses should override the <see cref="M:SendBuffer(LoggingEvent[])"/>
            method to deliver the buffered events.
            </para>
            <para>The BufferingAppenderSkeleton maintains a fixed size cyclic 
            buffer of events. The size of the buffer is set using 
            the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize"/> property.
            </para>
            <para>A <see cref="T:log4net.Core.ITriggeringEventEvaluator"/> is used to inspect 
            each event as it arrives in the appender. If the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator"/> 
            triggers, then the current buffer is sent immediately 
            (see <see cref="M:SendBuffer(LoggingEvent[])"/>). Otherwise the event 
            is stored in the buffer. For example, an evaluator can be used to 
            deliver the events immediately when an ERROR event arrives.
            </para>
            <para>
            The buffering appender can be configured in a <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy"/> mode. 
            By default the appender is NOT lossy. When the buffer is full all 
            the buffered events are sent with <see cref="M:SendBuffer(LoggingEvent[])"/>.
            If the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy"/> property is set to <c>true</c> then the 
            buffer will not be sent when it is full, and new events arriving 
            in the appender will overwrite the oldest event in the buffer. 
            In lossy mode the buffer will only be sent when the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator"/>
            triggers. This can be useful behavior when you need to know about 
            ERROR events but not about events with a lower level, configure an 
            evaluator that will trigger when an ERROR event arrives, the whole 
            buffer will be sent which gives a history of events leading up to
            the ERROR event.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.BufferingAppenderSkeleton" /> class.
            </summary>
            <remarks>
            <para>
            Protected default constructor to allow subclassing.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.BufferingAppenderSkeleton" /> class.
            </summary>
            <param name="eventMustBeFixed">the events passed through this appender must be
            fixed by the time that they arrive in the derived class' <c>SendBuffer</c> method.</param>
            <remarks>
            <para>
            Protected constructor to allow subclassing.
            </para>
            <para>
            The <paramref name="eventMustBeFixed"/> should be set if the subclass
            expects the events delivered to be fixed even if the 
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize"/> is set to zero, i.e. when no buffering occurs.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingAppenderSkeleton.Lossy">
            <summary>
            Gets or sets a value that indicates whether the appender is lossy.
            </summary>
            <value>
            <c>true</c> if the appender is lossy, otherwise <c>false</c>. The default is <c>false</c>.
            </value>
            <remarks>
            <para>
            This appender uses a buffer to store logging events before 
            delivering them. A triggering event causes the whole buffer
            to be send to the remote sink. If the buffer overruns before
            a triggering event then logging events could be lost. Set
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy"/> to <c>false</c> to prevent logging events 
            from being lost.
            </para>
            <para>If <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy"/> is set to <c>true</c> then an
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator"/> must be specified.</para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize">
            <summary>
            Gets or sets the size of the cyclic buffer used to hold the 
            logging events.
            </summary>
            <value>
            The size of the cyclic buffer used to hold the logging events.
            </value>
            <remarks>
            <para>
            The <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize"/> option takes a positive integer
            representing the maximum number of logging events to collect in 
            a cyclic buffer. When the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize"/> is reached,
            oldest events are deleted as new events are added to the
            buffer. By default the size of the cyclic buffer is 512 events.
            </para>
            <para>
            If the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize"/> is set to a value less than
            or equal to 1 then no buffering will occur. The logging event
            will be delivered synchronously (depending on the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy"/>
            and <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator"/> properties). Otherwise the event will
            be buffered.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator">
            <summary>
            Gets or sets the <see cref="T:log4net.Core.ITriggeringEventEvaluator"/> that causes the 
            buffer to be sent immediately.
            </summary>
            <value>
            The <see cref="T:log4net.Core.ITriggeringEventEvaluator"/> that causes the buffer to be
            sent immediately.
            </value>
            <remarks>
            <para>
            The evaluator will be called for each event that is appended to this 
            appender. If the evaluator triggers then the current buffer will 
            immediately be sent (see <see cref="M:SendBuffer(LoggingEvent[])"/>).
            </para>
            <para>If <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy"/> is set to <c>true</c> then an
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator"/> must be specified.</para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingAppenderSkeleton.LossyEvaluator">
            <summary>
            Gets or sets the value of the <see cref="T:log4net.Core.ITriggeringEventEvaluator"/> to use.
            </summary>
            <value>
            The value of the <see cref="T:log4net.Core.ITriggeringEventEvaluator"/> to use.
            </value>
            <remarks>
            <para>
            The evaluator will be called for each event that is discarded from this 
            appender. If the evaluator triggers then the current buffer will immediately 
            be sent (see <see cref="M:SendBuffer(LoggingEvent[])"/>).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingAppenderSkeleton.OnlyFixPartialEventData">
            <summary>
            Gets or sets a value indicating if only part of the logging event data
            should be fixed.
            </summary>
            <value>
            <c>true</c> if the appender should only fix part of the logging event 
            data, otherwise <c>false</c>. The default is <c>false</c>.
            </value>
            <remarks>
            <para>
            Setting this property to <c>true</c> will cause only part of the
            event data to be fixed and serialized. This will improve performance.
            </para>
            <para>
            See <see cref="M:LoggingEvent.FixVolatileData(FixFlags)"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingAppenderSkeleton.Fix">
            <summary>
            Gets or sets a the fields that will be fixed in the event
            </summary>
            <value>
            The event fields that will be fixed before the event is buffered
            </value>
            <remarks>
            <para>
            The logging event needs to have certain thread specific values 
            captured before it can be buffered. See <see cref="P:log4net.Core.LoggingEvent.Fix"/>
            for details.
            </para>
            </remarks>
            <seealso cref="P:log4net.Core.LoggingEvent.Fix"/>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <param name="millisecondsTimeout">The maximum time to wait for logging events to be flushed.</param>
            <returns><c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.Flush">
            <summary>
            Flush the currently buffered events
            </summary>
            <remarks>
            <para>
            Flushes any events that have been buffered.
            </para>
            <para>
            If the appender is buffering in <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy"/> mode then the contents
            of the buffer will NOT be flushed to the appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.Flush(System.Boolean)">
            <summary>
            Flush the currently buffered events
            </summary>
            <param name="flushLossyBuffer">set to <c>true</c> to flush the buffer of lossy events</param>
            <remarks>
            <para>
            Flushes events that have been buffered. If <paramref name="flushLossyBuffer" /> is
            <c>false</c> then events will only be flushed if this buffer is non-lossy mode.
            </para>
            <para>
            If the appender is buffering in <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy"/> mode then the contents
            of the buffer will only be flushed if <paramref name="flushLossyBuffer" /> is <c>true</c>.
            In this case the contents of the buffer will be tested against the 
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.LossyEvaluator"/> and if triggering will be output. All other buffered
            events will be discarded.
            </para>
            <para>
            If <paramref name="flushLossyBuffer" /> is <c>true</c> then the buffer will always
            be emptied by calling this method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.OnClose">
            <summary>
            Close this appender instance.
            </summary>
            <remarks>
            <para>
            Close this appender instance. If this appender is marked
            as not <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy"/> then the remaining events in 
            the buffer must be sent when the appender is closed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)"/> method. 
            </summary>
            <param name="loggingEvent">the event to log</param>
            <remarks>
            <para>
            Stores the <paramref name="loggingEvent"/> in the cyclic buffer.
            </para>
            <para>
            The buffer will be sent (i.e. passed to the <see cref="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])"/> 
            method) if one of the following conditions is met:
            </para>
            <list type="bullet">
            	<item>
            		<description>The cyclic buffer is full and this appender is
            		marked as not lossy (see <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy"/>)</description>
            	</item>
            	<item>
            		<description>An <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator"/> is set and
            		it is triggered for the <paramref name="loggingEvent"/>
            		specified.</description>
            	</item>
            </list>
            <para>
            Before the event is stored in the buffer it is fixed
            (see <see cref="M:LoggingEvent.FixVolatileData(FixFlags)"/>) to ensure that
            any data referenced by the event will be valid when the buffer
            is processed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.SendFromBuffer(log4net.Core.LoggingEvent,log4net.Util.CyclicBuffer)">
            <summary>
            Sends the contents of the buffer.
            </summary>
            <param name="firstLoggingEvent">The first logging event.</param>
            <param name="buffer">The buffer containing the events that need to be send.</param>
            <remarks>
            <para>
            The subclass must override <see cref="M:SendBuffer(LoggingEvent[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Sends the events.
            </summary>
            <param name="events">The events that need to be send.</param>
            <remarks>
            <para>
            The subclass must override this method to process the buffered events.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.DEFAULT_BUFFER_SIZE">
            <summary>
            The default buffer size.
            </summary>
            <remarks>
            The default size of the cyclic buffer used to store events.
            This is set to 512 by default.
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_bufferSize">
            <summary>
            The size of the cyclic buffer used to hold the logging events.
            </summary>
            <remarks>
            Set to <see cref="F:log4net.Appender.BufferingAppenderSkeleton.DEFAULT_BUFFER_SIZE"/> by default.
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_cb">
            <summary>
            The cyclic buffer used to store the logging events.
            </summary>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_evaluator">
            <summary>
            The triggering event evaluator that causes the buffer to be sent immediately.
            </summary>
            <remarks>
            The object that is used to determine if an event causes the entire
            buffer to be sent immediately. This field can be <c>null</c>, which 
            indicates that event triggering is not to be done. The evaluator
            can be set using the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator"/> property. If this appender
            has the <see cref="F:log4net.Appender.BufferingAppenderSkeleton.m_lossy"/> (<see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy"/> property) set to 
            <c>true</c> then an <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator"/> must be set.
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_lossy">
            <summary>
            Indicates if the appender should overwrite events in the cyclic buffer 
            when it becomes full, or if the buffer should be flushed when the 
            buffer is full.
            </summary>
            <remarks>
            If this field is set to <c>true</c> then an <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator"/> must 
            be set.
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_lossyEvaluator">
            <summary>
            The triggering event evaluator filters discarded events.
            </summary>
            <remarks>
            The object that is used to determine if an event that is discarded should
            really be discarded or if it should be sent to the appenders. 
            This field can be <c>null</c>, which indicates that all discarded events will
            be discarded. 
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_fixFlags">
            <summary>
            Value indicating which fields in the event should be fixed
            </summary>
            <remarks>
            By default all fields are fixed
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_eventMustBeFixed">
            <summary>
            The events delivered to the subclass must be fixed.
            </summary>
        </member>
        <member name="T:log4net.Appender.BufferingForwardingAppender">
            <summary>
            Buffers events and then forwards them to attached appenders.
            </summary>
            <remarks>
            <para>
            The events are buffered in this appender until conditions are
            met to allow the appender to deliver the events to the attached 
            appenders. See <see cref="T:log4net.Appender.BufferingAppenderSkeleton"/> for the
            conditions that cause the buffer to be sent.
            </para>
            <para>The forwarding appender can be used to specify different 
            thresholds and filters for the same appender at different locations 
            within the hierarchy.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.BufferingForwardingAppender" /> class.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.OnClose">
            <summary>
            Closes the appender and releases resources.
            </summary>
            <remarks>
            <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
            <para>
            It is a programming error to append to a closed appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Send the events.
            </summary>
            <param name="events">The events that need to be send.</param>
            <remarks>
            <para>
            Forwards the events to the attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Adds an <see cref="T:log4net.Appender.IAppender" /> to the list of appenders of this
            instance.
            </summary>
            <param name="newAppender">The <see cref="T:log4net.Appender.IAppender" /> to add to this appender.</param>
            <remarks>
            <para>
            If the specified <see cref="T:log4net.Appender.IAppender" /> is already in the list of
            appenders, then it won't be added again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingForwardingAppender.Appenders">
            <summary>
            Gets the appenders contained in this appender as an 
            <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <remarks>
            If no appenders can be found, then an <see cref="T:log4net.Util.EmptyCollection"/> 
            is returned.
            </remarks>
            <returns>
            A collection of the appenders in this appender.
            </returns>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.GetAppender(System.String)">
            <summary>
            Looks for the appender with the specified name.
            </summary>
            <param name="name">The name of the appender to lookup.</param>
            <returns>
            The appender with the specified name, or <c>null</c>.
            </returns>
            <remarks>
            <para>
            Get the named appender attached to this buffering appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.RemoveAllAppenders">
            <summary>
            Removes all previously added appenders from this appender.
            </summary>
            <remarks>
            <para>
            This is useful when re-reading configuration information.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Removes the specified appender from the list of appenders.
            </summary>
            <param name="appender">The appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close"/> on the appender removed.
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.RemoveAppender(System.String)">
            <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close"/> on the appender removed.
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingForwardingAppender.m_appenderAttachedImpl">
            <summary>
            Implementation of the <see cref="T:log4net.Core.IAppenderAttachable"/> interface
            </summary>
        </member>
        <member name="T:log4net.Appender.ColoredConsoleAppender">
            <summary>
            Appends logging events to the console.
            </summary>
            <remarks>
            <para>
            ColoredConsoleAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user. It also allows the color of a specific type of message to be set.
            </para>
            <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target"/> property can be set to direct the output to the
            error stream.
            </para>
            <para>
            NOTE: This appender writes directly to the application's attached console
            not to the <c>System.Console.Out</c> or <c>System.Console.Error</c> <c>TextWriter</c>.
            The <c>System.Console.Out</c> and <c>System.Console.Error</c> streams can be
            programmatically redirected (for example NUnit does this to capture program output).
            This appender will ignore these redirections because it needs to use Win32
            API calls to colorize the output. To respect these redirections the <see cref="T:log4net.Appender.ConsoleAppender"/>
            must be used.
            </para>
            <para>
            When configuring the colored console appender, mapping should be
            specified to map a logging level to a color. For example:
            </para>
            <code lang="XML" escaped="true">
            <mapping>
            	<level value="ERROR" />
            	<foreColor value="White" />
            	<backColor value="Red, HighIntensity" />
            </mapping>
            <mapping>
            	<level value="DEBUG" />
            	<backColor value="Green" />
            </mapping>
            </code>
            <para>
            The Level is the standard log4net logging level and ForeColor and BackColor can be any
            combination of the following values:
            <list type="bullet">
            <item><term>Blue</term><description></description></item>
            <item><term>Green</term><description></description></item>
            <item><term>Red</term><description></description></item>
            <item><term>White</term><description></description></item>
            <item><term>Yellow</term><description></description></item>
            <item><term>Purple</term><description></description></item>
            <item><term>Cyan</term><description></description></item>
            <item><term>HighIntensity</term><description></description></item>
            </list>
            </para>
            </remarks>
            <author>Rick Hobbs</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="T:log4net.Appender.ColoredConsoleAppender.Colors">
            <summary>
            The enum of possible color values for use with the color mapping method
            </summary>
            <remarks>
            <para>
            The following flags can be combined together to
            form the colors.
            </para>
            </remarks>
            <seealso cref="T:log4net.Appender.ColoredConsoleAppender" />
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.Blue">
            <summary>
            color is blue
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.Green">
            <summary>
            color is green
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.Red">
            <summary>
            color is red
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.White">
            <summary>
            color is white
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.Yellow">
            <summary>
            color is yellow
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.Purple">
            <summary>
            color is purple
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.Cyan">
            <summary>
            color is cyan
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.HighIntensity">
            <summary>
            color is intensified
            </summary>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class.
            </summary>
            <remarks>
            The instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class
            with the specified layout.
            </summary>
            <param name="layout">the layout to use for this appender</param>
            <remarks>
            The instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.#ctor(log4net.Layout.ILayout,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class
            with the specified layout.
            </summary>
            <param name="layout">the layout to use for this appender</param>
            <param name="writeToErrorStream">flag set to <c>true</c> to write to the console error stream</param>
            <remarks>
            When <paramref name="writeToErrorStream" /> is set to <c>true</c>, output is written to
            the standard error output stream.  Otherwise, output is written to the standard
            output stream.
            </remarks>
        </member>
        <member name="P:log4net.Appender.ColoredConsoleAppender.Target">
            <summary>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </summary>
            <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
            <remarks>
            <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.AddMapping(log4net.Appender.ColoredConsoleAppender.LevelColors)">
            <summary>
            Add a mapping of level to color - done by the config file
            </summary>
            <param name="mapping">The mapping to add</param>
            <remarks>
            <para>
            Add a <see cref="T:log4net.Appender.ColoredConsoleAppender.LevelColors"/> mapping to this appender.
            Each mapping defines the foreground and background colors
            for a level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes the event to the console.
            </para>
            <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ColoredConsoleAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.ActivateOptions">
            <summary>
            Initialize the options for this appender
            </summary>
            <remarks>
            <para>
            Initialize the level to color mappings set on this appender.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.ConsoleOut">
            <summary>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target"/> to use when writing to the Console 
            standard output stream.
            </summary>
            <remarks>
            <para>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target"/> to use when writing to the Console 
            standard output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.ConsoleError">
            <summary>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target"/> to use when writing to the Console 
            standard error output stream.
            </summary>
            <remarks>
            <para>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target"/> to use when writing to the Console 
            standard error output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.m_writeToErrorStream">
            <summary>
            Flag to write output to the error stream rather than the standard output stream
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.m_levelMapping">
            <summary>
            Mapping from level object to color value
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.m_consoleOutputWriter">
            <summary>
            The console output stream writer to write to
            </summary>
            <remarks>
            <para>
            This writer is not thread safe.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.ColoredConsoleAppender.LevelColors">
            <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
            <remarks>
            <para>
            Defines the mapping between a level and the color it should be displayed in.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ColoredConsoleAppender.LevelColors.ForeColor">
            <summary>
            The mapped foreground color for the specified level
            </summary>
            <remarks>
            <para>
            Required property.
            The mapped foreground color for the specified level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ColoredConsoleAppender.LevelColors.BackColor">
            <summary>
            The mapped background color for the specified level
            </summary>
            <remarks>
            <para>
            Required property.
            The mapped background color for the specified level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.LevelColors.ActivateOptions">
            <summary>
            Initialize the options for the object
            </summary>
            <remarks>
            <para>
            Combine the <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.ForeColor"/> and <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.BackColor"/> together.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ColoredConsoleAppender.LevelColors.CombinedColor">
            <summary>
            The combined <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.ForeColor"/> and <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.BackColor"/> suitable for 
            setting the console color.
            </summary>
        </member>
        <member name="T:log4net.Appender.ConsoleAppender">
            <summary>
            Appends logging events to the console.
            </summary>
            <remarks>
            <para>
            ConsoleAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user.
            </para>
            <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.ConsoleAppender.Target"/> property can be set to direct the output to the
            error stream.
            </para>
            <para>
            NOTE: This appender writes each message to the <c>System.Console.Out</c> or 
            <c>System.Console.Error</c> that is set at the time the event is appended.
            Therefore it is possible to programmatically redirect the output of this appender 
            (for example NUnit does this to capture program output). While this is the desired
            behavior of this appender it may have security implications in your application. 
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class.
            </summary>
            <remarks>
            The instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class
            with the specified layout.
            </summary>
            <param name="layout">the layout to use for this appender</param>
            <remarks>
            The instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.#ctor(log4net.Layout.ILayout,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class
            with the specified layout.
            </summary>
            <param name="layout">the layout to use for this appender</param>
            <param name="writeToErrorStream">flag set to <c>true</c> to write to the console error stream</param>
            <remarks>
            When <paramref name="writeToErrorStream" /> is set to <c>true</c>, output is written to
            the standard error output stream.  Otherwise, output is written to the standard
            output stream.
            </remarks>
        </member>
        <member name="P:log4net.Appender.ConsoleAppender.Target">
            <summary>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </summary>
            <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
            <remarks>
            <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes the event to the console.
            </para>
            <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ConsoleAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ConsoleAppender.ConsoleOut">
            <summary>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target"/> to use when writing to the Console 
            standard output stream.
            </summary>
            <remarks>
            <para>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target"/> to use when writing to the Console 
            standard output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ConsoleAppender.ConsoleError">
            <summary>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target"/> to use when writing to the Console 
            standard error output stream.
            </summary>
            <remarks>
            <para>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target"/> to use when writing to the Console 
            standard error output stream.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.DebugAppender">
            <summary>
            Appends log events to the <see cref="T:System.Diagnostics.Debug"/> system.
            </summary>
            <remarks>
            <para>
            The application configuration file can be used to control what listeners 
            are actually used. See the MSDN documentation for the 
            <see cref="T:System.Diagnostics.Debug"/> class for details on configuring the
            debug system.
            </para>
            <para>
            Events are written using the <see cref="M:System.Diagnostics.Debug.Write(string,string)"/>
            method. The event's logger name is passed as the value for the category name to the Write method.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Appender.DebugAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.DebugAppender" />.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.DebugAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.DebugAppender" /> 
            with a specified layout.
            </summary>
            <param name="layout">The layout to use with this appender.</param>
            <remarks>
            <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.DebugAppender.ImmediateFlush">
            <summary>
            Gets or sets a value that indicates whether the appender will 
            flush at the end of each write.
            </summary>
            <remarks>
            <para>The default behavior is to flush at the end of each 
            write. If the option is set to<c>false</c>, then the underlying 
            stream can defer writing to physical medium to a later time. 
            </para>
            <para>
            Avoiding the flush operation at the end of each append results 
            in a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.DebugAppender.Category">
            <summary>
            Formats the category parameter sent to the Debug method.
            </summary>
            <remarks>
            <para>
            Defaults to a <see cref="T:log4net.Layout.PatternLayout"/> with %logger as the pattern which will use the logger name of the current 
            <see cref="T:log4net.Core.LoggingEvent"/> as the category parameter.
            </para>
            <para>
            </para> 
            </remarks>
        </member>
        <member name="M:log4net.Appender.DebugAppender.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <param name="millisecondsTimeout">The maximum time to wait for logging events to be flushed.</param>
            <returns><c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="M:log4net.Appender.DebugAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Writes the logging event to the <see cref="T:System.Diagnostics.Debug"/> system.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes the logging event to the <see cref="T:System.Diagnostics.Debug"/> system.
            If <see cref="P:log4net.Appender.DebugAppender.ImmediateFlush"/> is <c>true</c> then the <see cref="M:System.Diagnostics.Debug.Flush"/>
            is called.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.DebugAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.DebugAppender.m_immediateFlush">
            <summary>
            Immediate flush means that the underlying writer or output stream
            will be flushed at the end of each append operation.
            </summary>
            <remarks>
            <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.DebugAppender.ImmediateFlush"/> is set to
            <c>false</c>, then there is a good chance that the last few
            logs events are not actually written to persistent media if and
            when the application crashes.
            </para>
            <para>
            The default value is <c>true</c>.</para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.DebugAppender.m_category">
            <summary>
            Defaults to a <see cref="T:log4net.Layout.PatternLayout"/> with %logger as the pattern.
            </summary>
        </member>
        <member name="T:log4net.Appender.EventLogAppender">
            <summary>
            Writes events to the system event log.
            </summary>
            <remarks>
            <para>
            The appender will fail if you try to write using an event source that doesn't exist unless it is running with local administrator privileges.
            See also http://logging.apache.org/log4net/release/faq.html#trouble-EventLog
            </para>
            <para>
            The <c>EventID</c> of the event log entry can be
            set using the <c>EventID</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties"/>)
            on the <see cref="T:log4net.Core.LoggingEvent"/>.
            </para>
            <para>
            The <c>Category</c> of the event log entry can be
            set using the <c>Category</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties"/>)
            on the <see cref="T:log4net.Core.LoggingEvent"/>.
            </para>
            <para>
            There is a limit of 32K characters for an event log message
            </para>
            <para>
            When configuring the EventLogAppender a mapping can be
            specified to map a logging level to an event log entry type. For example:
            </para>
            <code lang="XML">
            &lt;mapping&gt;
            	&lt;level value="ERROR" /&gt;
            	&lt;eventLogEntryType value="Error" /&gt;
            &lt;/mapping&gt;
            &lt;mapping&gt;
            	&lt;level value="DEBUG" /&gt;
            	&lt;eventLogEntryType value="Information" /&gt;
            &lt;/mapping&gt;
            </code>
            <para>
            The Level is the standard log4net logging level and eventLogEntryType can be any value
            from the <see cref="T:System.Diagnostics.EventLogEntryType"/> enum, i.e.:
            <list type="bullet">
            <item><term>Error</term><description>an error event</description></item>
            <item><term>Warning</term><description>a warning event</description></item>
            <item><term>Information</term><description>an informational event</description></item>
            </list>
            </para>
            </remarks>
            <author>Aspi Havewala</author>
            <author>Douglas de la Torre</author>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Thomas Voss</author>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.EventLogAppender" /> class.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.EventLogAppender" /> class
            with the specified <see cref="T:log4net.Layout.ILayout" />.
            </summary>
            <param name="layout">The <see cref="T:log4net.Layout.ILayout" /> to use with this appender.</param>
            <remarks>
            <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.LogName">
            <summary>
            The name of the log where messages will be stored.
            </summary>
            <value>
            The string name of the log where messages will be stored.
            </value>
            <remarks>
            <para>This is the name of the log as it appears in the Event Viewer
            tree. The default value is to log into the <c>Application</c>
            log, this is where most applications write their events. However
            if you need a separate log for your application (or applications)
            then you should set the <see cref="P:log4net.Appender.EventLogAppender.LogName"/> appropriately.</para>
            <para>This should not be used to distinguish your event log messages
            from those of other applications, the <see cref="P:log4net.Appender.EventLogAppender.ApplicationName"/>
            property should be used to distinguish events. This property should be 
            used to group together events into a single log.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.ApplicationName">
            <summary>
            Property used to set the Application name.  This appears in the
            event logs when logging.
            </summary>
            <value>
            The string used to distinguish events from different sources.
            </value>
            <remarks>
            Sets the event log source property.
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.MachineName">
            <summary>
            This property is used to return the name of the computer to use
            when accessing the event logs.  Currently, this is the current
            computer, denoted by a dot "."
            </summary>
            <value>
            The string name of the machine holding the event log that 
            will be logged into.
            </value>
            <remarks>
            This property cannot be changed. It is currently set to '.'
            i.e. the local machine. This may be changed in future.
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.AddMapping(log4net.Appender.EventLogAppender.Level2EventLogEntryType)">
            <summary>
            Add a mapping of level to <see cref="T:System.Diagnostics.EventLogEntryType"/> - done by the config file
            </summary>
            <param name="mapping">The mapping to add</param>
            <remarks>
            <para>
            Add a <see cref="T:log4net.Appender.EventLogAppender.Level2EventLogEntryType"/> mapping to this appender.
            Each mapping defines the event log entry type for a level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:log4net.Appender.EventLogAppender.SecurityContext"/> used to write to the EventLog.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.EventLogAppender.SecurityContext"/> used to write to the EventLog.
            </value>
            <remarks>
            <para>
            The system security context used to write to the EventLog.
            </para>
            <para>
            Unless a <see cref="P:log4net.Appender.EventLogAppender.SecurityContext"/> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider"/> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.EventId">
            <summary>
            Gets or sets the <c>EventId</c> to use unless one is explicitly specified via the <c>LoggingEvent</c>'s properties.
            </summary>
            <remarks>
            <para>
            The <c>EventID</c> of the event log entry will normally be
            set using the <c>EventID</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties"/>)
            on the <see cref="T:log4net.Core.LoggingEvent"/>.
            This property provides the fallback value which defaults to 0.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.Category">
            <summary>
            Gets or sets the <c>Category</c> to use unless one is explicitly specified via the <c>LoggingEvent</c>'s properties.
            </summary>
            <remarks>
            <para>
            The <c>Category</c> of the event log entry will normally be
            set using the <c>Category</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties"/>)
            on the <see cref="T:log4net.Core.LoggingEvent"/>.
            This property provides the fallback value which defaults to 0.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Appender.EventLogAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.EventLogAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.EventLogAppender.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.CreateEventSource(System.String,System.String,System.String)">
            <summary>
            Create an event log source
            </summary>
            <remarks>
            Uses different API calls under NET_2_0
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)"/>
            method. 
            </summary>
            <param name="loggingEvent">the event to log</param>
            <remarks>
            <para>Writes the event to the system event log using the 
            <see cref="P:log4net.Appender.EventLogAppender.ApplicationName"/>.</para>
            
            <para>If the event has an <c>EventID</c> property (see <see cref="P:log4net.Core.LoggingEvent.Properties"/>)
            set then this integer will be used as the event log event id.</para>
            
            <para>
            There is a limit of 32K characters for an event log message
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.GetEntryType(log4net.Core.Level)">
            <summary>
            Get the equivalent <see cref="T:System.Diagnostics.EventLogEntryType"/> for a <see cref="T:log4net.Core.Level"/> <paramref name="level"/>
            </summary>
            <param name="level">the Level to convert to an EventLogEntryType</param>
            <returns>The equivalent <see cref="T:System.Diagnostics.EventLogEntryType"/> for a <see cref="T:log4net.Core.Level"/> <paramref name="level"/></returns>
            <remarks>
            Because there are fewer applicable <see cref="T:System.Diagnostics.EventLogEntryType"/>
            values to use in logging levels than there are in the 
            <see cref="T:log4net.Core.Level"/> this is a one way mapping. There is
            a loss of information during the conversion.
            </remarks>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_logName">
            <summary>
            The log name is the section in the event logs where the messages
            are stored.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_applicationName">
            <summary>
            Name of the application to use when logging.  This appears in the
            application column of the event log named by <see cref="F:log4net.Appender.EventLogAppender.m_logName"/>.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_machineName">
            <summary>
            The name of the machine which holds the event log. This is
            currently only allowed to be '.' i.e. the current machine.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_levelMapping">
            <summary>
            Mapping from level object to EventLogEntryType
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_eventId">
            <summary>
            The event ID to use unless one is explicitly specified via the <c>LoggingEvent</c>'s properties.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_category">
            <summary>
            The event category to use unless one is explicitly specified via the <c>LoggingEvent</c>'s properties.
            </summary>
        </member>
        <member name="T:log4net.Appender.EventLogAppender.Level2EventLogEntryType">
            <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
            <remarks>
            <para>
            Defines the mapping between a level and its event log entry type.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.Level2EventLogEntryType.EventLogEntryType">
            <summary>
            The <see cref="P:log4net.Appender.EventLogAppender.Level2EventLogEntryType.EventLogEntryType"/> for this entry
            </summary>
            <remarks>
            <para>
            Required property.
            The <see cref="P:log4net.Appender.EventLogAppender.Level2EventLogEntryType.EventLogEntryType"/> for this entry
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.declaringType">
            <summary>
            The fully qualified type of the EventLogAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT">
            <summary>
            The maximum size supported by default.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/xzwc042w(v=vs.100).aspx
            The 32766 documented max size is two bytes shy of 32K (I'm assuming 32766 
            may leave space for a two byte null terminator of #0#0). The 32766 max 
            length is what the .NET 4.0 source code checks for, but this is WRONG! 
            Strings with a length > 31839 on Windows Vista or higher can CORRUPT 
            the event log! See: System.Diagnostics.EventLogInternal.InternalWriteEvent() 
            for the use of the 32766 max size.
            </remarks>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER">
            <summary>
            The maximum size supported by a windows operating system that is vista
            or newer.
            </summary>
            <remarks>
            See ReportEvent API:
            	http://msdn.microsoft.com/en-us/library/aa363679(VS.85).aspx
            ReportEvent's lpStrings parameter:
            "A pointer to a buffer containing an array of 
            null-terminated strings that are merged into the message before Event Viewer 
            displays the string to the user. This parameter must be a valid pointer 
            (or NULL), even if wNumStrings is zero. Each string is limited to 31,839 characters."
            
            Going beyond the size of 31839 will (at some point) corrupt the event log on Windows
            Vista or higher! It may succeed for a while...but you will eventually run into the
            error: "System.ComponentModel.Win32Exception : A device attached to the system is
            not functioning", and the event log will then be corrupt (I was able to corrupt 
            an event log using a length of 31877 on Windows 7).
            
            The max size for Windows Vista or higher is documented here:
            	http://msdn.microsoft.com/en-us/library/xzwc042w(v=vs.100).aspx.
            Going over this size may succeed a few times but the buffer will overrun and 
            eventually corrupt the log (based on testing).
            
            The maxEventMsgSize size is based on the max buffer size of the lpStrings parameter of the ReportEvent API.
            The documented max size for EventLog.WriteEntry for Windows Vista and higher is 31839, but I'm leaving room for a
            terminator of #0#0, as we cannot see the source of ReportEvent (though we could use an API monitor to examine the
            buffer, given enough time).
            </remarks>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.MAX_EVENTLOG_MESSAGE_SIZE">
            <summary>
            The maximum size that the operating system supports for
            a event log message.
            </summary>
            <remarks>
            Used to determine the maximum string length that can be written
            to the operating system event log and eventually truncate a string
            that exceeds the limits.
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.GetMaxEventLogMessageSize">
            <summary>
            This method determines the maximum event log message size allowed for
            the current environment.
            </summary>
            <returns></returns>
        </member>
        <member name="T:log4net.Appender.FileAppender">
            <summary>
            Appends logging events to a file.
            </summary>
            <remarks>
            <para>
            Logging events are sent to the file specified by
            the <see cref="P:log4net.Appender.FileAppender.File"/> property.
            </para>
            <para>
            The file can be opened in either append or overwrite mode 
            by specifying the <see cref="P:log4net.Appender.FileAppender.AppendToFile"/> property.
            If the file path is relative it is taken as relative from 
            the application base directory. The file encoding can be
            specified by setting the <see cref="P:log4net.Appender.FileAppender.Encoding"/> property.
            </para>
            <para>
            The layout's <see cref="P:log4net.Layout.ILayout.Header"/> and <see cref="P:log4net.Layout.ILayout.Footer"/>
            values will be written each time the file is opened and closed
            respectively. If the <see cref="P:log4net.Appender.FileAppender.AppendToFile"/> property is <see langword="true"/>
            then the file may contain multiple copies of the header and footer.
            </para>
            <para>
            This appender will first try to open the file for writing when <see cref="M:log4net.Appender.FileAppender.ActivateOptions"/>
            is called. This will typically be during configuration.
            If the file cannot be opened for writing the appender will attempt
            to open the file again each time a message is logged to the appender.
            If the file cannot be opened for writing when a message is logged then
            the message will be discarded by this appender.
            </para>
            <para>
            The <see cref="T:log4net.Appender.FileAppender"/> supports pluggable file locking models via
            the <see cref="P:log4net.Appender.FileAppender.LockingModel"/> property.
            The default behavior, implemented by <see cref="T:log4net.Appender.FileAppender.ExclusiveLock"/> 
            is to obtain an exclusive write lock on the file until this appender is closed.
            The alternative models only hold a
            write lock while the appender is writing a logging event (<see cref="T:log4net.Appender.FileAppender.MinimalLock"/>)
            or synchronize by using a named system wide Mutex (<see cref="T:log4net.Appender.FileAppender.InterProcessLock"/>).
            </para>
            <para>
            All locking strategies have issues and you should seriously consider using a different strategy that
            avoids having multiple processes logging to the same file.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Rodrigo B. de Oliveira</author>
            <author>Douglas de la Torre</author>
            <author>Niall Daley</author>
        </member>
        <member name="T:log4net.Appender.FileAppender.LockingStream">
            <summary>
            Write only <see cref="T:System.IO.Stream"/> that uses the <see cref="T:log4net.Appender.FileAppender.LockingModelBase"/> 
            to manage access to an underlying resource.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            True asynchronous writes are not supported, the implementation forces a synchronous write.
            </summary>
        </member>
        <member name="T:log4net.Appender.FileAppender.LockingModelBase">
            <summary>
            Locking model base class
            </summary>
            <remarks>
            <para>
            Base class for the locking models available to the <see cref="T:log4net.Appender.FileAppender"/> derived loggers.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Open the output file
            </summary>
            <param name="filename">The filename to use</param>
            <param name="append">Whether to append to the file, or overwrite</param>
            <param name="encoding">The encoding to use</param>
            <remarks>
            <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock"/> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock"/>,
            <see cref="M:log4net.Appender.FileAppender.LockingModelBase.ReleaseLock"/> and <see cref="M:log4net.Appender.FileAppender.LockingModelBase.CloseFile"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.CloseFile">
            <summary>
            Close the file
            </summary>
            <remarks>
            <para>
            Close the file. No further writes will be made.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.ActivateOptions">
            <summary>
            Initializes all resources used by this locking model.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.OnClose">
            <summary>
            Disposes all resources that were initialized by this locking model.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock">
            <summary>
            Acquire the lock on the file
            </summary>
            <returns>A stream that is ready to be written to.</returns>
            <remarks>
            <para>
            Acquire the lock on the file in preparation for writing to it. 
            Return a stream pointing to the file. <see cref="M:log4net.Appender.FileAppender.LockingModelBase.ReleaseLock"/>
            must be called to release the lock on the output file.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.ReleaseLock">
            <summary>
            Release the lock on the file
            </summary>
            <remarks>
            <para>
            Release the lock on the file. No further writes will be made to the 
            stream until <see cref="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock"/> is called again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.FileAppender.LockingModelBase.CurrentAppender">
            <summary>
            Gets or sets the <see cref="T:log4net.Appender.FileAppender"/> for this LockingModel
            </summary>
            <value>
            The <see cref="T:log4net.Appender.FileAppender"/> for this LockingModel
            </value>
            <remarks>
            <para>
            The file appender this locking model is attached to and working on
            behalf of.
            </para>
            <para>
            The file appender is used to locate the security context and the error handler to use.
            </para>
            <para>
            The value of this property will be set before <see cref="M:log4net.Appender.FileAppender.LockingModelBase.OpenFile(System.String,System.Boolean,System.Text.Encoding)"/> is
            called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.CreateStream(System.String,System.Boolean,System.IO.FileShare)">
            <summary>
            Helper method that creates a FileStream under CurrentAppender's SecurityContext.
            </summary>
            <remarks>
            <para>
            Typically called during OpenFile or AcquireLock. 
            </para>
            <para>
            If the directory portion of the <paramref name="filename"/> does not exist, it is created
            via Directory.CreateDirecctory.
            </para>
            </remarks>
            <param name="filename"></param>
            <param name="append"></param>
            <param name="fileShare"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.CloseStream(System.IO.Stream)">
            <summary>
            Helper method to close <paramref name="stream"/> under CurrentAppender's SecurityContext.
            </summary>
            <remarks>
            Does not set <paramref name="stream"/> to null.
            </remarks>
            <param name="stream"></param>
        </member>
        <member name="T:log4net.Appender.FileAppender.ExclusiveLock">
            <summary>
            Hold an exclusive lock on the output file
            </summary>
            <remarks>
            <para>
            Open the file once for writing and hold it open until <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.CloseFile"/> is called. 
            Maintains an exclusive lock on the file during this time.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ExclusiveLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Open the file specified and prepare for logging.
            </summary>
            <param name="filename">The filename to use</param>
            <param name="append">Whether to append to the file, or overwrite</param>
            <param name="encoding">The encoding to use</param>
            <remarks>
            <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.AcquireLock"/> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.AcquireLock"/>,
            <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.ReleaseLock"/> and <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.CloseFile"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ExclusiveLock.CloseFile">
            <summary>
            Close the file
            </summary>
            <remarks>
            <para>
            Close the file. No further writes will be made.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ExclusiveLock.AcquireLock">
            <summary>
            Acquire the lock on the file
            </summary>
            <returns>A stream that is ready to be written to.</returns>
            <remarks>
            <para>
            Does nothing. The lock is already taken
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ExclusiveLock.ReleaseLock">
            <summary>
            Release the lock on the file
            </summary>
            <remarks>
            <para>
            Does nothing. The lock will be released when the file is closed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ExclusiveLock.ActivateOptions">
            <summary>
            Initializes all resources used by this locking model.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.ExclusiveLock.OnClose">
            <summary>
            Disposes all resources that were initialized by this locking model.
            </summary>
        </member>
        <member name="T:log4net.Appender.FileAppender.MinimalLock">
            <summary>
            Acquires the file lock for each write
            </summary>
            <remarks>
            <para>
            Opens the file once for each <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock"/>/<see cref="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock"/> cycle, 
            thus holding the lock for the minimal amount of time. This method of locking
            is considerably slower than <see cref="T:log4net.Appender.FileAppender.ExclusiveLock"/> but allows 
            other processes to move/delete the log file whilst logging continues.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.MinimalLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Prepares to open the file when the first message is logged.
            </summary>
            <param name="filename">The filename to use</param>
            <param name="append">Whether to append to the file, or overwrite</param>
            <param name="encoding">The encoding to use</param>
            <remarks>
            <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock"/> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock"/>,
            <see cref="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock"/> and <see cref="M:log4net.Appender.FileAppender.MinimalLock.CloseFile"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.MinimalLock.CloseFile">
            <summary>
            Close the file
            </summary>
            <remarks>
            <para>
            Close the file. No further writes will be made.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock">
            <summary>
            Acquire the lock on the file
            </summary>
            <returns>A stream that is ready to be written to.</returns>
            <remarks>
            <para>
            Acquire the lock on the file in preparation for writing to it. 
            Return a stream pointing to the file. <see cref="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock"/>
            must be called to release the lock on the output file.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock">
            <summary>
            Release the lock on the file
            </summary>
            <remarks>
            <para>
            Release the lock on the file. No further writes will be made to the 
            stream until <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock"/> is called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.MinimalLock.ActivateOptions">
            <summary>
            Initializes all resources used by this locking model.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.MinimalLock.OnClose">
            <summary>
            Disposes all resources that were initialized by this locking model.
            </summary>
        </member>
        <member name="T:log4net.Appender.FileAppender.InterProcessLock">
            <summary>
            Provides cross-process file locking.
            </summary>
            <author>Ron Grabowski</author>
            <author>Steve Wranovsky</author>
        </member>
        <member name="M:log4net.Appender.FileAppender.InterProcessLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Open the file specified and prepare for logging.
            </summary>
            <param name="filename">The filename to use</param>
            <param name="append">Whether to append to the file, or overwrite</param>
            <param name="encoding">The encoding to use</param>
            <remarks>
            <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.InterProcessLock.AcquireLock"/> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.InterProcessLock.AcquireLock"/>,
            -<see cref="M:log4net.Appender.FileAppender.InterProcessLock.ReleaseLock"/> and <see cref="M:log4net.Appender.FileAppender.InterProcessLock.CloseFile"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.InterProcessLock.CloseFile">
            <summary>
            Close the file
            </summary>
            <remarks>
            <para>
            Close the file. No further writes will be made.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.InterProcessLock.AcquireLock">
            <summary>
            Acquire the lock on the file
            </summary>
            <returns>A stream that is ready to be written to.</returns>
            <remarks>
            <para>
            Does nothing. The lock is already taken
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.InterProcessLock.ReleaseLock">
            <summary>
            Releases the lock and allows others to acquire a lock.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.InterProcessLock.ActivateOptions">
            <summary>
            Initializes all resources used by this locking model.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.InterProcessLock.OnClose">
            <summary>
            Disposes all resources that were initialized by this locking model.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.#ctor(log4net.Layout.ILayout,System.String,System.Boolean)">
            <summary>
            Construct a new appender using the layout, file and append mode.
            </summary>
            <param name="layout">the layout to use with this appender</param>
            <param name="filename">the full path to the file to write to</param>
            <param name="append">flag to indicate if the file should be appended to</param>
            <remarks>
            <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.#ctor(log4net.Layout.ILayout,System.String)">
            <summary>
            Construct a new appender using the layout and file specified.
            The file will be appended to.
            </summary>
            <param name="layout">the layout to use with this appender</param>
            <param name="filename">the full path to the file to write to</param>
            <remarks>
            <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.FileAppender.File">
            <summary>
            Gets or sets the path to the file that logging will be written to.
            </summary>
            <value>
            The path to the file that logging will be written to.
            </value>
            <remarks>
            <para>
            If the path is relative it is taken as relative from 
            the application base directory.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.FileAppender.AppendToFile">
            <summary>
            Gets or sets a flag that indicates whether the file should be
            appended to or overwritten.
            </summary>
            <value>
            Indicates whether the file should be appended to or overwritten.
            </value>
            <remarks>
            <para>
            If the value is set to false then the file will be overwritten, if 
            it is set to true then the file will be appended to.
            </para>
            The default value is true.
            </remarks>
        </member>
        <member name="P:log4net.Appender.FileAppender.Encoding">
            <summary>
            Gets or sets <see cref="P:log4net.Appender.FileAppender.Encoding"/> used to write to the file.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.FileAppender.Encoding"/> used to write to the file.
            </value>
            <remarks>
            <para>
            The default encoding set is <see cref="P:System.Text.Encoding.Default"/>
            which is the encoding for the system's current ANSI code page.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.FileAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:log4net.Appender.FileAppender.SecurityContext"/> used to write to the file.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.FileAppender.SecurityContext"/> used to write to the file.
            </value>
            <remarks>
            <para>
            Unless a <see cref="P:log4net.Appender.FileAppender.SecurityContext"/> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider"/> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.FileAppender.LockingModel">
            <summary>
            Gets or sets the <see cref="P:log4net.Appender.FileAppender.LockingModel"/> used to handle locking of the file.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.FileAppender.LockingModel"/> used to lock the file.
            </value>
            <remarks>
            <para>
            Gets or sets the <see cref="P:log4net.Appender.FileAppender.LockingModel"/> used to handle locking of the file.
            </para>
            <para>
            There are three built in locking models, <see cref="T:log4net.Appender.FileAppender.ExclusiveLock"/>, <see cref="T:log4net.Appender.FileAppender.MinimalLock"/> and <see cref="T:log4net.Appender.FileAppender.InterProcessLock"/> .
            The first locks the file from the start of logging to the end, the 
            second locks only for the minimal amount of time when logging each message
            and the last synchronizes processes using a named system wide Mutex.
            </para>
            <para>
            The default locking model is the <see cref="T:log4net.Appender.FileAppender.ExclusiveLock"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ActivateOptions">
            <summary>
            Activate the options on the file appender. 
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Appender.FileAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.FileAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.FileAppender.ActivateOptions"/> must be called again.
            </para>
            <para>
            This will cause the file to be opened.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.Reset">
            <summary>
            Closes any previously opened file and calls the parent's <see cref="M:log4net.Appender.TextWriterAppender.Reset"/>.
            </summary>
            <remarks>
            <para>
            Resets the filename and the file stream.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.OnClose">
            <summary>
            Close this appender instance. The underlying stream or writer is also closed.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.PrepareWriter">
            <summary>
            Called to initialize the file writer
            </summary>
            <remarks>
            <para>
            Will be called for each logged message until the file is
            successfully opened.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)"/>
            method. 
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes a log statement to the output stream if the output stream exists 
            and is writable.  
            </para>
            <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent[])"/>
            method. 
            </summary>
            <param name="loggingEvents">The array of events to log.</param>
            <remarks>
            <para>
            Acquires the output file locks once before writing all the events to
            the stream.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.WriteFooter">
            <summary>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer"/> property.
            </summary>
            <remarks>
            <para>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.WriteHeader">
            <summary>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header"/> property.
            </summary>
            <remarks>
            <para>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.CloseWriter">
            <summary>
            Closes the underlying <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <remarks>
            <para>
            Closes the underlying <see cref="T:System.IO.TextWriter"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.CloseFile">
            <summary>
            Closes the previously opened file.
            </summary>
            <remarks>
            <para>
            Writes the <see cref="P:log4net.Layout.ILayout.Footer"/> to the file and then
            closes the file.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.SafeOpenFile(System.String,System.Boolean)">
            <summary>
            Sets and <i>opens</i> the file where the log output will go. The specified file must be writable.
            </summary>
            <param name="fileName">The path to the log file. Must be a fully qualified path.</param>
            <param name="append">If true will append to fileName. Otherwise will truncate fileName</param>
            <remarks>
            <para>
            Calls <see cref="M:log4net.Appender.FileAppender.OpenFile(System.String,System.Boolean)"/> but guarantees not to throw an exception.
            Errors are passed to the <see cref="P:log4net.Appender.TextWriterAppender.ErrorHandler"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            Sets and <i>opens</i> the file where the log output will go. The specified file must be writable.
            </summary>
            <param name="fileName">The path to the log file. Must be a fully qualified path.</param>
            <param name="append">If true will append to fileName. Otherwise will truncate fileName</param>
            <remarks>
            <para>
            If there was already an opened file, then the previous file
            is closed first.
            </para>
            <para>
            This method will ensure that the directory structure
            for the <paramref name="fileName"/> specified exists.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.SetQWForFiles(System.IO.Stream)">
            <summary>
            Sets the quiet writer used for file output
            </summary>
            <param name="fileStream">the file stream that has been opened for writing</param>
            <remarks>
            <para>
            This implementation of <see cref="M:SetQWForFiles(Stream)"/> creates a <see cref="T:System.IO.StreamWriter"/>
            over the <paramref name="fileStream"/> and passes it to the 
            <see cref="M:SetQWForFiles(TextWriter)"/> method.
            </para>
            <para>
            This method can be overridden by sub classes that want to wrap the
            <see cref="T:System.IO.Stream"/> in some way, for example to encrypt the output
            data using a <c>System.Security.Cryptography.CryptoStream</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            Sets the quiet writer being used.
            </summary>
            <param name="writer">the writer over the file stream that has been opened for writing</param>
            <remarks>
            <para>
            This method can be overridden by sub classes that want to
            wrap the <see cref="T:System.IO.TextWriter"/> in some way.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ConvertToFullPath(System.String)">
            <summary>
            Convert a path into a fully qualified path.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>The fully qualified path.</returns>
            <remarks>
            <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_appendToFile">
            <summary>
            Flag to indicate if we should append to the file
            or overwrite the file. The default is to append.
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_fileName">
            <summary>
            The name of the log file.
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_encoding">
            <summary>
            The encoding to use for the file stream.
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_stream">
            <summary>
            The stream to log to. Has added locking semantics
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_lockingModel">
            <summary>
            The locking model to use
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.declaringType">
            <summary>
            The fully qualified type of the FileAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Appender.ForwardingAppender">
            <summary>
            This appender forwards logging events to attached appenders.
            </summary>
            <remarks>
            <para>
            The forwarding appender can be used to specify different thresholds
            and filters for the same appender at different locations within the hierarchy.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ForwardingAppender" /> class.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.OnClose">
            <summary>
            Closes the appender and releases resources.
            </summary>
            <remarks>
            <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
            <para>
            It is a programming error to append to a closed appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Forward the logging event to the attached appenders 
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Delivers the logging event to all the attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            Forward the logging events to the attached appenders 
            </summary>
            <param name="loggingEvents">The array of events to log.</param>
            <remarks>
            <para>
            Delivers the logging events to all the attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Adds an <see cref="T:log4net.Appender.IAppender" /> to the list of appenders of this
            instance.
            </summary>
            <param name="newAppender">The <see cref="T:log4net.Appender.IAppender" /> to add to this appender.</param>
            <remarks>
            <para>
            If the specified <see cref="T:log4net.Appender.IAppender" /> is already in the list of
            appenders, then it won't be added again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ForwardingAppender.Appenders">
            <summary>
            Gets the appenders contained in this appender as an 
            <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <remarks>
            If no appenders can be found, then an <see cref="T:log4net.Util.EmptyCollection"/> 
            is returned.
            </remarks>
            <returns>
            A collection of the appenders in this appender.
            </returns>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.GetAppender(System.String)">
            <summary>
            Looks for the appender with the specified name.
            </summary>
            <param name="name">The name of the appender to lookup.</param>
            <returns>
            The appender with the specified name, or <c>null</c>.
            </returns>
            <remarks>
            <para>
            Get the named appender attached to this appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.RemoveAllAppenders">
            <summary>
            Removes all previously added appenders from this appender.
            </summary>
            <remarks>
            <para>
            This is useful when re-reading configuration information.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Removes the specified appender from the list of appenders.
            </summary>
            <param name="appender">The appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close"/> on the appender removed.
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.RemoveAppender(System.String)">
            <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close"/> on the appender removed.
            </remarks>
        </member>
        <member name="F:log4net.Appender.ForwardingAppender.m_appenderAttachedImpl">
            <summary>
            Implementation of the <see cref="T:log4net.Core.IAppenderAttachable"/> interface
            </summary>
        </member>
        <member name="T:log4net.Appender.IAppender">
            <summary>
            Implement this interface for your own strategies for printing log statements.
            </summary>
            <remarks>
            <para>
            Implementors should consider extending the <see cref="T:log4net.Appender.AppenderSkeleton"/>
            class which provides a default implementation of this interface.
            </para>
            <para>
            Appenders can also implement the <see cref="T:log4net.Core.IOptionHandler"/> interface. Therefore
            they would require that the <see cref="M:IOptionHandler.ActivateOptions()"/> method
            be called after the appenders properties have been configured.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.IAppender.Close">
            <summary>
            Closes the appender and releases resources.
            </summary>
            <remarks>
            <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
            <para>
            It is a programming error to append to a closed appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)">
            <summary>
            Log the logging event in Appender specific way.
            </summary>
            <param name="loggingEvent">The event to log</param>
            <remarks>
            <para>
            This method is called to log a message into this appender.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.IAppender.Name">
            <summary>
            Gets or sets the name of this appender.
            </summary>
            <value>The name of the appender.</value>
            <remarks>
            <para>The name uniquely identifies the appender.</para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.IBulkAppender">
            <summary>
            Interface for appenders that support bulk logging.
            </summary>
            <remarks>
            <para>
            This interface extends the <see cref="T:log4net.Appender.IAppender"/> interface to
            support bulk logging of <see cref="T:log4net.Core.LoggingEvent"/> objects. Appenders
            should only implement this interface if they can bulk log efficiently.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Appender.IBulkAppender.DoAppend(log4net.Core.LoggingEvent[])">
            <summary>
            Log the array of logging events in Appender specific way.
            </summary>
            <param name="loggingEvents">The events to log</param>
            <remarks>
            <para>
            This method is called to log an array of events into this appender.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.IFlushable">
            <summary>
            Interface that can be implemented by Appenders that buffer logging data and expose a <see cref="M:log4net.Appender.IFlushable.Flush(System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:log4net.Appender.IFlushable.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <remarks>
            Appenders that implement the <see cref="M:log4net.Appender.IFlushable.Flush(System.Int32)"/> method must do so in a thread-safe manner: it can be called concurrently with
            the <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)"/> method.
            <para>
            Typically this is done by locking on the Appender instance, e.g.:
            <code>
            <![CDATA[
            public bool Flush(int millisecondsTimeout)
            {
                lock(this)
                {
                    // Flush buffered logging data
                    ...
                }
            }
            ]]>
            </code>
            </para>
            <para>
            The <paramref name="millisecondsTimeout"/> parameter is only relevant for appenders that process logging events asynchronously,
            such as <see cref="T:log4net.Appender.RemotingAppender"/>.
            </para>
            </remarks>
            <param name="millisecondsTimeout">The maximum time to wait for logging events to be flushed.</param>
            <returns><c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="T:log4net.Appender.LocalSyslogAppender">
            <summary>
            Logs events to a local syslog service.
            </summary>
            <remarks>
            <note>
            This appender uses the POSIX libc library functions <c>openlog</c>, <c>syslog</c>, and <c>closelog</c>.
            If these functions are not available on the local system then this appender will not work!
            </note>
            <para>
            The functions <c>openlog</c>, <c>syslog</c>, and <c>closelog</c> are specified in SUSv2 and 
            POSIX 1003.1-2001 standards. These are used to log messages to the local syslog service.
            </para>
            <para>
            This appender talks to a local syslog service. If you need to log to a remote syslog
            daemon and you cannot configure your local syslog service to do this you may be
            able to use the <see cref="T:log4net.Appender.RemoteSyslogAppender"/> to log via UDP.
            </para>
            <para>
            Syslog messages must have a facility and and a severity. The severity
            is derived from the Level of the logging event.
            The facility must be chosen from the set of defined syslog 
            <see cref="T:log4net.Appender.LocalSyslogAppender.SyslogFacility"/> values. The facilities list is predefined
            and cannot be extended.
            </para>
            <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.LocalSyslogAppender.Identity"/> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Util.SystemInfo.ApplicationFriendlyName"/>).
            </para>
            </remarks>
            <author>Rob Lyon</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="T:log4net.Appender.LocalSyslogAppender.SyslogSeverity">
            <summary>
            syslog severities
            </summary>
            <remarks>
            <para>
            The log4net Level maps to a syslog severity using the
            <see cref="M:log4net.Appender.LocalSyslogAppender.AddMapping(log4net.Appender.LocalSyslogAppender.LevelSeverity)"/> method and the <see cref="T:log4net.Appender.LocalSyslogAppender.LevelSeverity"/>
            class. The severity is set on <see cref="P:log4net.Appender.LocalSyslogAppender.LevelSeverity.Severity"/>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Emergency">
            <summary>
            system is unusable
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Alert">
            <summary>
            action must be taken immediately
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Critical">
            <summary>
            critical conditions
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Error">
            <summary>
            error conditions
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Warning">
            <summary>
            warning conditions
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Notice">
            <summary>
            normal but significant condition
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Informational">
            <summary>
            informational
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Debug">
            <summary>
            debug-level messages
            </summary>
        </member>
        <member name="T:log4net.Appender.LocalSyslogAppender.SyslogFacility">
            <summary>
            syslog facilities
            </summary>
            <remarks>
            <para>
            The syslog facility defines which subsystem the logging comes from.
            This is set on the <see cref="P:log4net.Appender.LocalSyslogAppender.Facility"/> property.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Kernel">
            <summary>
            kernel messages
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.User">
            <summary>
            random user-level messages
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Mail">
            <summary>
            mail system
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Daemons">
            <summary>
            system daemons
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Authorization">
            <summary>
            security/authorization messages
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Syslog">
            <summary>
            messages generated internally by syslogd
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Printer">
            <summary>
            line printer subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.News">
            <summary>
            network news subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Uucp">
            <summary>
            UUCP subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Clock">
            <summary>
            clock (cron/at) daemon
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Authorization2">
            <summary>
            security/authorization  messages (private)
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Ftp">
            <summary>
            ftp daemon
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Ntp">
            <summary>
            NTP subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Audit">
            <summary>
            log audit
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Alert">
            <summary>
            log alert
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Clock2">
            <summary>
            clock daemon
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local0">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local1">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local2">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local3">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local4">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local5">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local6">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local7">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.LocalSyslogAppender" /> class.
            </summary>
            <remarks>
            This instance of the <see cref="T:log4net.Appender.LocalSyslogAppender" /> class is set up to write 
            to a local syslog service.
            </remarks>
        </member>
        <member name="P:log4net.Appender.LocalSyslogAppender.Identity">
            <summary>
            Message identity
            </summary>
            <remarks>
            <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.LocalSyslogAppender.Identity"/> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Util.SystemInfo.ApplicationFriendlyName"/>).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.LocalSyslogAppender.Facility">
            <summary>
            Syslog facility
            </summary>
            <remarks>
            Set to one of the <see cref="T:log4net.Appender.LocalSyslogAppender.SyslogFacility"/> values. The list of
            facilities is predefined and cannot be extended. The default value
            is <see cref="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.User"/>.
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.AddMapping(log4net.Appender.LocalSyslogAppender.LevelSeverity)">
            <summary>
            Add a mapping of level to severity
            </summary>
            <param name="mapping">The mapping to add</param>
            <remarks>
            <para>
            Adds a <see cref="T:log4net.Appender.LocalSyslogAppender.LevelSeverity"/> to this appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set.
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Appender.LocalSyslogAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.LocalSyslogAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.LocalSyslogAppender.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes the event to a remote syslog daemon.
            </para>
            <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.OnClose">
            <summary>
            Close the syslog when the appender is closed
            </summary>
            <remarks>
            <para>
            Close the syslog when the appender is closed
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.LocalSyslogAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="P:log4net.Appender.AppenderSkeleton.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="P:log4net.Appender.AppenderSkeleton.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.GetSeverity(log4net.Core.Level)">
            <summary>
            Translates a log4net level to a syslog severity.
            </summary>
            <param name="level">A log4net level.</param>
            <returns>A syslog severity.</returns>
            <remarks>
            <para>
            Translates a log4net level to a syslog severity.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.GeneratePriority(log4net.Appender.LocalSyslogAppender.SyslogFacility,log4net.Appender.LocalSyslogAppender.SyslogSeverity)">
            <summary>
            Generate a syslog priority.
            </summary>
            <param name="facility">The syslog facility.</param>
            <param name="severity">The syslog severity.</param>
            <returns>A syslog priority.</returns>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.m_facility">
            <summary>
            The facility. The default facility is <see cref="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.User"/>.
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.m_identity">
            <summary>
            The message identity
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.m_handleToIdentity">
            <summary>
            Marshaled handle to the identity string. We have to hold on to the
            string as the <c>openlog</c> and <c>syslog</c> APIs just hold the
            pointer to the ident and dereference it for each log message.
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.m_levelMapping">
            <summary>
            Mapping from level object to syslog severity
            </summary>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.openlog(System.IntPtr,System.Int32,log4net.Appender.LocalSyslogAppender.SyslogFacility)">
            <summary>
            Open connection to system logger.
            </summary>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.syslog(System.Int32,System.String,System.String)">
            <summary>
            Generate a log message.
            </summary>
            <remarks>
            <para>
            The libc syslog method takes a format string and a variable argument list similar
            to the classic printf function. As this type of vararg list is not supported
            by C# we need to specify the arguments explicitly. Here we have specified the
            format string with a single message argument. The caller must set the format 
            string to <c>"%s"</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.closelog">
            <summary>
            Close descriptor used to write to system logger.
            </summary>
        </member>
        <member name="T:log4net.Appender.LocalSyslogAppender.LevelSeverity">
            <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </summary>
            <remarks>
            <para>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.LocalSyslogAppender.LevelSeverity.Severity">
            <summary>
            The mapped syslog severity for the specified level
            </summary>
            <remarks>
            <para>
            Required property.
            The mapped syslog severity for the specified level
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.ManagedColoredConsoleAppender">
            <summary>
            Appends colorful logging events to the console, using the .NET 2
            built-in capabilities.
            </summary>
            <remarks>
            <para>
            ManagedColoredConsoleAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user. It also allows the color of a specific type of message to be set.
            </para>
            <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target"/> property can be set to direct the output to the
            error stream.
            </para>
            <para>
            When configuring the colored console appender, mappings should be
            specified to map logging levels to colors. For example:
            </para>
            <code lang="XML" escaped="true">
            <mapping>
            	<level value="ERROR" />
            	<foreColor value="DarkRed" />
            	<backColor value="White" />
            </mapping>
            <mapping>
            	<level value="WARN" />
            	<foreColor value="Yellow" />
            </mapping>
            <mapping>
            	<level value="INFO" />
            	<foreColor value="White" />
            </mapping>
            <mapping>
            	<level value="DEBUG" />
            	<foreColor value="Blue" />
            </mapping>
            </code>
            <para>
            The Level is the standard log4net logging level while
            ForeColor and BackColor are the values of <see cref="T:System.ConsoleColor"/>
            enumeration.
            </para>
            <para>
            Based on the ColoredConsoleAppender
            </para>
            </remarks>
            <author>Rick Hobbs</author>
            <author>Nicko Cadell</author>
            <author>Pavlos Touboulidis</author>
        </member>
        <member name="M:log4net.Appender.ManagedColoredConsoleAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ManagedColoredConsoleAppender" /> class.
            </summary>
            <remarks>
            The instance of the <see cref="T:log4net.Appender.ManagedColoredConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
        </member>
        <member name="P:log4net.Appender.ManagedColoredConsoleAppender.Target">
            <summary>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </summary>
            <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
            <remarks>
            <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ManagedColoredConsoleAppender.AddMapping(log4net.Appender.ManagedColoredConsoleAppender.LevelColors)">
            <summary>
            Add a mapping of level to color - done by the config file
            </summary>
            <param name="mapping">The mapping to add</param>
            <remarks>
            <para>
            Add a <see cref="T:log4net.Appender.ManagedColoredConsoleAppender.LevelColors"/> mapping to this appender.
            Each mapping defines the foreground and background colors
            for a level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ManagedColoredConsoleAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes the event to the console.
            </para>
            <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ManagedColoredConsoleAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ManagedColoredConsoleAppender.ActivateOptions">
            <summary>
            Initialize the options for this appender
            </summary>
            <remarks>
            <para>
            Initialize the level to color mappings set on this appender.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ManagedColoredConsoleAppender.ConsoleOut">
            <summary>
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target"/> to use when writing to the Console 
            standard output stream.
            </summary>
            <remarks>
            <para>
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target"/> to use when writing to the Console 
            standard output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ManagedColoredConsoleAppender.ConsoleError">
            <summary>
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target"/> to use when writing to the Console 
            standard error output stream.
            </summary>
            <remarks>
            <para>
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target"/> to use when writing to the Console 
            standard error output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ManagedColoredConsoleAppender.m_writeToErrorStream">
            <summary>
            Flag to write output to the error stream rather than the standard output stream
            </summary>
        </member>
        <member name="F:log4net.Appender.ManagedColoredConsoleAppender.m_levelMapping">
            <summary>
            Mapping from level object to color value
            </summary>
        </member>
        <member name="T:log4net.Appender.ManagedColoredConsoleAppender.LevelColors">
            <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
            <remarks>
            <para>
            Defines the mapping between a level and the color it should be displayed in.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ManagedColoredConsoleAppender.LevelColors.ForeColor">
            <summary>
            The mapped foreground color for the specified level
            </summary>
            <remarks>
            <para>
            Required property.
            The mapped foreground color for the specified level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ManagedColoredConsoleAppender.LevelColors.BackColor">
            <summary>
            The mapped background color for the specified level
            </summary>
            <remarks>
            <para>
            Required property.
            The mapped background color for the specified level.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.MemoryAppender">
            <summary>
            Stores logging events in an array.
            </summary>
            <remarks>
            <para>
            The memory appender stores all the logging events
            that are appended in an in-memory array.
            </para>
            <para>
            Use the <see cref="M:PopAllEvents()"/> method to get
            and clear the current list of events that have been appended.
            </para>
            <para>
            Use the <see cref="M:GetEvents()"/> method to get the current
            list of events that have been appended.  Note there is a
            race-condition when calling <see cref="M:GetEvents()"/> and
            <see cref="M:Clear()"/> in pairs, you better use <see
            mref="M:PopAllEvents()"/> in that case.
            </para>
            <para>
            Use the <see cref="M:Clear()"/> method to clear the
            current list of events.  Note there is a
            race-condition when calling <see cref="M:GetEvents()"/> and
            <see cref="M:Clear()"/> in pairs, you better use <see
            mref="M:PopAllEvents()"/> in that case.
            </para>
            </remarks>
            <author>Julian Biddle</author>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.MemoryAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.MemoryAppender" /> class.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.MemoryAppender.GetEvents">
            <summary>
            Gets the events that have been logged.
            </summary>
            <returns>The events that have been logged</returns>
            <remarks>
            <para>
            Gets the events that have been logged.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.MemoryAppender.OnlyFixPartialEventData">
            <summary>
            Gets or sets a value indicating whether only part of the logging event 
            data should be fixed.
            </summary>
            <value>
            <c>true</c> if the appender should only fix part of the logging event 
            data, otherwise <c>false</c>. The default is <c>false</c>.
            </value>
            <remarks>
            <para>
            Setting this property to <c>true</c> will cause only part of the event 
            data to be fixed and stored in the appender, hereby improving performance. 
            </para>
            <para>
            See <see cref="M:LoggingEvent.FixVolatileData(bool)"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.MemoryAppender.Fix">
            <summary>
            Gets or sets the fields that will be fixed in the event
            </summary>
            <remarks>
            <para>
            The logging event needs to have certain thread specific values 
            captured before it can be buffered. See <see cref="P:log4net.Core.LoggingEvent.Fix"/>
            for details.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.MemoryAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)"/> method. 
            </summary>
            <param name="loggingEvent">the event to log</param>
            <remarks>
            <para>Stores the <paramref name="loggingEvent"/> in the events list.</para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.MemoryAppender.Clear">
            <summary>
            Clear the list of events
            </summary>
            <remarks>
            Clear the list of events
            </remarks>
        </member>
        <member name="M:log4net.Appender.MemoryAppender.PopAllEvents">
            <summary>
            Gets the events that have been logged and clears the list of events.
            </summary>
            <returns>The events that have been logged</returns>
            <remarks>
            <para>
            Gets the events that have been logged and clears the list of events.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.MemoryAppender.m_eventsList">
            <summary>
            The list of events that have been appended.
            </summary>
        </member>
        <member name="F:log4net.Appender.MemoryAppender.m_fixFlags">
            <summary>
            Value indicating which fields in the event should be fixed
            </summary>
            <remarks>
            By default all fields are fixed
            </remarks>
        </member>
        <member name="T:log4net.Appender.NetSendAppender">
            <summary>
            Logs entries by sending network messages using the 
            <see cref="M:log4net.Appender.NetSendAppender.NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)" /> native function.
            </summary>
            <remarks>
            <para>
            You can send messages only to names that are active 
            on the network. If you send the message to a user name, 
            that user must be logged on and running the Messenger 
            service to receive the message.
            </para>
            <para>
            The receiver will get a top most window displaying the 
            messages one at a time, therefore this appender should 
            not be used to deliver a high volume of messages.
            </para>
            <para>
            The following table lists some possible uses for this appender :
            </para>
            <para>
            <list type="table">
                <listheader>
                    <term>Action</term>
                    <description>Property Value(s)</description>
                </listheader>
                <item>
                    <term>Send a message to a user account on the local machine</term>
                    <description>
                        <para>
                        <see cref="P:log4net.Appender.NetSendAppender.Server"/> = &lt;name of the local machine&gt;
                        </para>
                        <para>
                        <see cref="P:log4net.Appender.NetSendAppender.Recipient"/> = &lt;user name&gt;
                        </para>
                    </description>
                </item>
                <item>
                    <term>Send a message to a user account on a remote machine</term>
                    <description>
                        <para>
                        <see cref="P:log4net.Appender.NetSendAppender.Server"/> = &lt;name of the remote machine&gt;
                        </para>
                        <para>
                        <see cref="P:log4net.Appender.NetSendAppender.Recipient"/> = &lt;user name&gt;
                        </para>
                    </description>
                </item>
                <item>
                    <term>Send a message to a domain user account</term>
                    <description>
                        <para>
                        <see cref="P:log4net.Appender.NetSendAppender.Server"/> = &lt;name of a domain controller | uninitialized&gt;
                        </para>
                        <para>
                        <see cref="P:log4net.Appender.NetSendAppender.Recipient"/> = &lt;user name&gt;
                        </para>
                    </description>
                </item>
                <item>
                    <term>Send a message to all the names in a workgroup or domain</term>
                    <description>
                        <para>
                        <see cref="P:log4net.Appender.NetSendAppender.Recipient"/> = &lt;workgroup name | domain name&gt;*
                        </para>
                    </description>
                </item>
                <item>
                    <term>Send a message from the local machine to a remote machine</term>
                    <description>
                        <para>
                        <see cref="P:log4net.Appender.NetSendAppender.Server"/> = &lt;name of the local machine | uninitialized&gt;
                        </para>
                        <para>
                        <see cref="P:log4net.Appender.NetSendAppender.Recipient"/> = &lt;name of the remote machine&gt;
                        </para>
                    </description>
                </item>
            </list>
            </para>
            <para>
            <b>Note :</b> security restrictions apply for sending 
            network messages, see <see cref="M:log4net.Appender.NetSendAppender.NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)" /> 
            for more information.
            </para>
            </remarks>
            <example>
            <para>
            An example configuration section to log information 
            using this appender from the local machine, named 
            LOCAL_PC, to machine OPERATOR_PC :
            </para>
            <code lang="XML" escaped="true">
            <appender name="NetSendAppender_Operator" type="log4net.Appender.NetSendAppender">
                <server value="LOCAL_PC" />
                <recipient value="OPERATOR_PC" />
                <layout type="log4net.Layout.PatternLayout" value="%-5p %c [%x] - %m%n" />
            </appender>
            </code>
            </example>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Appender.NetSendAppender.m_server">
            <summary>
            The DNS or NetBIOS name of the server on which the function is to execute.
            </summary>
        </member>
        <member name="F:log4net.Appender.NetSendAppender.m_sender">
            <summary>
            The sender of the network message.
            </summary>
        </member>
        <member name="F:log4net.Appender.NetSendAppender.m_recipient">
            <summary>
            The message alias to which the message should be sent.
            </summary>
        </member>
        <member name="F:log4net.Appender.NetSendAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="M:log4net.Appender.NetSendAppender.#ctor">
            <summary>
            Initializes the appender.
            </summary>
            <remarks>
            The default constructor initializes all fields to their default values.
            </remarks>
        </member>
        <member name="P:log4net.Appender.NetSendAppender.Sender">
            <summary>
            Gets or sets the sender of the message.
            </summary>
            <value>
            The sender of the message.
            </value>
            <remarks>
            If this property is not specified, the message is sent from the local computer.
            </remarks>
        </member>
        <member name="P:log4net.Appender.NetSendAppender.Recipient">
            <summary>
            Gets or sets the message alias to which the message should be sent.
            </summary>
            <value>
            The recipient of the message.
            </value>
            <remarks>
            This property should always be specified in order to send a message.
            </remarks>
        </member>
        <member name="P:log4net.Appender.NetSendAppender.Server">
            <summary>
            Gets or sets the DNS or NetBIOS name of the remote server on which the function is to execute.
            </summary>
            <value>
            DNS or NetBIOS name of the remote server on which the function is to execute.
            </value>
            <remarks>
            <para>
            For Windows NT 4.0 and earlier, the string should begin with \\.
            </para>
            <para>
            If this property is not specified, the local computer is used. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.NetSendAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:log4net.Appender.NetSendAppender.SecurityContext"/> used to call the NetSend method.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.NetSendAppender.SecurityContext"/> used to call the NetSend method.
            </value>
            <remarks>
            <para>
            Unless a <see cref="P:log4net.Appender.NetSendAppender.SecurityContext"/> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider"/> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.NetSendAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set.
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Appender.NetSendAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.NetSendAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.NetSendAppender.ActivateOptions"/> must be called again.
            </para>
            <para>
            The appender will be ignored if no <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> was specified.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The required property <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> was not specified.</exception>
        </member>
        <member name="M:log4net.Appender.NetSendAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Sends the event using a network message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.NetSendAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.NetSendAppender.NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Sends a buffer of information to a registered message alias.
            </summary>
            <param name="serverName">The DNS or NetBIOS name of the server on which the function is to execute.</param>
            <param name="msgName">The message alias to which the message buffer should be sent</param>
            <param name="fromName">The originator of the message.</param>
            <param name="buffer">The message text.</param>
            <param name="bufferSize">The length, in bytes, of the message text.</param>
            <remarks>
            <para>
            The following restrictions apply for sending network messages:
            </para>
            <para>
            <list type="table">
                <listheader>
                    <term>Platform</term>
                    <description>Requirements</description>
                </listheader>
                <item>
                    <term>Windows NT</term>
                    <description>
                        <para>
                        No special group membership is required to send a network message.
                        </para>
                        <para>
                        Admin, Accounts, Print, or Server Operator group membership is required to 
                        successfully send a network message on a remote server.
                        </para>
                    </description>
                </item>
                <item>
                    <term>Windows 2000 or later</term>
                    <description>
                        <para>
                        If you send a message on a domain controller that is running Active Directory, 
                        access is allowed or denied based on the access control list (ACL) for the securable 
                        object. The default ACL permits only Domain Admins and Account Operators to send a network message. 
                        </para>
                        <para>
                        On a member server or workstation, only Administrators and Server Operators can send a network message. 
                        </para>
                    </description>
                </item>
            </list>
            </para>
            <para>
            For more information see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/netmgmt/netmgmt/security_requirements_for_the_network_management_functions.asp">Security Requirements for the Network Management Functions</a>.
            </para>
            </remarks>
            <returns>
            <para>
            If the function succeeds, the return value is zero.
            </para>
            </returns>
        </member>
        <member name="T:log4net.Appender.OutputDebugStringAppender">
            <summary>
            Appends log events to the OutputDebugString system.
            </summary>
            <remarks>
            <para>
            OutputDebugStringAppender appends log events to the
            OutputDebugString system.
            </para>
            <para>
            The string is passed to the native <c>OutputDebugString</c> 
            function.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.OutputDebugStringAppender" /> class.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Write the logging event to the output debug string API
            </summary>
            <param name="loggingEvent">the event to log</param>
            <remarks>
            <para>
            Write the logging event to the output debug string API
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.OutputDebugStringAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.OutputDebugString(System.String)">
            <summary>
            Stub for OutputDebugString native method
            </summary>
            <param name="message">the string to output</param>
            <remarks>
            <para>
            Stub for OutputDebugString native method
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.RemoteSyslogAppender">
            <summary>
            Logs events to a remote syslog daemon.
            </summary>
            <remarks>
            <para>
            The BSD syslog protocol is used to remotely log to
            a syslog daemon. The syslogd listens for for messages
            on UDP port 514.
            </para>
            <para>
            The syslog UDP protocol is not authenticated. Most syslog daemons
            do not accept remote log messages because of the security implications.
            You may be able to use the LocalSyslogAppender to talk to a local
            syslog service.
            </para>
            <para>
            There is an RFC 3164 that claims to document the BSD Syslog Protocol.
            This RFC can be seen here: http://www.faqs.org/rfcs/rfc3164.html.
            This appender generates what the RFC calls an "Original Device Message",
            i.e. does not include the TIMESTAMP or HOSTNAME fields. By observation
            this format of message will be accepted by all current syslog daemon
            implementations. The daemon will attach the current time and the source
            hostname or IP address to any messages received.
            </para>
            <para>
            Syslog messages must have a facility and and a severity. The severity
            is derived from the Level of the logging event.
            The facility must be chosen from the set of defined syslog 
            <see cref="T:log4net.Appender.RemoteSyslogAppender.SyslogFacility"/> values. The facilities list is predefined
            and cannot be extended.
            </para>
            <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.RemoteSyslogAppender.Identity"/> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Core.LoggingEvent.Domain"/>).
            </para>
            </remarks>
            <author>Rob Lyon</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.DefaultSyslogPort">
            <summary>
            Syslog port 514
            </summary>
        </member>
        <member name="T:log4net.Appender.RemoteSyslogAppender.SyslogSeverity">
            <summary>
            syslog severities
            </summary>
            <remarks>
            <para>
            The syslog severities.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Emergency">
            <summary>
            system is unusable
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Alert">
            <summary>
            action must be taken immediately
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Critical">
            <summary>
            critical conditions
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Error">
            <summary>
            error conditions
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Warning">
            <summary>
            warning conditions
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Notice">
            <summary>
            normal but significant condition
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Informational">
            <summary>
            informational
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Debug">
            <summary>
            debug-level messages
            </summary>
        </member>
        <member name="T:log4net.Appender.RemoteSyslogAppender.SyslogFacility">
            <summary>
            syslog facilities
            </summary>
            <remarks>
            <para>
            The syslog facilities
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Kernel">
            <summary>
            kernel messages
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.User">
            <summary>
            random user-level messages
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Mail">
            <summary>
            mail system
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Daemons">
            <summary>
            system daemons
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Authorization">
            <summary>
            security/authorization messages
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Syslog">
            <summary>
            messages generated internally by syslogd
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Printer">
            <summary>
            line printer subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.News">
            <summary>
            network news subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Uucp">
            <summary>
            UUCP subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Clock">
            <summary>
            clock (cron/at) daemon
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Authorization2">
            <summary>
            security/authorization  messages (private)
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Ftp">
            <summary>
            ftp daemon
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Ntp">
            <summary>
            NTP subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Audit">
            <summary>
            log audit
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Alert">
            <summary>
            log alert
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Clock2">
            <summary>
            clock daemon
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local0">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local1">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local2">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local3">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local4">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local5">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local6">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local7">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="M:log4net.Appender.RemoteSyslogAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.RemoteSyslogAppender" /> class.
            </summary>
            <remarks>
            This instance of the <see cref="T:log4net.Appender.RemoteSyslogAppender" /> class is set up to write 
            to a remote syslog daemon.
            </remarks>
        </member>
        <member name="P:log4net.Appender.RemoteSyslogAppender.Identity">
            <summary>
            Message identity
            </summary>
            <remarks>
            <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.RemoteSyslogAppender.Identity"/> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Core.LoggingEvent.Domain"/>).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RemoteSyslogAppender.Facility">
            <summary>
            Syslog facility
            </summary>
            <remarks>
            Set to one of the <see cref="T:log4net.Appender.RemoteSyslogAppender.SyslogFacility"/> values. The list of
            facilities is predefined and cannot be extended. The default value
            is <see cref="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.User"/>.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemoteSyslogAppender.AddMapping(log4net.Appender.RemoteSyslogAppender.LevelSeverity)">
            <summary>
            Add a mapping of level to severity
            </summary>
            <param name="mapping">The mapping to add</param>
            <remarks>
            <para>
            Add a <see cref="T:log4net.Appender.RemoteSyslogAppender.LevelSeverity"/> mapping to this appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemoteSyslogAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes the event to a remote syslog daemon.
            </para>
            <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemoteSyslogAppender.ActivateOptions">
            <summary>
            Initialize the options for this appender
            </summary>
            <remarks>
            <para>
            Initialize the level to syslog severity mappings set on this appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemoteSyslogAppender.GetSeverity(log4net.Core.Level)">
            <summary>
            Translates a log4net level to a syslog severity.
            </summary>
            <param name="level">A log4net level.</param>
            <returns>A syslog severity.</returns>
            <remarks>
            <para>
            Translates a log4net level to a syslog severity.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemoteSyslogAppender.GeneratePriority(log4net.Appender.RemoteSyslogAppender.SyslogFacility,log4net.Appender.RemoteSyslogAppender.SyslogSeverity)">
            <summary>
            Generate a syslog priority.
            </summary>
            <param name="facility">The syslog facility.</param>
            <param name="severity">The syslog severity.</param>
            <returns>A syslog priority.</returns>
            <remarks>
            <para>
            Generate a syslog priority.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.m_facility">
            <summary>
            The facility. The default facility is <see cref="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.User"/>.
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.m_identity">
            <summary>
            The message identity
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.m_levelMapping">
            <summary>
            Mapping from level object to syslog severity
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.c_renderBufferSize">
            <summary>
            Initial buffer size
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.c_renderBufferMaxCapacity">
            <summary>
            Maximum buffer size before it is recycled
            </summary>
        </member>
        <member name="T:log4net.Appender.RemoteSyslogAppender.LevelSeverity">
            <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </summary>
            <remarks>
            <para>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RemoteSyslogAppender.LevelSeverity.Severity">
            <summary>
            The mapped syslog severity for the specified level
            </summary>
            <remarks>
            <para>
            Required property.
            The mapped syslog severity for the specified level
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.RemotingAppender">
            <summary>
            Delivers logging events to a remote logging sink. 
            </summary>
            <remarks>
            <para>
            This Appender is designed to deliver events to a remote sink. 
            That is any object that implements the <see cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink"/>
            interface. It delivers the events using .NET remoting. The
            object to deliver events to is specified by setting the
            appenders <see cref="P:log4net.Appender.RemotingAppender.Sink"/> property.</para>
            <para>
            The RemotingAppender buffers events before sending them. This allows it to 
            make more efficient use of the remoting infrastructure.</para>
            <para>
            Once the buffer is full the events are still not sent immediately. 
            They are scheduled to be sent using a pool thread. The effect is that 
            the send occurs asynchronously. This is very important for a 
            number of non obvious reasons. The remoting infrastructure will 
            flow thread local variables (stored in the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>),
            if they are marked as <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative"/>, across the 
            remoting boundary. If the server is not contactable then
            the remoting infrastructure will clear the <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative"/>
            objects from the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>. To prevent a logging failure from
            having side effects on the calling application the remoting call must be made
            from a separate thread to the one used by the application. A <see cref="T:System.Threading.ThreadPool"/>
            thread is used for this. If no <see cref="T:System.Threading.ThreadPool"/> thread is available then
            the events will block in the thread pool manager until a thread is available.</para>
            <para>
            Because the events are sent asynchronously using pool threads it is possible to close 
            this appender before all the queued events have been sent.
            When closing the appender attempts to wait until all the queued events have been sent, but 
            this will timeout after 30 seconds regardless.</para>
            <para>
            If this appender is being closed because the <see cref="E:System.AppDomain.ProcessExit"/>
            event has fired it may not be possible to send all the queued events. During process
            exit the runtime limits the time that a <see cref="E:System.AppDomain.ProcessExit"/>
            event handler is allowed to run for. If the runtime terminates the threads before
            the queued events have been sent then they will be lost. To ensure that all events
            are sent the appender must be closed before the application exits. See 
            <see cref="M:log4net.Core.LoggerManager.Shutdown"/> for details on how to shutdown
            log4net programmatically.</para>
            </remarks>
            <seealso cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" />
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Daniel Cazzulino</author>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.RemotingAppender" /> class.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RemotingAppender.Sink">
            <summary>
            Gets or sets the URL of the well-known object that will accept 
            the logging events.
            </summary>
            <value>
            The well-known URL of the remote sink.
            </value>
            <remarks>
            <para>
            The URL of the remoting sink that will accept logging events.
            The sink must implement the <see cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink"/>
            interface.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Appender.RemotingAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.RemotingAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.RemotingAppender.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Send the contents of the buffer to the remote sink.
            </summary>
            <remarks>
            The events are not sent immediately. They are scheduled to be sent
            using a pool thread. The effect is that the send occurs asynchronously.
            This is very important for a number of non obvious reasons. The remoting
            infrastructure will flow thread local variables (stored in the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>),
            if they are marked as <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative"/>, across the 
            remoting boundary. If the server is not contactable then
            the remoting infrastructure will clear the <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative"/>
            objects from the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>. To prevent a logging failure from
            having side effects on the calling application the remoting call must be made
            from a separate thread to the one used by the application. A <see cref="T:System.Threading.ThreadPool"/>
            thread is used for this. If no <see cref="T:System.Threading.ThreadPool"/> thread is available then
            the events will block in the thread pool manager until a thread is available.
            </remarks>
            <param name="events">The events to send.</param>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.OnClose">
            <summary>
            Override base class close.
            </summary>
            <remarks>
            <para>
            This method waits while there are queued work items. The events are
            sent asynchronously using <see cref="T:System.Threading.ThreadPool"/> work items. These items
            will be sent once a thread pool thread is available to send them, therefore
            it is possible to close the appender before all the queued events have been
            sent.</para>
            <para>
            This method attempts to wait until all the queued events have been sent, but this 
            method will timeout after 30 seconds regardless.</para>
            <para>
            If the appender is being closed because the <see cref="E:System.AppDomain.ProcessExit"/>
            event has fired it may not be possible to send all the queued events. During process
            exit the runtime limits the time that a <see cref="E:System.AppDomain.ProcessExit"/>
            event handler is allowed to run for.</para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <param name="millisecondsTimeout">The maximum time to wait for logging events to be flushed.</param>
            <returns><c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.BeginAsyncSend">
            <summary>
            A work item is being queued into the thread pool
            </summary>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.EndAsyncSend">
            <summary>
            A work item from the thread pool has completed
            </summary>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.SendBufferCallback(System.Object)">
            <summary>
            Send the contents of the buffer to the remote sink.
            </summary>
            <remarks>
            This method is designed to be used with the <see cref="T:System.Threading.ThreadPool"/>.
            This method expects to be passed an array of <see cref="T:log4net.Core.LoggingEvent"/>
            objects in the state param.
            </remarks>
            <param name="state">the logging events to send</param>
        </member>
        <member name="F:log4net.Appender.RemotingAppender.m_sinkUrl">
            <summary>
            The URL of the remote sink.
            </summary>
        </member>
        <member name="F:log4net.Appender.RemotingAppender.m_sinkObj">
            <summary>
            The local proxy (.NET remoting) for the remote logging sink.
            </summary>
        </member>
        <member name="F:log4net.Appender.RemotingAppender.m_queuedCallbackCount">
            <summary>
            The number of queued callbacks currently waiting or executing
            </summary>
        </member>
        <member name="F:log4net.Appender.RemotingAppender.m_workQueueEmptyEvent">
            <summary>
            Event used to signal when there are no queued work items
            </summary>
            <remarks>
            This event is set when there are no queued work items. In this
            state it is safe to close the appender.
            </remarks>
        </member>
        <member name="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink">
            <summary>
            Interface used to deliver <see cref="T:log4net.Core.LoggingEvent"/> objects to a remote sink.
            </summary>
            <remarks>
            This interface must be implemented by a remoting sink
            if the <see cref="T:log4net.Appender.RemotingAppender"/> is to be used
            to deliver logging events to the sink.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.IRemoteLoggingSink.LogEvents(log4net.Core.LoggingEvent[])">
            <summary>
            Delivers logging events to the remote sink
            </summary>
            <param name="events">Array of events to log.</param>
            <remarks>
            <para>
            Delivers logging events to the remote sink
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender">
            <summary>
            Appender that rolls log files based on size or date or both.
            </summary>
            <remarks>
            <para>
            RollingFileAppender can roll log files based on size or date or both
            depending on the setting of the <see cref="P:log4net.Appender.RollingFileAppender.RollingStyle"/> property.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Size"/> the log file will be rolled
            once its size exceeds the <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize"/>.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Date"/> the log file will be rolled
            once the date boundary specified in the <see cref="P:log4net.Appender.RollingFileAppender.DatePattern"/> property
            is crossed.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Composite"/> the log file will be
            rolled once the date boundary specified in the <see cref="P:log4net.Appender.RollingFileAppender.DatePattern"/> property
            is crossed, but within a date boundary the file will also be rolled
            once its size exceeds the <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize"/>.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Once"/> the log file will be rolled when
            the appender is configured. This effectively means that the log file can be
            rolled once per program execution.
            </para>
            <para>
            A of few additional optional features have been added:
            <list type="bullet">
            <item>Attach date pattern for current log file <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName"/></item>
            <item>Backup number increments for newer files <see cref="P:log4net.Appender.RollingFileAppender.CountDirection"/></item>
            <item>Infinite number of backups by file size <see cref="P:log4net.Appender.RollingFileAppender.MaxSizeRollBackups"/></item>
            </list>
            </para>
            
            <note>
            <para>
            For large or infinite numbers of backup files a <see cref="P:log4net.Appender.RollingFileAppender.CountDirection"/> 
            greater than zero is highly recommended, otherwise all the backup files need
            to be renamed each time a new backup is created.
            </para>
            <para>
            When Date/Time based rolling is used setting <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName"/> 
            to <see langword="true"/> will reduce the number of file renamings to few or none.
            </para>
            </note>
            
            <note type="caution">
            <para>
            Changing <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName"/> or <see cref="P:log4net.Appender.RollingFileAppender.CountDirection"/> without clearing
            the log file directory of backup files will cause unexpected and unwanted side effects.  
            </para>
            </note>
            
            <para>
            If Date/Time based rolling is enabled this appender will attempt to roll existing files
            in the directory without a Date/Time tag based on the last write date of the base log file.
            The appender only rolls the log file when a message is logged. If Date/Time based rolling 
            is enabled then the appender will not roll the log file at the Date/Time boundary but
            at the point when the next message is logged after the boundary has been crossed.
            </para>
            
            <para>
            The <see cref="T:log4net.Appender.RollingFileAppender"/> extends the <see cref="T:log4net.Appender.FileAppender"/> and
            has the same behavior when opening the log file.
            The appender will first try to open the file for writing when <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions"/>
            is called. This will typically be during configuration.
            If the file cannot be opened for writing the appender will attempt
            to open the file again each time a message is logged to the appender.
            If the file cannot be opened for writing when a message is logged then
            the message will be discarded by this appender.
            </para>
            <para>
            When rolling a backup file necessitates deleting an older backup file the
            file to be deleted is moved to a temporary name before being deleted.
            </para>
            
            <note type="caution">
            <para>
            A maximum number of backup files when rolling on date/time boundaries is not supported.
            </para>
            </note>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Aspi Havewala</author>
            <author>Douglas de la Torre</author>
            <author>Edward Smit</author>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.RollingMode">
            <summary>
            Style of rolling to use
            </summary>
            <remarks>
            <para>
            Style of rolling to use
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Once">
            <summary>
            Roll files once per program execution
            </summary>
            <remarks>
            <para>
            Roll files once per program execution.
            Well really once each time this appender is
            configured.
            </para>
            <para>
            Setting this option also sets <c>AppendToFile</c> to
            <c>false</c> on the <c>RollingFileAppender</c>, otherwise
            this appender would just be a normal file appender.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Size">
            <summary>
            Roll files based only on the size of the file
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Date">
            <summary>
            Roll files based only on the date
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Composite">
            <summary>
            Roll files based on both the size and date of the file
            </summary>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.RollPoint">
            <summary>
            The code assumes that the following 'time' constants are in a increasing sequence.
            </summary>
            <remarks>
            <para>
            The code assumes that the following 'time' constants are in a increasing sequence.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.InvalidRollPoint">
            <summary>
            Roll the log not based on the date
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TopOfMinute">
            <summary>
            Roll the log for each minute
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TopOfHour">
            <summary>
            Roll the log for each hour
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.HalfDay">
            <summary>
            Roll the log twice a day (midday and midnight)
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TopOfDay">
            <summary>
            Roll the log each day (midnight)
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TopOfWeek">
            <summary>
            Roll the log each week
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TopOfMonth">
            <summary>
            Roll the log each month
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.RollingFileAppender" /> class.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.Finalize">
            <summary>
            Cleans up all resources used by this appender.
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.DateTimeStrategy">
            <summary>
            Gets or sets the strategy for determining the current date and time. The default
            implementation is to use LocalDateTime which internally calls through to DateTime.Now. 
            DateTime.UtcNow may be used on frameworks newer than .NET 1.0 by specifying
            <see cref="T:log4net.Appender.RollingFileAppender.UniversalDateTime"/>.
            </summary>
            <value>
            An implementation of the <see cref="T:log4net.Appender.RollingFileAppender.IDateTime"/> interface which returns the current date and time.
            </value>
            <remarks>
            <para>
            Gets or sets the <see cref="T:log4net.Appender.RollingFileAppender.IDateTime"/> used to return the current date and time.
            </para>
            <para>
            There are two built strategies for determining the current date and time, 
            <see cref="T:log4net.Appender.RollingFileAppender.LocalDateTime"/>
            and <see cref="T:log4net.Appender.RollingFileAppender.UniversalDateTime"/>.
            </para>
            <para>
            The default strategy is <see cref="T:log4net.Appender.RollingFileAppender.LocalDateTime"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.DatePattern">
            <summary>
            Gets or sets the date pattern to be used for generating file names
            when rolling over on date.
            </summary>
            <value>
            The date pattern to be used for generating file names when rolling 
            over on date.
            </value>
            <remarks>
            <para>
            Takes a string in the same format as expected by 
            <see cref="T:log4net.DateFormatter.SimpleDateFormatter" />.
            </para>
            <para>
            This property determines the rollover schedule when rolling over
            on date.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.MaxSizeRollBackups">
            <summary>
            Gets or sets the maximum number of backup files that are kept before
            the oldest is erased.
            </summary>
            <value>
            The maximum number of backup files that are kept before the oldest is
            erased.
            </value>
            <remarks>
            <para>
            If set to zero, then there will be no backup files and the log file 
            will be truncated when it reaches <see cref="P:log4net.Appender.RollingFileAppender.MaxFileSize"/>.  
            </para>
            <para>
            If a negative number is supplied then no deletions will be made.  Note 
            that this could result in very slow performance as a large number of 
            files are rolled over unless <see cref="P:log4net.Appender.RollingFileAppender.CountDirection"/> is used.
            </para>
            <para>
            The maximum applies to <b>each</b> time based group of files and 
            <b>not</b> the total.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.MaxFileSize">
            <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
            <value>
            The maximum size in bytes that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
            <remarks>
            <para>
            This property is equivalent to <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize"/> except
            that it is required for differentiating the setter taking a
            <see cref="T:System.Int64"/> argument from the setter taking a <see cref="T:System.String"/> 
            argument.
            </para>
            <para>
            The default maximum file size is 10MB (10*1024*1024).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.MaximumFileSize">
            <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
            <value>
            The maximum size that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
            <remarks>
            <para>
            This property allows you to specify the maximum size with the
            suffixes "KB", "MB" or "GB" so that the size is interpreted being 
            expressed respectively in kilobytes, megabytes or gigabytes. 
            </para>
            <para>
            For example, the value "10KB" will be interpreted as 10240 bytes.
            </para>
            <para>
            The default maximum file size is 10MB.
            </para>
            <para>
            If you have the option to set the maximum file size programmatically
            consider using the <see cref="P:log4net.Appender.RollingFileAppender.MaxFileSize"/> property instead as this
            allows you to set the size in bytes as a <see cref="T:System.Int64"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.CountDirection">
            <summary>
            Gets or sets the rolling file count direction. 
            </summary>
            <value>
            The rolling file count direction.
            </value>
            <remarks>
            <para>
            Indicates if the current file is the lowest numbered file or the
            highest numbered file.
            </para>
            <para>
            By default newer files have lower numbers (<see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> &lt; 0),
            i.e. log.1 is most recent, log.5 is the 5th backup, etc...
            </para>
            <para>
            <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> &gt;= 0 does the opposite i.e.
            log.1 is the first backup made, log.5 is the 5th backup made, etc.
            For infinite backups use <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> &gt;= 0 to reduce 
            rollover costs.
            </para>
            <para>The default file count direction is -1.</para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.RollingStyle">
            <summary>
            Gets or sets the rolling style.
            </summary>
            <value>The rolling style.</value>
            <remarks>
            <para>
            The default rolling style is <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Composite" />.
            </para>
            <para>
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Once"/> this appender's
            <see cref="P:log4net.Appender.FileAppender.AppendToFile"/> property is set to <c>false</c>, otherwise
            the appender would append to a single file rather than rolling
            the file each time it is opened.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.PreserveLogFileNameExtension">
            <summary>
            Gets or sets a value indicating whether to preserve the file name extension when rolling.
            </summary>
            <value>
            <c>true</c> if the file name extension should be preserved.
            </value>
            <remarks>
            <para>
            By default file.log is rolled to file.log.yyyy-MM-dd or file.log.curSizeRollBackup.
            However, under Windows the new file name will loose any program associations as the
            extension is changed. Optionally file.log can be renamed to file.yyyy-MM-dd.log or
            file.curSizeRollBackup.log to maintain any program associations.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.StaticLogFileName">
            <summary>
            Gets or sets a value indicating whether to always log to
            the same file.
            </summary>
            <value>
            <c>true</c> if always should be logged to the same file, otherwise <c>false</c>.
            </value>
            <remarks>
            <para>
            By default file.log is always the current file.  Optionally
            file.log.yyyy-mm-dd for current formatted datePattern can by the currently
            logging file (or file.log.curSizeRollBackup or even
            file.log.yyyy-mm-dd.curSizeRollBackup).
            </para>
            <para>
            This will make time based rollovers with a large number of backups 
            much faster as the appender it won't have to rename all the backups!
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.declaringType">
            <summary>
            The fully qualified type of the RollingFileAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            Sets the quiet writer being used.
            </summary>
            <remarks>
            This method can be overridden by sub classes.
            </remarks>
            <param name="writer">the writer to set</param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Write out a logging event.
            </summary>
            <param name="loggingEvent">the event to write to file.</param>
            <remarks>
            <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            Write out an array of logging events.
            </summary>
            <param name="loggingEvents">the events to write to file.</param>
            <remarks>
            <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.AdjustFileBeforeAppend">
            <summary>
            Performs any required rolling before outputting the next event
            </summary>
            <remarks>
            <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            Creates and opens the file for logging.  If <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName"/>
            is false then the fully qualified name is determined and used.
            </summary>
            <param name="fileName">the name of the file to open</param>
            <param name="append">true to append to existing file</param>
            <remarks>
            <para>This method will ensure that the directory structure
            for the <paramref name="fileName"/> specified exists.</para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.GetNextOutputFileName(System.String)">
            <summary>
            Get the current output file name
            </summary>
            <param name="fileName">the base file name</param>
            <returns>the output file name</returns>
            <remarks>
            The output file name is based on the base fileName specified.
            If <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName"/> is set then the output 
            file name is the same as the base file passed in. Otherwise
            the output file depends on the date pattern, on the count
            direction or both.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.DetermineCurSizeRollBackups">
            <summary>
            Determines curSizeRollBackups (only within the current roll point)
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.GetWildcardPatternForFile(System.String)">
            <summary>
            Generates a wildcard pattern that can be used to find all files
            that are similar to the base file name.
            </summary>
            <param name="baseFileName"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.GetExistingFiles(System.String)">
            <summary>
            Builds a list of filenames for all files matching the base filename plus a file
            pattern.
            </summary>
            <param name="baseFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollOverIfDateBoundaryCrossing">
            <summary>
            Initiates a roll over if needed for crossing a date boundary since the last run.
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.ExistingInit">
            <summary>
            Initializes based on existing conditions at time of <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions"/>.
            </summary>
            <remarks>
            <para>
            Initializes based on existing conditions at time of <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions"/>.
            The following is done
            <list type="bullet">
            <item>determine curSizeRollBackups (only within the current roll point)</item>
            <item>initiates a roll over if needed for crossing a date boundary since the last run.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.InitializeFromOneFile(System.String,System.String)">
            <summary>
            Does the work of bumping the 'current' file counter higher
            to the highest count when an incremental file name is seen.
            The highest count is either the first file (when count direction
            is greater than 0) or the last file (when count direction less than 0).
            In either case, we want to know the highest count that is present.
            </summary>
            <param name="baseFile"></param>
            <param name="curFileName"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.GetBackUpIndex(System.String)">
            <summary>
            Attempts to extract a number from the end of the file name that indicates
            the number of the times the file has been rolled over.
            </summary>
            <remarks>
            Certain date pattern extensions like yyyyMMdd will be parsed as valid backup indexes.
            </remarks>
            <param name="curFileName"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.InitializeRollBackups(System.String,System.Collections.ArrayList)">
            <summary>
            Takes a list of files and a base file name, and looks for 
            'incremented' versions of the base file.  Bumps the max
            count up to the highest count seen.
            </summary>
            <param name="baseFile"></param>
            <param name="arrayFiles"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.ComputeCheckPeriod(System.String)">
            <summary>
            Calculates the RollPoint for the datePattern supplied.
            </summary>
            <param name="datePattern">the date pattern to calculate the check period for</param>
            <returns>The RollPoint that is most accurate for the date pattern supplied</returns>
            <remarks>
            Essentially the date pattern is examined to determine what the
            most suitable roll point is. The roll point chosen is the roll point
            with the smallest period that can be detected using the date pattern
            supplied. i.e. if the date pattern only outputs the year, month, day 
            and hour then the smallest roll point that can be detected would be
            and hourly roll point as minutes could not be detected.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions"/> must be called again.
            </para>
            <para>
            Sets initial conditions including date/time roll over information, first check,
            scheduledFilename, and calls <see cref="M:log4net.Appender.RollingFileAppender.ExistingInit"/> to initialize
            the current number of backups.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.CombinePath(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="path1"></param>
            <param name="path2">.1, .2, .3, etc.</param>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollOverTime(System.Boolean)">
            <summary>
            Rollover the file(s) to date/time tagged file(s).
            </summary>
            <param name="fileIsOpen">set to true if the file to be rolled is currently open</param>
            <remarks>
            <para>
            Rollover the file(s) to date/time tagged file(s).
            Resets curSizeRollBackups. 
            If fileIsOpen is set then the new file is opened (through SafeOpenFile).
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollFile(System.String,System.String)">
            <summary>
            Renames file <paramref name="fromFile"/> to file <paramref name="toFile"/>.
            </summary>
            <param name="fromFile">Name of existing file to roll.</param>
            <param name="toFile">New name for file.</param>
            <remarks>
            <para>
            Renames file <paramref name="fromFile"/> to file <paramref name="toFile"/>. It
            also checks for existence of target file and deletes if it does.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.FileExists(System.String)">
            <summary>
            Test if a file exists at a specified path
            </summary>
            <param name="path">the path to the file</param>
            <returns>true if the file exists</returns>
            <remarks>
            <para>
            Test if a file exists at a specified path
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.DeleteFile(System.String)">
            <summary>
            Deletes the specified file if it exists.
            </summary>
            <param name="fileName">The file to delete.</param>
            <remarks>
            <para>
            Delete a file if is exists.
            The file is first moved to a new filename then deleted.
            This allows the file to be removed even when it cannot
            be deleted, but it still can be moved.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollOverSize">
            <summary>
            Implements file roll base on file size.
            </summary>
            <remarks>
            <para>
            If the maximum number of size based backups is reached
            (<c>curSizeRollBackups == maxSizeRollBackups</c>) then the oldest
            file is deleted -- its index determined by the sign of countDirection.
            If <c>countDirection</c> &lt; 0, then files
            {<c>File.1</c>, ..., <c>File.curSizeRollBackups -1</c>}
            are renamed to {<c>File.2</c>, ...,
            <c>File.curSizeRollBackups</c>}. Moreover, <c>File</c> is
            renamed <c>File.1</c> and closed.
            </para>
            <para>
            A new file is created to receive further log output.
            </para>
            <para>
            If <c>maxSizeRollBackups</c> is equal to zero, then the
            <c>File</c> is truncated with no backup files created.
            </para>
            <para>
            If <c>maxSizeRollBackups</c> &lt; 0, then <c>File</c> is
            renamed if needed and no files are deleted.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollOverRenameFiles(System.String)">
            <summary>
            Implements file roll.
            </summary>
            <param name="baseFileName">the base name to rename</param>
            <remarks>
            <para>
            If the maximum number of size based backups is reached
            (<c>curSizeRollBackups == maxSizeRollBackups</c>) then the oldest
            file is deleted -- its index determined by the sign of countDirection.
            If <c>countDirection</c> &lt; 0, then files
            {<c>File.1</c>, ..., <c>File.curSizeRollBackups -1</c>}
            are renamed to {<c>File.2</c>, ...,
            <c>File.curSizeRollBackups</c>}. 
            </para>
            <para>
            If <c>maxSizeRollBackups</c> is equal to zero, then the
            <c>File</c> is truncated with no backup files created.
            </para>
            <para>
            If <c>maxSizeRollBackups</c> &lt; 0, then <c>File</c> is
            renamed if needed and no files are deleted.
            </para>
            <para>
            This is called by <see cref="M:log4net.Appender.RollingFileAppender.RollOverSize"/> to rename the files.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.NextCheckDate(System.DateTime,log4net.Appender.RollingFileAppender.RollPoint)">
            <summary>
            Get the start time of the next window for the current rollpoint
            </summary>
            <param name="currentDateTime">the current date</param>
            <param name="rollPoint">the type of roll point we are working with</param>
            <returns>the start time for the next roll point an interval after the currentDateTime date</returns>
            <remarks>
            <para>
            Returns the date of the next roll point after the currentDateTime date passed to the method.
            </para>
            <para>
            The basic strategy is to subtract the time parts that are less significant
            than the rollpoint from the current time. This should roll the time back to
            the start of the time window for the current rollpoint. Then we add 1 window
            worth of time and get the start time of the next window for the rollpoint.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_dateTime">
            <summary>
            This object supplies the current date/time.  Allows test code to plug in
            a method to control this class when testing date/time based rolling. The default
            implementation uses the underlying value of DateTime.Now.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_datePattern">
            <summary>
            The date pattern. By default, the pattern is set to <c>".yyyy-MM-dd"</c> 
            meaning daily rollover.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_scheduledFilename">
            <summary>
            The actual formatted filename that is currently being written to
            or will be the file transferred to on roll over
            (based on staticLogFileName).
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_nextCheck">
            <summary>
            The timestamp when we shall next recompute the filename.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_now">
            <summary>
            Holds date of last roll over
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollPoint">
            <summary>
            The type of rolling done
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_maxFileSize">
            <summary>
            The default maximum file size is 10MB
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_maxSizeRollBackups">
            <summary>
            There is zero backup files by default
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_curSizeRollBackups">
            <summary>
            How many sized based backups have been made so far
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_countDirection">
            <summary>
            The rolling file count direction. 
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollingStyle">
            <summary>
            The rolling mode used in this appender.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollDate">
            <summary>
            Cache flag set if we are rolling by date.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollSize">
            <summary>
            Cache flag set if we are rolling by size.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_staticLogFileName">
            <summary>
            Value indicating whether to always log to the same file.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_preserveLogFileNameExtension">
            <summary>
            Value indicating whether to preserve the file name extension when rolling.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_baseFileName">
            <summary>
            FileName provided in configuration.  Used for rolling properly
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_mutexForRolling">
            <summary>
            A mutex that is used to lock rolling of files.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.s_date1970">
            <summary>
            The 1st of January 1970 in UTC
            </summary>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.IDateTime">
            <summary>
            This interface is used to supply Date/Time information to the <see cref="T:log4net.Appender.RollingFileAppender"/>.
            </summary>
            <remarks>
            This interface is used to supply Date/Time information to the <see cref="T:log4net.Appender.RollingFileAppender"/>.
            Used primarily to allow test classes to plug themselves in so they can
            supply test date/times.
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.IDateTime.Now">
            <summary>
            Gets the <i>current</i> time.
            </summary>
            <value>The <i>current</i> time.</value>
            <remarks>
            <para>
            Gets the <i>current</i> time.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.LocalDateTime">
            <summary>
            Default implementation of <see cref="T:log4net.Appender.RollingFileAppender.IDateTime"/> that returns the current time.
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.LocalDateTime.Now">
            <summary>
            Gets the <b>current</b> time.
            </summary>
            <value>The <b>current</b> time.</value>
            <remarks>
            <para>
            Gets the <b>current</b> time.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.UniversalDateTime">
            <summary>
            Implementation of <see cref="T:log4net.Appender.RollingFileAppender.IDateTime"/> that returns the current time as the coordinated universal time (UTC).
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.UniversalDateTime.Now">
            <summary>
            Gets the <b>current</b> time.
            </summary>
            <value>The <b>current</b> time.</value>
            <remarks>
            <para>
            Gets the <b>current</b> time.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.SmtpAppender">
            <summary>
            Send an e-mail when a specific logging event occurs, typically on errors 
            or fatal errors.
            </summary>
            <remarks>
            <para>
            The number of logging events delivered in this e-mail depend on
            the value of <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize"/> option. The
            <see cref="T:log4net.Appender.SmtpAppender"/> keeps only the last
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize"/> logging events in its 
            cyclic buffer. This keeps memory requirements at a reasonable level while 
            still delivering useful application context.
            </para>
            <note type="caution">
            Authentication and setting the server Port are only available on the MS .NET 1.1 runtime.
            For these features to be enabled you need to ensure that you are using a version of
            the log4net assembly that is built against the MS .NET 1.1 framework and that you are
            running the your application on the MS .NET 1.1 runtime. On all other platforms only sending
            unauthenticated messages to a server listening on port 25 (the default) is supported.
            </note>
            <para>
            Authentication is supported by setting the <see cref="P:log4net.Appender.SmtpAppender.Authentication"/> property to
            either <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic"/> or <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm"/>.
            If using <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic"/> authentication then the <see cref="P:log4net.Appender.SmtpAppender.Username"/>
            and <see cref="P:log4net.Appender.SmtpAppender.Password"/> properties must also be set.
            </para>
            <para>
            To set the SMTP server port use the <see cref="P:log4net.Appender.SmtpAppender.Port"/> property. The default port is 25.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.SmtpAppender.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.To">
            <summary>
            Gets or sets a comma- or semicolon-delimited list of recipient e-mail addresses (use semicolon on .NET 1.1 and comma for later versions).
            </summary>
            <value>
            <para>
            For .NET 1.1 (System.Web.Mail): A semicolon-delimited list of e-mail addresses.
            </para>
            <para>
            For .NET 2.0 (System.Net.Mail): A comma-delimited list of e-mail addresses.
            </para>
            </value>
            <remarks>
            <para>
            For .NET 1.1 (System.Web.Mail): A semicolon-delimited list of e-mail addresses.
            </para>
            <para>
            For .NET 2.0 (System.Net.Mail): A comma-delimited list of e-mail addresses.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Cc">
            <summary>
            Gets or sets a comma- or semicolon-delimited list of recipient e-mail addresses 
            that will be carbon copied (use semicolon on .NET 1.1 and comma for later versions).
            </summary>
            <value>
            <para>
            For .NET 1.1 (System.Web.Mail): A semicolon-delimited list of e-mail addresses.
            </para>
            <para>
            For .NET 2.0 (System.Net.Mail): A comma-delimited list of e-mail addresses.
            </para>
            </value>
            <remarks>
            <para>
            For .NET 1.1 (System.Web.Mail): A semicolon-delimited list of e-mail addresses.
            </para>
            <para>
            For .NET 2.0 (System.Net.Mail): A comma-delimited list of e-mail addresses.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Bcc">
            <summary>
            Gets or sets a semicolon-delimited list of recipient e-mail addresses
            that will be blind carbon copied.
            </summary>
            <value>
            A semicolon-delimited list of e-mail addresses.
            </value>
            <remarks>
            <para>
            A semicolon-delimited list of recipient e-mail addresses.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.From">
            <summary>
            Gets or sets the e-mail address of the sender.
            </summary>
            <value>
            The e-mail address of the sender.
            </value>
            <remarks>
            <para>
            The e-mail address of the sender.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Subject">
            <summary>
            Gets or sets the subject line of the e-mail message.
            </summary>
            <value>
            The subject line of the e-mail message.
            </value>
            <remarks>
            <para>
            The subject line of the e-mail message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.SmtpHost">
            <summary>
            Gets or sets the name of the SMTP relay mail server to use to send 
            the e-mail messages.
            </summary>
            <value>
            The name of the e-mail relay server. If SmtpServer is not set, the 
            name of the local SMTP server is used.
            </value>
            <remarks>
            <para>
            The name of the e-mail relay server. If SmtpServer is not set, the 
            name of the local SMTP server is used.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.LocationInfo">
            <summary>
            Obsolete
            </summary>
            <remarks>
            Use the BufferingAppenderSkeleton Fix methods instead 
            </remarks>
            <remarks>
            <para>
            Obsolete property.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Authentication">
            <summary>
            The mode to use to authentication with the SMTP server
            </summary>
            <remarks>
            <note type="caution">Authentication is only available on the MS .NET 1.1 runtime.</note>
            <para>
            Valid Authentication mode values are: <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.None"/>, 
            <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic"/>, and <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm"/>. 
            The default value is <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.None"/>. When using 
            <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic"/> you must specify the <see cref="P:log4net.Appender.SmtpAppender.Username"/> 
            and <see cref="P:log4net.Appender.SmtpAppender.Password"/> to use to authenticate.
            When using <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm"/> the Windows credentials for the current
            thread, if impersonating, or the process will be used to authenticate. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Username">
            <summary>
            The username to use to authenticate with the SMTP server
            </summary>
            <remarks>
            <note type="caution">Authentication is only available on the MS .NET 1.1 runtime.</note>
            <para>
            A <see cref="P:log4net.Appender.SmtpAppender.Username"/> and <see cref="P:log4net.Appender.SmtpAppender.Password"/> must be specified when 
            <see cref="P:log4net.Appender.SmtpAppender.Authentication"/> is set to <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic"/>, 
            otherwise the username will be ignored. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Password">
            <summary>
            The password to use to authenticate with the SMTP server
            </summary>
            <remarks>
            <note type="caution">Authentication is only available on the MS .NET 1.1 runtime.</note>
            <para>
            A <see cref="P:log4net.Appender.SmtpAppender.Username"/> and <see cref="P:log4net.Appender.SmtpAppender.Password"/> must be specified when 
            <see cref="P:log4net.Appender.SmtpAppender.Authentication"/> is set to <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic"/>, 
            otherwise the password will be ignored. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Port">
            <summary>
            The port on which the SMTP server is listening
            </summary>
            <remarks>
            <note type="caution">Server Port is only available on the MS .NET 1.1 runtime.</note>
            <para>
            The port on which the SMTP server is listening. The default
            port is <c>25</c>. The Port can only be changed when running on
            the MS .NET 1.1 runtime.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Priority">
            <summary>
            Gets or sets the priority of the e-mail message
            </summary>
            <value>
            One of the <see cref="T:System.Net.Mail.MailPriority"/> values.
            </value>
            <remarks>
            <para>
            Sets the priority of the e-mails generated by this
            appender. The default priority is <see cref="F:System.Net.Mail.MailPriority.Normal"/>.
            </para>
            <para>
            If you are using this appender to report errors then
            you may want to set the priority to <see cref="F:System.Net.Mail.MailPriority.High"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.EnableSsl">
            <summary>
            Enable or disable use of SSL when sending e-mail message
            </summary>
            <remarks>
            This is available on MS .NET 2.0 runtime and higher
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.ReplyTo">
            <summary>
            Gets or sets the reply-to e-mail address.
            </summary>
            <remarks>
            This is available on MS .NET 2.0 runtime and higher
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.SubjectEncoding">
            <summary>
            Gets or sets the subject encoding to be used.
            </summary>
            <remarks>
            The default encoding is the operating system's current ANSI codepage.
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.BodyEncoding">
            <summary>
            Gets or sets the body encoding to be used.
            </summary>
            <remarks>
            The default encoding is the operating system's current ANSI codepage.
            </remarks>
        </member>
        <member name="M:log4net.Appender.SmtpAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Sends the contents of the cyclic buffer as an e-mail message.
            </summary>
            <param name="events">The logging events to send.</param>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.SmtpAppender.SendEmail(System.String)">
            <summary>
            Send the email message
            </summary>
            <param name="messageBody">the body text to include in the mail</param>
        </member>
        <member name="T:log4net.Appender.SmtpAppender.SmtpAuthentication">
            <summary>
            Values for the <see cref="P:log4net.Appender.SmtpAppender.Authentication"/> property.
            </summary>
            <remarks>
            <para>
            SMTP authentication modes.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.SmtpAppender.SmtpAuthentication.None">
            <summary>
            No authentication
            </summary>
        </member>
        <member name="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic">
            <summary>
            Basic authentication.
            </summary>
            <remarks>
            Requires a username and password to be supplied
            </remarks>
        </member>
        <member name="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm">
            <summary>
            Integrated authentication
            </summary>
            <remarks>
            Uses the Windows credentials from the current thread or process to authenticate.
            </remarks>
        </member>
        <member name="M:log4net.Appender.SmtpAppender.MaybeTrimSeparators(System.String)">
            <summary>
              trims leading and trailing commas or semicolons
            </summary>
        </member>
        <member name="T:log4net.Appender.SmtpPickupDirAppender">
            <summary>
            Send an email when a specific logging event occurs, typically on errors 
            or fatal errors. Rather than sending via smtp it writes a file into the
            directory specified by <see cref="P:log4net.Appender.SmtpPickupDirAppender.PickupDir"/>. This allows services such
            as the IIS SMTP agent to manage sending the messages.
            </summary>
            <remarks>
            <para>
            The configuration for this appender is identical to that of the <c>SMTPAppender</c>,
            except that instead of specifying the <c>SMTPAppender.SMTPHost</c> you specify
            <see cref="P:log4net.Appender.SmtpPickupDirAppender.PickupDir"/>.
            </para>
            <para>
            The number of logging events delivered in this e-mail depend on
            the value of <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize"/> option. The
            <see cref="T:log4net.Appender.SmtpPickupDirAppender"/> keeps only the last
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize"/> logging events in its 
            cyclic buffer. This keeps memory requirements at a reasonable level while 
            still delivering useful application context.
            </para>
            </remarks>
            <author>Niall Daley</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Appender.SmtpPickupDirAppender.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.To">
            <summary>
            Gets or sets a semicolon-delimited list of recipient e-mail addresses.
            </summary>
            <value>
            A semicolon-delimited list of e-mail addresses.
            </value>
            <remarks>
            <para>
            A semicolon-delimited list of e-mail addresses.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.From">
            <summary>
            Gets or sets the e-mail address of the sender.
            </summary>
            <value>
            The e-mail address of the sender.
            </value>
            <remarks>
            <para>
            The e-mail address of the sender.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.Subject">
            <summary>
            Gets or sets the subject line of the e-mail message.
            </summary>
            <value>
            The subject line of the e-mail message.
            </value>
            <remarks>
            <para>
            The subject line of the e-mail message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.PickupDir">
            <summary>
            Gets or sets the path to write the messages to.
            </summary>
            <remarks>
            <para>
            Gets or sets the path to write the messages to. This should be the same
            as that used by the agent sending the messages.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.FileExtension">
            <summary>
            Gets or sets the file extension for the generated files
            </summary>
            <value>
            The file extension for the generated files
            </value>
            <remarks>
            <para>
            The file extension for the generated files
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext"/> used to write to the pickup directory.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext"/> used to write to the pickup directory.
            </value>
            <remarks>
            <para>
            Unless a <see cref="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext"/> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider"/> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.SmtpPickupDirAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Sends the contents of the cyclic buffer as an e-mail message.
            </summary>
            <param name="events">The logging events to send.</param>
            <remarks>
            <para>
            Sends the contents of the cyclic buffer as an e-mail message.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions">
            <summary>
            Activate the options on this appender. 
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.SmtpPickupDirAppender.ConvertToFullPath(System.String)">
            <summary>
            Convert a path into a fully qualified path.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>The fully qualified path.</returns>
            <remarks>
            <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.SmtpPickupDirAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="T:log4net.Appender.TelnetAppender">
            <summary>
            Appender that allows clients to connect via Telnet to receive log messages
            </summary>
            <remarks>	
            <para>
            The TelnetAppender accepts socket connections and streams logging messages
            back to the client.  
            The output is provided in a telnet-friendly way so that a log can be monitored 
            over a TCP/IP socket.
            This allows simple remote monitoring of application logging.
            </para>
            <para>
            The default <see cref="P:log4net.Appender.TelnetAppender.Port"/> is 23 (the telnet port).
            </para>
            </remarks>
            <author>Keith Long</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TelnetAppender.declaringType">
            <summary>
            The fully qualified type of the TelnetAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="P:log4net.Appender.TelnetAppender.Port">
            <summary>
            Gets or sets the TCP port number on which this <see cref="T:log4net.Appender.TelnetAppender"/> will listen for connections.
            </summary>
            <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number on which this <see cref="T:log4net.Appender.TelnetAppender"/> will listen for connections.
            </value>
            <remarks>
            <para>
            The default value is 23 (the telnet port).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> 
            or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.OnClose">
            <summary>
            Overrides the parent method to close the socket handler
            </summary>
            <remarks>
            <para>
            Closes all the outstanding connections.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TelnetAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set.
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Appender.TelnetAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.TelnetAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.TelnetAppender.ActivateOptions"/> must be called again.
            </para>
            <para>
            Create the socket handler and wait for connections
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Writes the logging event to each connected client.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes the logging event to each connected client.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.TelnetAppender.SocketHandler">
            <summary>
            Helper class to manage connected clients
            </summary>
            <remarks>
            <para>
            The SocketHandler class is used to accept connections from
            clients.  It is threaded so that clients can connect/disconnect
            asynchronously.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.TelnetAppender.SocketHandler.SocketClient">
            <summary>
            Class that represents a client connected to this handler
            </summary>
            <remarks>
            <para>
            Class that represents a client connected to this handler
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.SocketClient.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Create this <see cref="T:log4net.Appender.TelnetAppender.SocketHandler.SocketClient"/> for the specified <see cref="T:System.Net.Sockets.Socket"/>
            </summary>
            <param name="socket">the client's socket</param>
            <remarks>
            <para>
            Opens a stream writer on the socket.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.SocketClient.Send(System.String)">
            <summary>
            Write a string to the client
            </summary>
            <param name="message">string to send</param>
            <remarks>
            <para>
            Write a string to the client
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.SocketClient.Dispose">
            <summary>
            Cleanup the clients connection
            </summary>
            <remarks>
            <para>
            Close the socket connection.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.#ctor(System.Int32)">
            <summary>
            Opens a new server port on <paramref ref="port"/>
            </summary>
            <param name="port">the local port to listen on for connections</param>
            <remarks>
            <para>
            Creates a socket handler on the specified local server port.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.Send(System.String)">
            <summary>
            Sends a string message to each of the connected clients
            </summary>
            <param name="message">the text to send</param>
            <remarks>
            <para>
            Sends a string message to each of the connected clients
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.AddClient(log4net.Appender.TelnetAppender.SocketHandler.SocketClient)">
            <summary>
            Add a client to the internal clients list
            </summary>
            <param name="client">client to add</param>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.RemoveClient(log4net.Appender.TelnetAppender.SocketHandler.SocketClient)">
            <summary>
            Remove a client from the internal clients list
            </summary>
            <param name="client">client to remove</param>
        </member>
        <member name="P:log4net.Appender.TelnetAppender.SocketHandler.HasConnections">
            <summary>
            Test if this handler has active connections
            </summary>
            <value>
            <c>true</c> if this handler has active connections
            </value>
            <remarks>
            <para>
            This property will be <c>true</c> while this handler has
            active connections, that is at least one connection that 
            the handler will attempt to send a message to.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.OnConnect(System.IAsyncResult)">
            <summary>
            Callback used to accept a connection on the server socket
            </summary>
            <param name="asyncResult">The result of the asynchronous operation</param>
            <remarks>
            <para>
            On connection adds to the list of connections 
            if there are two many open connections you will be disconnected
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.Dispose">
            <summary>
            Close all network connections
            </summary>
            <remarks>
            <para>
            Make sure we close all network connections
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.TextWriterAppender">
            <summary>
            Sends logging events to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <remarks>
            <para>
            An Appender that writes to a <see cref="T:System.IO.TextWriter"/>.
            </para>
            <para>
            This appender may be used stand alone if initialized with an appropriate
            writer, however it is typically used as a base class for an appender that
            can open a <see cref="T:System.IO.TextWriter"/> to write to.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Douglas de la Torre</author>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TextWriterAppender" /> class.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.#ctor(log4net.Layout.ILayout,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TextWriterAppender" /> class and
            sets the output destination to a new <see cref="T:System.IO.StreamWriter"/> initialized 
            with the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="layout">The layout to use with this appender.</param>
            <param name="os">The <see cref="T:System.IO.Stream"/> to output to.</param>
            <remarks>
            <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.#ctor(log4net.Layout.ILayout,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TextWriterAppender" /> class and sets
            the output destination to the specified <see cref="T:System.IO.StreamWriter" />.
            </summary>
            <param name="layout">The layout to use with this appender</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter" /> to output to</param>
            <remarks>
            The <see cref="T:System.IO.TextWriter" /> must have been previously opened.
            </remarks>
            <remarks>
            <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.ImmediateFlush">
            <summary>
            Gets or set whether the appender will flush at the end 
            of each append operation.
            </summary>
            <value>
            <para>
            The default behavior is to flush at the end of each 
            append operation.
            </para>
            <para>
            If this option is set to <c>false</c>, then the underlying 
            stream can defer persisting the logging event to a later 
            time.
            </para>
            </value>
            <remarks>
            Avoiding the flush operation at the end of each append results in
            a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </remarks>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.Writer">
            <summary>
            Sets the <see cref="T:System.IO.TextWriter"/> where the log output will go.
            </summary>
            <remarks>
            <para>
            The specified <see cref="T:System.IO.TextWriter"/> must be open and writable.
            </para>
            <para>
            The <see cref="T:System.IO.TextWriter"/> will be closed when the appender 
            instance is closed.
            </para>
            <para>
            <b>Note:</b> Logging to an unopened <see cref="T:System.IO.TextWriter"/> will fail.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.PreAppendCheck">
            <summary>
            This method determines if there is a sense in attempting to append.
            </summary>
            <remarks>
            <para>
            This method checks if an output target has been set and if a
            layout has been set. 
            </para>
            </remarks>
            <returns><c>false</c> if any of the preconditions fail.</returns>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)"/>
            method. 
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes a log statement to the output stream if the output stream exists 
            and is writable.  
            </para>
            <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent[])"/>
            method. 
            </summary>
            <param name="loggingEvents">The array of events to log.</param>
            <remarks>
            <para>
            This method writes all the bulk logged events to the output writer
            before flushing the stream.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.OnClose">
            <summary>
            Close this appender instance. The underlying stream or writer is also closed.
            </summary>
            <remarks>
            Closed appenders cannot be reused.
            </remarks>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.ErrorHandler">
            <summary>
            Gets or set the <see cref="T:log4net.Core.IErrorHandler"/> and the underlying 
            <see cref="T:log4net.Util.QuietTextWriter"/>, if any, for this appender. 
            </summary>
            <value>
            The <see cref="T:log4net.Core.IErrorHandler"/> for this appender.
            </value>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.WriteFooterAndCloseWriter">
            <summary>
            Writes the footer and closes the underlying <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <remarks>
            <para>
            Writes the footer and closes the underlying <see cref="T:System.IO.TextWriter"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.CloseWriter">
            <summary>
            Closes the underlying <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <remarks>
            <para>
            Closes the underlying <see cref="T:System.IO.TextWriter"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Reset">
            <summary>
            Clears internal references to the underlying <see cref="T:System.IO.TextWriter" /> 
            and other variables.
            </summary>
            <remarks>
            <para>
            Subclasses can override this method for an alternate closing behavior.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.WriteFooter">
            <summary>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer"/> property.
            </summary>
            <remarks>
            <para>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.WriteHeader">
            <summary>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header"/> property.
            </summary>
            <remarks>
            <para>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.PrepareWriter">
            <summary>
            Called to allow a subclass to lazily initialize the writer
            </summary>
            <remarks>
            <para>
            This method is called when an event is logged and the <see cref="P:log4net.Appender.TextWriterAppender.Writer"/> or
            <see cref="P:log4net.Appender.TextWriterAppender.QuietWriter"/> have not been set. This allows a subclass to
            attempt to initialize the writer multiple times.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.QuietWriter">
            <summary>
            Gets or sets the <see cref="T:log4net.Util.QuietTextWriter"/> where logging events
            will be written to. 
            </summary>
            <value>
            The <see cref="T:log4net.Util.QuietTextWriter"/> where logging events are written.
            </value>
            <remarks>
            <para>
            This is the <see cref="T:log4net.Util.QuietTextWriter"/> where logging events
            will be written to. 
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TextWriterAppender.m_qtw">
            <summary>
            This is the <see cref="T:log4net.Util.QuietTextWriter"/> where logging events
            will be written to. 
            </summary>
        </member>
        <member name="F:log4net.Appender.TextWriterAppender.m_immediateFlush">
            <summary>
            Immediate flush means that the underlying <see cref="T:System.IO.TextWriter" /> 
            or output stream will be flushed at the end of each append operation.
            </summary>
            <remarks>
            <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.TextWriterAppender.ImmediateFlush"/> is set to
            <c>false</c>, then there is a good chance that the last few
            logging events are not actually persisted if and when the application 
            crashes.
            </para>
            <para>
            The default value is <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TextWriterAppender.declaringType">
            <summary>
            The fully qualified type of the TextWriterAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <param name="millisecondsTimeout">The maximum time to wait for logging events to be flushed.</param>
            <returns><c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="T:log4net.Appender.TraceAppender">
            <summary>
            Appends log events to the <see cref="T:System.Diagnostics.Trace"/> system.
            </summary>
            <remarks>
            <para>
            The application configuration file can be used to control what listeners 
            are actually used. See the MSDN documentation for the 
            <see cref="T:System.Diagnostics.Trace"/> class for details on configuring the
            trace system.
            </para>
            <para>
            Events are written using the <c>System.Diagnostics.Trace.Write(string,string)</c>
            method. The event's logger name is the default value for the category parameter 
            of the Write method. 
            </para>
            <para>
            <b>Compact Framework</b><br />
            The Compact Framework does not support the <see cref="T:System.Diagnostics.Trace"/>
            class for any operation except <c>Assert</c>. When using the Compact Framework this
            appender will write to the <see cref="T:System.Diagnostics.Debug"/> system rather than
            the Trace system. This appender will therefore behave like the <see cref="T:log4net.Appender.DebugAppender"/>.
            </para>
            </remarks>
            <author>Douglas de la Torre</author>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Ron Grabowski</author>
        </member>
        <member name="M:log4net.Appender.TraceAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TraceAppender" />.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TraceAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TraceAppender" /> 
            with a specified layout.
            </summary>
            <param name="layout">The layout to use with this appender.</param>
            <remarks>
            <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TraceAppender.ImmediateFlush">
            <summary>
            Gets or sets a value that indicates whether the appender will 
            flush at the end of each write.
            </summary>
            <remarks>
            <para>The default behavior is to flush at the end of each 
            write. If the option is set to<c>false</c>, then the underlying 
            stream can defer writing to physical medium to a later time. 
            </para>
            <para>
            Avoiding the flush operation at the end of each append results 
            in a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TraceAppender.Category">
            <summary>
            The category parameter sent to the Trace method.
            </summary>
            <remarks>
            <para>
            Defaults to %logger which will use the logger name of the current 
            <see cref="T:log4net.Core.LoggingEvent"/> as the category parameter.
            </para>
            <para>
            </para> 
            </remarks>
        </member>
        <member name="M:log4net.Appender.TraceAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Writes the logging event to the <see cref="T:System.Diagnostics.Trace"/> system.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes the logging event to the <see cref="T:System.Diagnostics.Trace"/> system.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TraceAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TraceAppender.m_immediateFlush">
            <summary>
            Immediate flush means that the underlying writer or output stream
            will be flushed at the end of each append operation.
            </summary>
            <remarks>
            <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.TraceAppender.ImmediateFlush"/> is set to
            <c>false</c>, then there is a good chance that the last few
            logs events are not actually written to persistent media if and
            when the application crashes.
            </para>
            <para>
            The default value is <c>true</c>.</para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TraceAppender.m_category">
            <summary>
            Defaults to %logger
            </summary>
        </member>
        <member name="M:log4net.Appender.TraceAppender.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <param name="millisecondsTimeout">The maximum time to wait for logging events to be flushed.</param>
            <returns><c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="T:log4net.Appender.UdpAppender">
             <summary>
             Sends logging events as connectionless UDP datagrams to a remote host or a 
             multicast group using an <see cref="T:System.Net.Sockets.UdpClient" />.
             </summary>
             <remarks>
             <para>
             UDP guarantees neither that messages arrive, nor that they arrive in the correct order.
             </para>
             <para>
             To view the logging results, a custom application can be developed that listens for logging 
             events.
             </para>
             <para>
             When decoding events send via this appender remember to use the same encoding
             to decode the events as was used to send the events. See the <see cref="P:log4net.Appender.UdpAppender.Encoding"/>
             property to specify the encoding to use.
             </para>
             </remarks>
             <example>
             This example shows how to log receive logging events that are sent 
             on IP address 244.0.0.1 and port 8080 to the console. The event is 
             encoded in the packet as a unicode string and it is decoded as such. 
             <code lang="C#">
             IPEndPoint remoteEndPoint = new IPEndPoint(IPAddress.Any, 0);
             UdpClient udpClient;
             byte[] buffer;
             string loggingEvent;
             
             try 
             {
                 udpClient = new UdpClient(8080);
                 
                 while(true) 
                 {
                     buffer = udpClient.Receive(ref remoteEndPoint);
                     loggingEvent = System.Text.Encoding.Unicode.GetString(buffer);
                     Console.WriteLine(loggingEvent);
                 }
             } 
             catch(Exception e) 
             {
                 Console.WriteLine(e.ToString());
             }
             </code>
             <code lang="Visual Basic">
             Dim remoteEndPoint as IPEndPoint
             Dim udpClient as UdpClient
             Dim buffer as Byte()
             Dim loggingEvent as String
             
             Try 
                 remoteEndPoint = new IPEndPoint(IPAddress.Any, 0)
                 udpClient = new UdpClient(8080)
            
                 While True
                     buffer = udpClient.Receive(ByRef remoteEndPoint)
                     loggingEvent = System.Text.Encoding.Unicode.GetString(buffer)
                     Console.WriteLine(loggingEvent)
                 Wend
             Catch e As Exception
                 Console.WriteLine(e.ToString())
             End Try
             </code>
             <para>
             An example configuration section to log information using this appender to the 
             IP 224.0.0.1 on port 8080:
             </para>
             <code lang="XML" escaped="true">
             <appender name="UdpAppender" type="log4net.Appender.UdpAppender">
                 <remoteAddress value="224.0.0.1" />
                 <remotePort value="8080" />
                 <layout type="log4net.Layout.PatternLayout" value="%-5level %logger [%ndc] - %message%newline" />
             </appender>
             </code>
             </example>
             <author>Gert Driesen</author>
             <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Appender.UdpAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.UdpAppender" /> class.
            </summary>
            <remarks>
            The default constructor initializes all fields to their default values.
            </remarks>
        </member>
        <member name="P:log4net.Appender.UdpAppender.RemoteAddress">
            <summary>
            Gets or sets the IP address of the remote host or multicast group to which
            the underlying <see cref="T:System.Net.Sockets.UdpClient" /> should sent the logging event.
            </summary>
            <value>
            The IP address of the remote host or multicast group to which the logging event 
            will be sent.
            </value>
            <remarks>
            <para>
            Multicast addresses are identified by IP class <b>D</b> addresses (in the range 224.0.0.0 to
            239.255.255.255).  Multicast packets can pass across different networks through routers, so
            it is possible to use multicasts in an Internet scenario as long as your network provider 
            supports multicasting.
            </para>
            <para>
            Hosts that want to receive particular multicast messages must register their interest by joining
            the multicast group.  Multicast messages are not sent to networks where no host has joined
            the multicast group.  Class <b>D</b> IP addresses are used for multicast groups, to differentiate
            them from normal host addresses, allowing nodes to easily detect if a message is of interest.
            </para>
            <para>
            Static multicast addresses that are needed globally are assigned by IANA.  A few examples are listed in the table below:
            </para>
            <para>
            <list type="table">
                <listheader>
                    <term>IP Address</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>224.0.0.1</term>
                    <description>
                        <para>
                        Sends a message to all system on the subnet.
                        </para>
                    </description>
                </item>
                <item>
                    <term>224.0.0.2</term>
                    <description>
                        <para>
                        Sends a message to all routers on the subnet.
                        </para>
                    </description>
                </item>
                <item>
                    <term>224.0.0.12</term>
                    <description>
                        <para>
                        The DHCP server answers messages on the IP address 224.0.0.12, but only on a subnet.
                        </para>
                    </description>
                </item>
            </list>
            </para>
            <para>
            A complete list of actually reserved multicast addresses and their owners in the ranges
            defined by RFC 3171 can be found at the <A href="http://www.iana.org/assignments/multicast-addresses">IANA web site</A>. 
            </para>
            <para>
            The address range 239.0.0.0 to 239.255.255.255 is reserved for administrative scope-relative 
            addresses.  These addresses can be reused with other local groups.  Routers are typically 
            configured with filters to prevent multicast traffic in this range from flowing outside
            of the local network.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.UdpAppender.RemotePort">
            <summary>
            Gets or sets the TCP port number of the remote host or multicast group to which 
            the underlying <see cref="T:System.Net.Sockets.UdpClient" /> should sent the logging event.
            </summary>
            <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number of the remote host or multicast group to which the logging event 
            will be sent.
            </value>
            <remarks>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> will send messages to this TCP port number
            on the remote host or multicast group.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="P:log4net.Appender.UdpAppender.LocalPort">
            <summary>
            Gets or sets the TCP port number from which the underlying <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </summary>
            <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number from which the underlying <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </value>
            <remarks>
            <para>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> will bind to this port for sending messages.
            </para>
            <para>
            Setting the value to 0 (the default) will cause the udp client not to bind to
            a local port.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="P:log4net.Appender.UdpAppender.Encoding">
            <summary>
            Gets or sets <see cref="P:log4net.Appender.UdpAppender.Encoding"/> used to write the packets.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.UdpAppender.Encoding"/> used to write the packets.
            </value>
            <remarks>
            <para>
            The <see cref="P:log4net.Appender.UdpAppender.Encoding"/> used to write the packets.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.UdpAppender.Client">
            <summary>
            Gets or sets the underlying <see cref="T:System.Net.Sockets.UdpClient" />.
            </summary>
            <value>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" />.
            </value>
            <remarks>
            <see cref="T:log4net.Appender.UdpAppender" /> creates a <see cref="T:System.Net.Sockets.UdpClient" /> to send logging events 
            over a network.  Classes deriving from <see cref="T:log4net.Appender.UdpAppender" /> can use this
            property to get or set this <see cref="T:System.Net.Sockets.UdpClient" />.  Use the underlying <see cref="T:System.Net.Sockets.UdpClient" />
            returned from <see cref="P:log4net.Appender.UdpAppender.Client" /> if you require access beyond that which 
            <see cref="T:log4net.Appender.UdpAppender" /> provides.
            </remarks>
        </member>
        <member name="P:log4net.Appender.UdpAppender.RemoteEndPoint">
            <summary>
            Gets or sets the cached remote endpoint to which the logging events should be sent.
            </summary>
            <value>
            The cached remote endpoint to which the logging events will be sent.
            </value>
            <remarks>
            The <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> method will initialize the remote endpoint 
            with the values of the <see cref="P:log4net.Appender.UdpAppender.RemoteAddress" /> and <see cref="P:log4net.Appender.UdpAppender.RemotePort"/>
            properties.
            </remarks>
        </member>
        <member name="M:log4net.Appender.UdpAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set.
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Appender.UdpAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.UdpAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.UdpAppender.ActivateOptions"/> must be called again.
            </para>
            <para>
            The appender will be ignored if no <see cref="P:log4net.Appender.UdpAppender.RemoteAddress" /> was specified or 
            an invalid remote or local TCP port number was specified.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The required property <see cref="P:log4net.Appender.UdpAppender.RemoteAddress" /> was not specified.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The TCP port number assigned to <see cref="P:log4net.Appender.UdpAppender.LocalPort" /> or <see cref="P:log4net.Appender.UdpAppender.RemotePort" /> is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="M:log4net.Appender.UdpAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)"/> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Sends the event using an UDP datagram.
            </para>
            <para>
            Exceptions are passed to the <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.UdpAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.UdpAppender.OnClose">
            <summary>
            Closes the UDP connection and releases all resources associated with 
            this <see cref="T:log4net.Appender.UdpAppender" /> instance.
            </summary>
            <remarks>
            <para>
            Disables the underlying <see cref="T:System.Net.Sockets.UdpClient" /> and releases all managed 
            and unmanaged resources associated with the <see cref="T:log4net.Appender.UdpAppender" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.UdpAppender.InitializeClientConnection">
            <summary>
            Initializes the underlying  <see cref="T:System.Net.Sockets.UdpClient" /> connection.
            </summary>
            <remarks>
            <para>
            The underlying <see cref="T:System.Net.Sockets.UdpClient"/> is initialized and binds to the 
            port number from which you intend to communicate.
            </para>
            <para>
            Exceptions are passed to the <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler"/>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.UdpAppender.m_remoteAddress">
            <summary>
            The IP address of the remote host or multicast group to which 
            the logging event will be sent.
            </summary>
        </member>
        <member name="F:log4net.Appender.UdpAppender.m_remotePort">
            <summary>
            The TCP port number of the remote host or multicast group to 
            which the logging event will be sent.
            </summary>
        </member>
        <member name="F:log4net.Appender.UdpAppender.m_remoteEndPoint">
            <summary>
            The cached remote endpoint to which the logging events will be sent.
            </summary>
        </member>
        <member name="F:log4net.Appender.UdpAppender.m_localPort">
            <summary>
            The TCP port number from which the <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </summary>
        </member>
        <member name="F:log4net.Appender.UdpAppender.m_client">
            <summary>
            The <see cref="T:System.Net.Sockets.UdpClient" /> instance that will be used for sending the 
            logging events.
            </summary>
        </member>
        <member name="F:log4net.Appender.UdpAppender.m_encoding">
            <summary>
            The encoding to use for the packet.
            </summary>
        </member>
        <member name="T:log4net.Config.AliasDomainAttribute">
            <summary>
            Assembly level attribute that specifies a domain to alias to this assembly's repository.
            </summary>
            <remarks>
            <para>
            <b>AliasDomainAttribute is obsolete. Use AliasRepositoryAttribute instead of AliasDomainAttribute.</b>
            </para>
            <para>
            An assembly's logger repository is defined by its <see cref="T:log4net.Config.DomainAttribute"/>,
            however this can be overridden by an assembly loaded before the target assembly.
            </para>
            <para>
            An assembly can alias another assembly's domain to its repository by
            specifying this attribute with the name of the target domain.
            </para>
            <para>
            This attribute can only be specified on the assembly and may be used
            as many times as necessary to alias all the required domains.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.AliasDomainAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.AliasDomainAttribute" /> class with 
            the specified domain to alias to this assembly's repository.
            </summary>
            <param name="name">The domain to alias to this assemby's repository.</param>
            <remarks>
            <para>
            Obsolete. Use <see cref="T:log4net.Config.AliasRepositoryAttribute"/> instead of <see cref="T:log4net.Config.AliasDomainAttribute"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.AliasRepositoryAttribute">
            <summary>
            Assembly level attribute that specifies a repository to alias to this assembly's repository.
            </summary>
            <remarks>
            <para>
            An assembly's logger repository is defined by its <see cref="T:log4net.Config.RepositoryAttribute"/>,
            however this can be overridden by an assembly loaded before the target assembly.
            </para>
            <para>
            An assembly can alias another assembly's repository to its repository by
            specifying this attribute with the name of the target repository.
            </para>
            <para>
            This attribute can only be specified on the assembly and may be used
            as many times as necessary to alias all the required repositories.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.AliasRepositoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.AliasRepositoryAttribute" /> class with 
            the specified repository to alias to this assembly's repository.
            </summary>
            <param name="name">The repository to alias to this assemby's repository.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Config.AliasRepositoryAttribute" /> class with 
            the specified repository to alias to this assembly's repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.AliasRepositoryAttribute.Name">
            <summary>
            Gets or sets the repository to alias to this assemby's repository.
            </summary>
            <value>
            The repository to alias to this assemby's repository.
            </value>
            <remarks>
            <para>
            The name of the repository to alias to this assemby's repository.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.BasicConfigurator">
            <summary>
            Use this class to quickly configure a <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/>.
            </summary>
            <remarks>
            <para>
            Allows very simple programmatic configuration of log4net.
            </para>
            <para>
            Only one appender can be configured using this configurator.
            The appender is set at the root of the hierarchy and all logging
            events will be delivered to that appender.
            </para>
            <para>
            Appenders can also implement the <see cref="T:log4net.Core.IOptionHandler"/> interface. Therefore
            they would require that the <see cref="M:log4net.Core.IOptionHandler.ActivateOptions()"/> method
            be called after the appenders properties have been configured.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Config.BasicConfigurator.declaringType">
            <summary>
            The fully qualified type of the BasicConfigurator class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.BasicConfigurator" /> class. 
            </summary>
            <remarks>
            <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure">
            <summary>
            Initializes the log4net system with a default configuration.
            </summary>
            <remarks>
            <para>
            Initializes the log4net logging system using a <see cref="T:log4net.Appender.ConsoleAppender"/>
            that will write to <c>Console.Out</c>. The log messages are
            formatted using the <see cref="T:log4net.Layout.PatternLayout"/> layout object
            with the <see cref="F:log4net.Layout.PatternLayout.DetailConversionPattern"/>
            layout style.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Appender.IAppender[])">
            <summary>
            Initializes the log4net system using the specified appenders.
            </summary>
            <param name="appenders">The appenders to use to log all logging events.</param>
            <remarks>
            <para>
            Initializes the log4net system using the specified appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Appender.IAppender)">
            <summary>
            Initializes the log4net system using the specified appender.
            </summary>
            <param name="appender">The appender to use to log all logging events.</param>
            <remarks>
            <para>
            Initializes the log4net system using the specified appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Repository.ILoggerRepository)">
            <summary>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository"/> with a default configuration.
            </summary>
            <param name="repository">The repository to configure.</param>
            <remarks>
            <para>
            Initializes the specified repository using a <see cref="T:log4net.Appender.ConsoleAppender"/>
            that will write to <c>Console.Out</c>. The log messages are
            formatted using the <see cref="T:log4net.Layout.PatternLayout"/> layout object
            with the <see cref="F:log4net.Layout.PatternLayout.DetailConversionPattern"/>
            layout style.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Repository.ILoggerRepository,log4net.Appender.IAppender)">
            <summary>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository"/> using the specified appender.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="appender">The appender to use to log all logging events.</param>
            <remarks>
            <para>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository"/> using the specified appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Repository.ILoggerRepository,log4net.Appender.IAppender[])">
            <summary>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository"/> using the specified appenders.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="appenders">The appenders to use to log all logging events.</param>
            <remarks>
            <para>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository"/> using the specified appender.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.ConfiguratorAttribute">
            <summary>
            Base class for all log4net configuration attributes.
            </summary>
            <remarks>
            This is an abstract class that must be extended by 
            specific configurators. This attribute allows the
            configurator to be parameterized by an assembly level
            attribute.
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.ConfiguratorAttribute.#ctor(System.Int32)">
            <summary>
            Constructor used by subclasses.
            </summary>
            <param name="priority">the ordering priority for this configurator</param>
            <remarks>
            <para>
            The <paramref name="priority"/> is used to order the configurator
            attributes before they are invoked. Higher priority configurators are executed
            before lower priority ones.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.ConfiguratorAttribute.Configure(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified assembly.
            </summary>
            <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
            <param name="targetRepository">The repository to configure.</param>
            <remarks>
            <para>
            Abstract method implemented by a subclass. When this method is called
            the subclass should configure the <paramref name="targetRepository"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.ConfiguratorAttribute.CompareTo(System.Object)">
            <summary>
            Compare this instance to another ConfiguratorAttribute
            </summary>
            <param name="obj">the object to compare to</param>
            <returns>see <see cref="M:System.IComparable.CompareTo(System.Object)"/></returns>
            <remarks>
            <para>
            Compares the priorities of the two <see cref="T:log4net.Config.ConfiguratorAttribute"/> instances.
            Sorts by priority in descending order. Objects with the same priority are
            randomly ordered.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.DomainAttribute">
            <summary>
            Assembly level attribute that specifies the logging domain for the assembly.
            </summary>
            <remarks>
            <para>
            <b>DomainAttribute is obsolete. Use RepositoryAttribute instead of DomainAttribute.</b>
            </para>
            <para>
            Assemblies are mapped to logging domains. Each domain has its own
            logging repository. This attribute specified on the assembly controls
            the configuration of the domain. The <see cref="P:log4net.Config.RepositoryAttribute.Name"/> property specifies the name
            of the domain that this assembly is a part of. The <see cref="P:log4net.Config.RepositoryAttribute.RepositoryType"/>
            specifies the type of the repository objects to create for the domain. If 
            this attribute is not specified and a <see cref="P:log4net.Config.RepositoryAttribute.Name"/> is not specified
            then the assembly will be part of the default shared logging domain.
            </para>
            <para>
            This attribute can only be specified on the assembly and may only be used
            once per assembly.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.DomainAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.DomainAttribute" /> class.
            </summary>
            <remarks>
            <para>
            Obsolete. Use RepositoryAttribute instead of DomainAttribute.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.DomainAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:log4net.Config.DomainAttribute" /> class 
            with the name of the domain.
            </summary>
            <param name="name">The name of the domain.</param>
            <remarks>
            <para>
            Obsolete. Use RepositoryAttribute instead of DomainAttribute.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.DOMConfigurator">
            <summary>
            Use this class to initialize the log4net environment using an Xml tree.
            </summary>
            <remarks>
            <para>
            <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
            </para>
            <para>
            Configures a <see cref="T:log4net.Repository.ILoggerRepository"/> using an Xml tree.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure">
            <summary>
            Automatically configures the log4net system based on the 
            application's configuration settings.
            </summary>
            <remarks>
            <para>
            <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
            </para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository)">
            <summary>
            Automatically configures the <see cref="T:log4net.Repository.ILoggerRepository"/> using settings
            stored in the application's configuration file.
            </summary>
            <remarks>
            <para>
            <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
            </para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </remarks>
            <param name="repository">The repository to configure.</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            Configures log4net using a <c>log4net</c> element
            </summary>
            <remarks>
            <para>
            <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
            </para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element"/>.
            </remarks>
            <param name="element">The element to parse.</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository,System.Xml.XmlElement)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository"/> using the specified XML 
            element.
            </summary>
            <remarks>
            <para>
            <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
            </para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element"/>.
            </remarks>
            <param name="repository">The repository to configure.</param>
            <param name="element">The element to parse.</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(System.IO.FileInfo)">
            <summary>
            Configures log4net using the specified configuration file.
            </summary>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
            <para>
            <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
            </para>
            <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
            <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
            <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
            <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            DOMConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
            <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
            <code lang="XML" escaped="true">
            <configuration>
            	<appSettings>
            		<add key="log4net-config-file" value="log.config"/>
            	</appSettings>
            </configuration>
            </code>
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(System.IO.Stream)">
            <summary>
            Configures log4net using the specified configuration file.
            </summary>
            <param name="configStream">A stream to load the XML configuration from.</param>
            <remarks>
            <para>
            <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
            </para>
            <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
            <para>
            Note that this method will NOT close the stream parameter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository"/> using the specified configuration 
            file.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
            <para>
            <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
            </para>
            <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
            <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
            <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
            <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            DOMConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
            <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
            <code lang="XML" escaped="true">
            <configuration>
            	<appSettings>
            		<add key="log4net-config-file" value="log.config"/>
            	</appSettings>
            </configuration>
            </code>
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.Stream)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository"/> using the specified configuration 
            file.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configStream">The stream to load the XML configuration from.</param>
            <remarks>
            <para>
            <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
            </para>
            <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
            <para>
            Note that this method will NOT close the stream parameter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(System.IO.FileInfo)">
            <summary>
            Configures log4net using the file specified, monitors the file for changes 
            and reloads the configuration if a change is detected.
            </summary>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
            <para>
            <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
            </para>
            <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
            <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher"/>
            and depends on the behavior of that class.
            </para>
            <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:Configure(FileInfo)"/>.
            </para>
            </remarks>
            <seealso cref="M:Configure(FileInfo)"/>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository"/> using the file specified, 
            monitors the file for changes and reloads the configuration if a change 
            is detected.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
            <para>
            <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
            </para>
            <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
            <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher"/>
            and depends on the behavior of that class.
            </para>
            <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:Configure(FileInfo)"/>.
            </para>
            </remarks>
            <seealso cref="M:Configure(FileInfo)"/>
        </member>
        <member name="T:log4net.Config.DOMConfiguratorAttribute">
            <summary>
            Assembly level attribute to configure the <see cref="T:log4net.Config.XmlConfigurator"/>.
            </summary>
            <remarks>
            <para>
            <b>AliasDomainAttribute is obsolete. Use AliasRepositoryAttribute instead of AliasDomainAttribute.</b>
            </para>
            <para>
            This attribute may only be used at the assembly scope and can only
            be used once per assembly.
            </para>
            <para>
            Use this attribute to configure the <see cref="T:log4net.Config.XmlConfigurator"/>
            without calling one of the <see cref="M:XmlConfigurator.Configure()"/>
            methods.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="T:log4net.Config.Log4NetConfigurationSectionHandler">
            <summary>
            Class to register for the log4net section of the configuration file
            </summary>
            <remarks>
            The log4net section of the configuration file needs to have a section
            handler registered. This is the section handler used. It simply returns
            the XML element that is the root of the section.
            </remarks>
            <example>
            Example of registering the log4net section handler :
            <code lang="XML" escaped="true">
            <configuration>
            	<configSections>
            		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
            	</configSections>
            	<log4net>
            		log4net configuration XML goes here
            	</log4net>
            </configuration>
            </code>
            </example>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.Log4NetConfigurationSectionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler"/> class.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.Log4NetConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Parses the configuration section.
            </summary>
            <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
            <param name="configContext">The configuration context when called from the ASP.NET configuration system. Otherwise, this parameter is reserved and is a null reference.</param>
            <param name="section">The <see cref="T:System.Xml.XmlNode" /> for the log4net section.</param>
            <returns>The <see cref="T:System.Xml.XmlNode" /> for the log4net section.</returns>
            <remarks>
            <para>
            Returns the <see cref="T:System.Xml.XmlNode"/> containing the configuration data,
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.PluginAttribute">
            <summary>
            Assembly level attribute that specifies a plugin to attach to 
            the repository.
            </summary>
            <remarks>
            <para>
            Specifies the type of a plugin to create and attach to the
            assembly's repository. The plugin type must implement the
            <see cref="T:log4net.Plugin.IPlugin"/> interface.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.PluginAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.PluginAttribute" /> class
            with the specified type.
            </summary>
            <param name="typeName">The type name of plugin to create.</param>
            <remarks>
            <para>
            Create the attribute with the plugin type specified.
            </para>
            <para>
            Where possible use the constructor that takes a <see cref="T:System.Type"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.PluginAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.PluginAttribute" /> class
            with the specified type.
            </summary>
            <param name="type">The type of plugin to create.</param>
            <remarks>
            <para>
            Create the attribute with the plugin type specified.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.PluginAttribute.Type">
            <summary>
            Gets or sets the type for the plugin.
            </summary>
            <value>
            The type for the plugin.
            </value>
            <remarks>
            <para>
            The type for the plugin.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.PluginAttribute.TypeName">
            <summary>
            Gets or sets the type name for the plugin.
            </summary>
            <value>
            The type name for the plugin.
            </value>
            <remarks>
            <para>
            The type name for the plugin.
            </para>
            <para>
            Where possible use the <see cref="P:log4net.Config.PluginAttribute.Type"/> property instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.PluginAttribute.CreatePlugin">
            <summary>
            Creates the plugin object defined by this attribute.
            </summary>
            <remarks>
            <para>
            Creates the instance of the <see cref="T:log4net.Plugin.IPlugin"/> object as 
            specified by this attribute.
            </para>
            </remarks>
            <returns>The plugin object.</returns>
        </member>
        <member name="M:log4net.Config.PluginAttribute.ToString">
            <summary>
            Returns a representation of the properties of this object.
            </summary>
            <remarks>
            <para>
            Overrides base class <see cref="M:Object.ToString()" /> method to 
            return a representation of the properties of this object.
            </para>
            </remarks>
            <returns>A representation of the properties of this object</returns>
        </member>
        <member name="T:log4net.Config.RepositoryAttribute">
            <summary>
            Assembly level attribute that specifies the logging repository for the assembly.
            </summary>
            <remarks>
            <para>
            Assemblies are mapped to logging repository. This attribute specified 
            on the assembly controls
            the configuration of the repository. The <see cref="P:log4net.Config.RepositoryAttribute.Name"/> property specifies the name
            of the repository that this assembly is a part of. The <see cref="P:log4net.Config.RepositoryAttribute.RepositoryType"/>
            specifies the type of the <see cref="T:log4net.Repository.ILoggerRepository"/> object 
            to create for the assembly. If this attribute is not specified or a <see cref="P:log4net.Config.RepositoryAttribute.Name"/> 
            is not specified then the assembly will be part of the default shared logging repository.
            </para>
            <para>
            This attribute can only be specified on the assembly and may only be used
            once per assembly.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.RepositoryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.RepositoryAttribute" /> class.
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.RepositoryAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:log4net.Config.RepositoryAttribute" /> class 
            with the name of the repository.
            </summary>
            <param name="name">The name of the repository.</param>
            <remarks>
            <para>
            Initialize the attribute with the name for the assembly's repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.RepositoryAttribute.Name">
            <summary>
            Gets or sets the name of the logging repository.
            </summary>
            <value>
            The string name to use as the name of the repository associated with this
            assembly.
            </value>
            <remarks>
            <para>
            This value does not have to be unique. Several assemblies can share the
            same repository. They will share the logging configuration of the repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.RepositoryAttribute.RepositoryType">
            <summary>
            Gets or sets the type of repository to create for this assembly.
            </summary>
            <value>
            The type of repository to create for this assembly.
            </value>
            <remarks>
            <para>
            The type of the repository to create for the assembly.
            The type must implement the <see cref="T:log4net.Repository.ILoggerRepository"/>
            interface.
            </para>
            <para>
            This will be the type of repository created when 
            the repository is created. If multiple assemblies reference the
            same repository then the repository is only created once using the
            <see cref="P:log4net.Config.RepositoryAttribute.RepositoryType" /> of the first assembly to call into the 
            repository.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.SecurityContextProviderAttribute">
            <summary>
            Assembly level attribute to configure the <see cref="T:log4net.Core.SecurityContextProvider"/>.
            </summary>
            <remarks>
            <para>
            This attribute may only be used at the assembly scope and can only
            be used once per assembly.
            </para>
            <para>
            Use this attribute to configure the <see cref="T:log4net.Config.XmlConfigurator"/>
            without calling one of the <see cref="M:XmlConfigurator.Configure()"/>
            methods.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Config.SecurityContextProviderAttribute.#ctor(System.Type)">
            <summary>
            Construct provider attribute with type specified
            </summary>
            <param name="providerType">the type of the provider to use</param>
            <remarks>
            <para>
            The provider specified must subclass the <see cref="T:log4net.Core.SecurityContextProvider"/>
            class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.SecurityContextProviderAttribute.ProviderType">
            <summary>
            Gets or sets the type of the provider to use.
            </summary>
            <value>
            the type of the provider to use.
            </value>
            <remarks>
            <para>
            The provider specified must subclass the <see cref="T:log4net.Core.SecurityContextProvider"/>
            class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.SecurityContextProviderAttribute.Configure(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Configures the SecurityContextProvider
            </summary>
            <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
            <param name="targetRepository">The repository to configure.</param>
            <remarks>
            <para>
            Creates a provider instance from the <see cref="P:log4net.Config.SecurityContextProviderAttribute.ProviderType"/> specified.
            Sets this as the default security context provider <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider"/>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Config.SecurityContextProviderAttribute.declaringType">
            <summary>
            The fully qualified type of the SecurityContextProviderAttribute class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Config.XmlConfigurator">
            <summary>
            Use this class to initialize the log4net environment using an Xml tree.
            </summary>
            <remarks>
            <para>
            Configures a <see cref="T:log4net.Repository.ILoggerRepository"/> using an Xml tree.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository)">
            <summary>
            Automatically configures the <see cref="T:log4net.Repository.ILoggerRepository"/> using settings
            stored in the application's configuration file.
            </summary>
            <remarks>
            <para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </para>
            <para>
            To use this method to configure log4net you must specify 
            the <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler"/> section
            handler for the <c>log4net</c> configuration section. See the
            <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler"/> for an example.
            </para>
            </remarks>
            <param name="repository">The repository to configure.</param>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure">
            <summary>
            Automatically configures the log4net system based on the 
            application's configuration settings.
            </summary>
            <remarks>
            <para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </para>
            <para>
            To use this method to configure log4net you must specify 
            the <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler"/> section
            handler for the <c>log4net</c> configuration section. See the
            <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler"/> for an example.
            </para>
            </remarks>
            <seealso cref="T:log4net.Config.Log4NetConfigurationSectionHandler"/>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            Configures log4net using a <c>log4net</c> element
            </summary>
            <remarks>
            <para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element"/>.
            </para>
            </remarks>
            <param name="element">The element to parse.</param>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(System.IO.FileInfo)">
            <summary>
            Configures log4net using the specified configuration file.
            </summary>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
            <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
            <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
            <para>
            The first element matching <c>&lt;configuration&gt;</c> will be read as the 
            configuration. If this file is also a .NET .config file then you must specify 
            a configuration section for the <c>log4net</c> element otherwise .NET will 
            complain. Set the type for the section handler to <see cref="T:System.Configuration.IgnoreSectionHandler"/>, for example:
            <code lang="XML" escaped="true">
            <configSections>
            	<section name="log4net" type="System.Configuration.IgnoreSectionHandler" />
            </configSections>
            </code>
            </para>
            <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
            <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            XmlConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
            <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
            <code lang="XML" escaped="true">
            <configuration>
            	<appSettings>
            		<add key="log4net-config-file" value="log.config"/>
            	</appSettings>
            </configuration>
            </code>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(System.Uri)">
            <summary>
            Configures log4net using the specified configuration URI.
            </summary>
            <param name="configUri">A URI to load the XML configuration from.</param>
            <remarks>
            <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
            <para>
            The <see cref="T:System.Net.WebRequest"/> must support the URI scheme specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(System.IO.Stream)">
            <summary>
            Configures log4net using the specified configuration data stream.
            </summary>
            <param name="configStream">A stream to load the XML configuration from.</param>
            <remarks>
            <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
            <para>
            Note that this method will NOT close the stream parameter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.Xml.XmlElement)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository"/> using the specified XML 
            element.
            </summary>
            <remarks>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element"/>.
            </remarks>
            <param name="repository">The repository to configure.</param>
            <param name="element">The element to parse.</param>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository"/> using the specified configuration 
            file.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
            <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
            <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
            <para>
            The first element matching <c>&lt;configuration&gt;</c> will be read as the 
            configuration. If this file is also a .NET .config file then you must specify 
            a configuration section for the <c>log4net</c> element otherwise .NET will 
            complain. Set the type for the section handler to <see cref="T:System.Configuration.IgnoreSectionHandler"/>, for example:
            <code lang="XML" escaped="true">
            <configSections>
            	<section name="log4net" type="System.Configuration.IgnoreSectionHandler" />
            </configSections>
            </code>
            </para>
            <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
            <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            XmlConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
            <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
            <code lang="XML" escaped="true">
            <configuration>
            	<appSettings>
            		<add key="log4net-config-file" value="log.config"/>
            	</appSettings>
            </configuration>
            </code>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.Uri)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository"/> using the specified configuration 
            URI.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configUri">A URI to load the XML configuration from.</param>
            <remarks>
            <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
            <para>
            The <see cref="T:System.Net.WebRequest"/> must support the URI scheme specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.Stream)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository"/> using the specified configuration 
            file.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configStream">The stream to load the XML configuration from.</param>
            <remarks>
            <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
            <para>
            Note that this method will NOT close the stream parameter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)">
            <summary>
            Configures log4net using the file specified, monitors the file for changes 
            and reloads the configuration if a change is detected.
            </summary>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
            <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
            <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher"/>
            and depends on the behavior of that class.
            </para>
            <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:Configure(FileInfo)"/>.
            </para>
            </remarks>
            <seealso cref="M:Configure(FileInfo)"/>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatch(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository"/> using the file specified, 
            monitors the file for changes and reloads the configuration if a change 
            is detected.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
            <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
            <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher"/>
            and depends on the behavior of that class.
            </para>
            <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:Configure(FileInfo)"/>.
            </para>
            </remarks>
            <seealso cref="M:Configure(FileInfo)"/>
        </member>
        <member name="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler">
            <summary>
            Class used to watch config files.
            </summary>
            <remarks>
            <para>
            Uses the <see cref="T:System.IO.FileSystemWatcher"/> to monitor
            changes to a specified file. Because multiple change notifications
            may be raised when the file is modified, a timer is used to
            compress the notifications into a single event. The timer
            waits for <see cref="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.TimeoutMillis"/> time before delivering
            the event notification. If any further <see cref="T:System.IO.FileSystemWatcher"/>
            change notifications arrive while the timer is waiting it
            is reset and waits again for <see cref="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.TimeoutMillis"/> to
            elapse.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.m_configFile">
            <summary>
            Holds the FileInfo used to configure the XmlConfigurator
            </summary>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.m_repository">
            <summary>
            Holds the repository being configured.
            </summary>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.m_timer">
            <summary>
            The timer used to compress the notification events.
            </summary>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.TimeoutMillis">
            <summary>
            The default amount of time to wait after receiving notification
            before reloading the config file.
            </summary>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.m_watcher">
            <summary>
            Watches file for changes. This object should be disposed when no longer
            needed to free system handles on the watched resources.
            </summary>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.#ctor(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" /> class to
            watch a specified config file used to configure a repository.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configFile">The configuration file to watch.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Event handler used by <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
            <para>
            This handler reloads the configuration from the file when the event is fired.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Event handler used by <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
            <para>
            This handler reloads the configuration from the file when the event is fired.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.OnWatchedFileChange(System.Object)">
            <summary>
            Called by the timer when the configuration has been updated.
            </summary>
            <param name="state">null</param>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.Dispose">
            <summary>
            Release the handles held by the watcher and timer.
            </summary>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.InternalConfigureFromXml(log4net.Repository.ILoggerRepository,System.Xml.XmlElement)">
            <summary>
            Configures the specified repository using a <c>log4net</c> element.
            </summary>
            <param name="repository">The hierarchy to configure.</param>
            <param name="element">The element to parse.</param>
            <remarks>
            <para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element"/>.
            </para>
            <para>
            This method is ultimately called by one of the Configure methods 
            to load the configuration from an <see cref="T:System.Xml.XmlElement"/>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.m_repositoryName2ConfigAndWatchHandler">
            <summary>
            Maps repository names to ConfigAndWatchHandler instances to allow a particular
            ConfigAndWatchHandler to dispose of its FileSystemWatcher when a repository is 
            reconfigured.
            </summary>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.declaringType">
            <summary>
            The fully qualified type of the XmlConfigurator class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Config.XmlConfiguratorAttribute">
            <summary>
            Assembly level attribute to configure the <see cref="T:log4net.Config.XmlConfigurator"/>.
            </summary>
            <remarks>
            <para>
            This attribute may only be used at the assembly scope and can only
            be used once per assembly.
            </para>
            <para>
            Use this attribute to configure the <see cref="T:log4net.Config.XmlConfigurator"/>
            without calling one of the <see cref="M:XmlConfigurator.Configure()"/>
            methods.
            </para>
            <para>
            If neither of the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile"/> or <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension"/>
            properties are set the configuration is loaded from the application's .config file.
            If set the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile"/> property takes priority over the
            <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension"/> property. The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile"/> property
            specifies a path to a file to load the config from. The path is relative to the
            application's base directory; <see cref="P:System.AppDomain.BaseDirectory"/>.
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension"/> property is used as a postfix to the assembly file name.
            The config file must be located in the  application's base directory; <see cref="P:System.AppDomain.BaseDirectory"/>.
            For example in a console application setting the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension"/> to
            <c>config</c> has the same effect as not specifying the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile"/> or 
            <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension"/> properties.
            </para>
            <para>
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.Watch"/> property can be set to cause the <see cref="T:log4net.Config.XmlConfigurator"/>
            to watch the configuration file for changes.
            </para>
            <note>
            <para>
            Log4net will only look for assembly level configuration attributes once.
            When using the log4net assembly level attributes to control the configuration 
            of log4net you must ensure that the first call to any of the 
            <see cref="T:log4net.Core.LoggerManager"/> methods is made from the assembly with the configuration
            attributes. 
            </para>
            <para>
            If you cannot guarantee the order in which log4net calls will be made from 
            different assemblies you must use programmatic configuration instead, i.e.
            call the <see cref="M:XmlConfigurator.Configure()"/> method directly.
            </para>
            </note>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.XmlConfiguratorAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile">
            <summary>
            Gets or sets the filename of the configuration file.
            </summary>
            <value>
            The filename of the configuration file.
            </value>
            <remarks>
            <para>
            If specified, this is the name of the configuration file to use with
            the <see cref="T:log4net.Config.XmlConfigurator"/>. This file path is relative to the
            <b>application base</b> directory (<see cref="P:System.AppDomain.BaseDirectory"/>).
            </para>
            <para>
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile"/> takes priority over the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension">
            <summary>
            Gets or sets the extension of the configuration file.
            </summary>
            <value>
            The extension of the configuration file.
            </value>
            <remarks>
            <para>
            If specified this is the extension for the configuration file.
            The path to the config file is built by using the <b>application 
            base</b> directory (<see cref="P:System.AppDomain.BaseDirectory"/>),
            the <b>assembly file name</b> and the config file extension.
            </para>
            <para>
            If the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension"/> is set to <c>MyExt</c> then
            possible config file names would be: <c>MyConsoleApp.exe.MyExt</c> or
            <c>MyClassLibrary.dll.MyExt</c>.
            </para>
            <para>
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile"/> takes priority over the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.XmlConfiguratorAttribute.Watch">
            <summary>
            Gets or sets a value indicating whether to watch the configuration file.
            </summary>
            <value>
            <c>true</c> if the configuration should be watched, <c>false</c> otherwise.
            </value>
            <remarks>
            <para>
            If this flag is specified and set to <c>true</c> then the framework
            will watch the configuration file and will reload the config each time 
            the file is modified.
            </para>
            <para>
            The config file can only be watched if it is loaded from local disk.
            In a No-Touch (Smart Client) deployment where the application is downloaded
            from a web server the config file may not reside on the local disk
            and therefore it may not be able to watch it.
            </para>
            <note>
            Watching configuration is not supported on the SSCLI.
            </note>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfiguratorAttribute.Configure(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified assembly.
            </summary>
            <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
            <param name="targetRepository">The repository to configure.</param>
            <remarks>
            <para>
            Configure the repository using the <see cref="T:log4net.Config.XmlConfigurator"/>.
            The <paramref name="targetRepository"/> specified must extend the <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/>
            class otherwise the <see cref="T:log4net.Config.XmlConfigurator"/> will not be able to
            configure it.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetRepository" /> does not extend <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/>.</exception>
        </member>
        <member name="M:log4net.Config.XmlConfiguratorAttribute.ConfigureFromFile(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Attempt to load configuration from the local file system
            </summary>
            <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
            <param name="targetRepository">The repository to configure.</param>
        </member>
        <member name="M:log4net.Config.XmlConfiguratorAttribute.ConfigureFromFile(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            Configure the specified repository using a <see cref="T:System.IO.FileInfo"/>
            </summary>
            <param name="targetRepository">The repository to configure.</param>
            <param name="configFile">the FileInfo pointing to the config file</param>
        </member>
        <member name="M:log4net.Config.XmlConfiguratorAttribute.ConfigureFromUri(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Attempt to load configuration from a URI
            </summary>
            <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
            <param name="targetRepository">The repository to configure.</param>
        </member>
        <member name="F:log4net.Config.XmlConfiguratorAttribute.declaringType">
            <summary>
            The fully qualified type of the XmlConfiguratorAttribute class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Core.CompactRepositorySelector">
            <summary>
            The implementation of the <see cref="T:log4net.Core.IRepositorySelector"/> interface suitable
            for use with the compact framework
            </summary>
            <remarks>
            <para>
            This <see cref="T:log4net.Core.IRepositorySelector"/> implementation is a simple
            mapping between repository name and <see cref="T:log4net.Repository.ILoggerRepository"/>
            object.
            </para>
            <para>
            The .NET Compact Framework 1.0 does not support retrieving assembly
            level attributes therefore unlike the <c>DefaultRepositorySelector</c>
            this selector does not examine the calling assembly for attributes.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.#ctor(System.Type)">
            <summary>
            Create a new repository selector
            </summary>
            <param name="defaultRepositoryType">the type of the repositories to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/></param>
            <remarks>
            <para>
            Create an new compact repository selector.
            The default type for repositories must be specified,
            an appropriate value would be <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">throw if <paramref name="defaultRepositoryType"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">throw if <paramref name="defaultRepositoryType"/> does not implement <see cref="T:log4net.Repository.ILoggerRepository"/></exception>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.GetRepository(System.Reflection.Assembly)">
            <summary>
            Get the <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified assembly
            </summary>
            <param name="assembly">not used</param>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository"/></returns>
            <remarks>
            <para>
            The <paramref name="assembly"/> argument is not used. This selector does not create a
            separate repository for each assembly. 
            </para>
            <para>
            As a named repository is not specified the default repository is 
            returned. The default repository is named <c>log4net-default-repository</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.GetRepository(System.String)">
            <summary>
            Get the named <see cref="T:log4net.Repository.ILoggerRepository"/>
            </summary>
            <param name="repositoryName">the name of the repository to lookup</param>
            <returns>The named <see cref="T:log4net.Repository.ILoggerRepository"/></returns>
            <remarks>
            <para>
            Get the named <see cref="T:log4net.Repository.ILoggerRepository"/>. The default 
            repository is <c>log4net-default-repository</c>. Other repositories 
            must be created using the <see cref="M:CreateRepository(string, Type)"/>.
            If the named repository does not exist an exception is thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">throw if <paramref name="repositoryName"/> is null</exception>
            <exception cref="T:log4net.Core.LogException">throw if the <paramref name="repositoryName"/> does not exist</exception>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            Create a new repository for the assembly specified 
            </summary>
            <param name="assembly">not used</param>
            <param name="repositoryType">the type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/></param>
            <returns>the repository created</returns>
            <remarks>
            <para>
            The <paramref name="assembly"/> argument is not used. This selector does not create a
            separate repository for each assembly. 
            </para>
            <para>
            If the <paramref name="repositoryType"/> is <c>null</c> then the
            default repository type specified to the constructor is used.
            </para>
            <para>
            As a named repository is not specified the default repository is 
            returned. The default repository is named <c>log4net-default-repository</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.CreateRepository(System.String,System.Type)">
            <summary>
            Create a new repository for the repository specified
            </summary>
            <param name="repositoryName">the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository"/></param>
            <param name="repositoryType">the type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/>.
            If this param is null then the default repository type is used.</param>
            <returns>the repository created</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(string)"/> with the
            same repository specified will return the same repository instance.
            </para>
            <para>
            If the named repository already exists an exception will be thrown.
            </para>
            <para>
            If <paramref name="repositoryType"/> is <c>null</c> then the default 
            repository type specified to the constructor is used.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">throw if <paramref name="repositoryName"/> is null</exception>
            <exception cref="T:log4net.Core.LogException">throw if the <paramref name="repositoryName"/> already exists</exception>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.ExistsRepository(System.String)">
            <summary>
            Test if a named repository exists
            </summary>
            <param name="repositoryName">the named repository to check</param>
            <returns><c>true</c> if the repository exists</returns>
            <remarks>
            <para>
            Test if a named repository exists. Use <see cref="M:CreateRepository(string, Type)"/>
            to create a new repository and <see cref="M:GetRepository(string)"/> to retrieve 
            a repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.GetAllRepositories">
            <summary>
            Gets a list of <see cref="T:log4net.Repository.ILoggerRepository"/> objects
            </summary>
            <returns>an array of all known <see cref="T:log4net.Repository.ILoggerRepository"/> objects</returns>
            <remarks>
            <para>
            Gets an array of all of the repositories created by this selector.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.CompactRepositorySelector.declaringType">
            <summary>
            The fully qualified type of the CompactRepositorySelector class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="E:log4net.Core.CompactRepositorySelector.LoggerRepositoryCreatedEvent">
            <summary>
            Event to notify that a logger repository has been created.
            </summary>
            <value>
            Event to notify that a logger repository has been created.
            </value>
            <remarks>
            <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs"/> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.OnLoggerRepositoryCreatedEvent(log4net.Repository.ILoggerRepository)">
            <summary>
            Notify the registered listeners that the repository has been created
            </summary>
            <param name="repository">The repository that has been created</param>
            <remarks>
            <para>
            Raises the <event cref="E:log4net.Core.CompactRepositorySelector.LoggerRepositoryCreatedEvent">LoggerRepositoryCreatedEvent</event>
            event.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.DefaultRepositorySelector">
            <summary>
            The default implementation of the <see cref="T:log4net.Core.IRepositorySelector"/> interface.
            </summary>
            <remarks>
            <para>
            Uses attributes defined on the calling assembly to determine how to
            configure the hierarchy for the repository.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="E:log4net.Core.DefaultRepositorySelector.LoggerRepositoryCreatedEvent">
            <summary>
            Event to notify that a logger repository has been created.
            </summary>
            <value>
            Event to notify that a logger repository has been created.
            </value>
            <remarks>
            <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs"/> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.#ctor(System.Type)">
            <summary>
            Creates a new repository selector.
            </summary>
            <param name="defaultRepositoryType">The type of the repositories to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/></param>
            <remarks>
            <para>
            Create an new repository selector.
            The default type for repositories must be specified,
            an appropriate value would be <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="defaultRepositoryType"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="defaultRepositoryType"/> does not implement <see cref="T:log4net.Repository.ILoggerRepository"/>.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.GetRepository(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified assembly.
            </summary>
            <param name="repositoryAssembly">The assembly use to lookup the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <remarks>
            <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository"/> created and the repository 
            to create can be overridden by specifying the <see cref="T:log4net.Config.RepositoryAttribute"/> 
            attribute on the <paramref name="repositoryAssembly"/>.
            </para>
            <para>
            The default values are to use the <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/> 
            implementation of the <see cref="T:log4net.Repository.ILoggerRepository"/> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name"/> as the name of the repository.
            </para>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be automatically configured using 
            any <see cref="T:log4net.Config.ConfiguratorAttribute"/> attributes defined on
            the <paramref name="repositoryAssembly"/>.
            </para>
            </remarks>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> for the assembly</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryAssembly"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.GetRepository(System.String)">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified repository.
            </summary>
            <param name="repositoryName">The repository to use to lookup the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified repository.</returns>
            <remarks>
            <para>
            Returns the named repository. If <paramref name="repositoryName"/> is <c>null</c>
            a <see cref="T:System.ArgumentNullException"/> is thrown. If the repository 
            does not exist a <see cref="T:log4net.Core.LogException"/> is thrown.
            </para>
            <para>
            Use <see cref="M:CreateRepository(string, Type)"/> to create a repository.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryName"/> is <see langword="null" />.</exception>
            <exception cref="T:log4net.Core.LogException"><paramref name="repositoryName"/> does not exist.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            Create a new repository for the assembly specified 
            </summary>
            <param name="repositoryAssembly">the assembly to use to create the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <returns>The repository created.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)"/> with the
            same assembly specified will return the same repository instance.
            </para>
            <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository"/> created and
            the repository to create can be overridden by specifying the
            <see cref="T:log4net.Config.RepositoryAttribute"/> attribute on the 
            <paramref name="repositoryAssembly"/>.  The default values are to use the 
            <paramref name="repositoryType"/> implementation of the 
            <see cref="T:log4net.Repository.ILoggerRepository"/> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name"/> as the name of the repository.
            </para>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be automatically
            configured using any <see cref="T:log4net.Config.ConfiguratorAttribute"/> 
            attributes defined on the <paramref name="repositoryAssembly"/>.
            </para>
            <para>
            If a repository for the <paramref name="repositoryAssembly"/> already exists
            that repository will be returned. An error will not be raised and that 
            repository may be of a different type to that specified in <paramref name="repositoryType"/>.
            Also the <see cref="T:log4net.Config.RepositoryAttribute"/> attribute on the
            assembly may be used to override the repository type specified in 
            <paramref name="repositoryType"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryAssembly"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type,System.String,System.Boolean)">
            <summary>
            Creates a new repository for the assembly specified.
            </summary>
            <param name="repositoryAssembly">the assembly to use to create the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryName">The name to assign to the created repository</param>
            <param name="readAssemblyAttributes">Set to <c>true</c> to read and apply the assembly attributes</param>
            <returns>The repository created.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)"/> with the
            same assembly specified will return the same repository instance.
            </para>
            <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository"/> created and
            the repository to create can be overridden by specifying the
            <see cref="T:log4net.Config.RepositoryAttribute"/> attribute on the 
            <paramref name="repositoryAssembly"/>.  The default values are to use the 
            <paramref name="repositoryType"/> implementation of the 
            <see cref="T:log4net.Repository.ILoggerRepository"/> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name"/> as the name of the repository.
            </para>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be automatically
            configured using any <see cref="T:log4net.Config.ConfiguratorAttribute"/> 
            attributes defined on the <paramref name="repositoryAssembly"/>.
            </para>
            <para>
            If a repository for the <paramref name="repositoryAssembly"/> already exists
            that repository will be returned. An error will not be raised and that 
            repository may be of a different type to that specified in <paramref name="repositoryType"/>.
            Also the <see cref="T:log4net.Config.RepositoryAttribute"/> attribute on the
            assembly may be used to override the repository type specified in 
            <paramref name="repositoryType"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryAssembly"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.String,System.Type)">
            <summary>
            Creates a new repository for the specified repository.
            </summary>
            <param name="repositoryName">The repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/>.
            If this param is <see langword="null" /> then the default repository type is used.</param>
            <returns>The new repository.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(string)"/> with the
            same repository specified will return the same repository instance.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryName"/> is <see langword="null" />.</exception>
            <exception cref="T:log4net.Core.LogException"><paramref name="repositoryName"/> already exists.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.ExistsRepository(System.String)">
            <summary>
            Test if a named repository exists
            </summary>
            <param name="repositoryName">the named repository to check</param>
            <returns><c>true</c> if the repository exists</returns>
            <remarks>
            <para>
            Test if a named repository exists. Use <see cref="M:CreateRepository(string, Type)"/>
            to create a new repository and <see cref="M:GetRepository(string)"/> to retrieve 
            a repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.GetAllRepositories">
            <summary>
            Gets a list of <see cref="T:log4net.Repository.ILoggerRepository"/> objects
            </summary>
            <returns>an array of all known <see cref="T:log4net.Repository.ILoggerRepository"/> objects</returns>
            <remarks>
            <para>
            Gets an array of all of the repositories created by this selector.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.AliasRepository(System.String,log4net.Repository.ILoggerRepository)">
            <summary>
            Aliases a repository to an existing repository.
            </summary>
            <param name="repositoryAlias">The repository to alias.</param>
            <param name="repositoryTarget">The repository that the repository is aliased to.</param>
            <remarks>
            <para>
            The repository specified will be aliased to the repository when created. 
            The repository must not already exist.
            </para>
            <para>
            When the repository is created it must utilize the same repository type as 
            the repository it is aliased to, otherwise the aliasing will fail.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="repositoryAlias" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="repositoryTarget" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.OnLoggerRepositoryCreatedEvent(log4net.Repository.ILoggerRepository)">
            <summary>
            Notifies the registered listeners that the repository has been created.
            </summary>
            <param name="repository">The repository that has been created.</param>
            <remarks>
            <para>
            Raises the <see cref="E:log4net.Core.DefaultRepositorySelector.LoggerRepositoryCreatedEvent"/> event.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.GetInfoForAssembly(System.Reflection.Assembly,System.String@,System.Type@)">
            <summary>
            Gets the repository name and repository type for the specified assembly.
            </summary>
            <param name="assembly">The assembly that has a <see cref="T:log4net.Config.RepositoryAttribute"/>.</param>
            <param name="repositoryName">in/out param to hold the repository name to use for the assembly, caller should set this to the default value before calling.</param>
            <param name="repositoryType">in/out param to hold the type of the repository to create for the assembly, caller should set this to the default value before calling.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assembly" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.ConfigureRepository(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Configures the repository using information from the assembly.
            </summary>
            <param name="assembly">The assembly containing <see cref="T:log4net.Config.ConfiguratorAttribute"/>
            attributes which define the configuration for the repository.</param>
            <param name="repository">The repository to configure.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="assembly" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="repository" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.LoadPlugins(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Loads the attribute defined plugins on the assembly.
            </summary>
            <param name="assembly">The assembly that contains the attributes.</param>
            <param name="repository">The repository to add the plugins to.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="assembly" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="repository" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.LoadAliases(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Loads the attribute defined aliases on the assembly.
            </summary>
            <param name="assembly">The assembly that contains the attributes.</param>
            <param name="repository">The repository to alias to.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="assembly" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="repository" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="F:log4net.Core.DefaultRepositorySelector.declaringType">
            <summary>
            The fully qualified type of the DefaultRepositorySelector class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Core.ErrorCode">
            <summary>
            Defined error codes that can be passed to the <see cref="M:IErrorHandler.Error(string, Exception, ErrorCode)"/> method.
            </summary>
            <remarks>
            <para>
            Values passed to the <see cref="M:IErrorHandler.Error(string, Exception, ErrorCode)"/> method.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Core.ErrorCode.GenericFailure">
            <summary>
            A general error
            </summary>
        </member>
        <member name="F:log4net.Core.ErrorCode.WriteFailure">
            <summary>
            Error while writing output
            </summary>
        </member>
        <member name="F:log4net.Core.ErrorCode.FlushFailure">
            <summary>
            Failed to flush file
            </summary>
        </member>
        <member name="F:log4net.Core.ErrorCode.CloseFailure">
            <summary>
            Failed to close file
            </summary>
        </member>
        <member name="F:log4net.Core.ErrorCode.FileOpenFailure">
            <summary>
            Unable to open output file
            </summary>
        </member>
        <member name="F:log4net.Core.ErrorCode.MissingLayout">
            <summary>
            No layout specified
            </summary>
        </member>
        <member name="F:log4net.Core.ErrorCode.AddressParseFailure">
            <summary>
            Failed to parse address
            </summary>
        </member>
        <member name="T:log4net.Core.ExceptionEvaluator">
            <summary>
            An evaluator that triggers on an Exception type
            </summary>
            <remarks>
            <para>
            This evaluator will trigger if the type of the Exception
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)"/>
            is equal to a Type in <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType"/>.    /// 
            </para>
            </remarks>
            <author>Drew Schaeffer</author>
        </member>
        <member name="F:log4net.Core.ExceptionEvaluator.m_type">
            <summary>
            The type that causes the trigger to fire.
            </summary>
        </member>
        <member name="F:log4net.Core.ExceptionEvaluator.m_triggerOnSubclass">
            <summary>
            Causes subclasses of <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType"/> to cause the trigger to fire.
            </summary>
        </member>
        <member name="M:log4net.Core.ExceptionEvaluator.#ctor">
            <summary>
            Default ctor to allow dynamic creation through a configurator.
            </summary>
        </member>
        <member name="M:log4net.Core.ExceptionEvaluator.#ctor(System.Type,System.Boolean)">
            <summary>
            Constructs an evaluator and initializes to trigger on <paramref name="exType"/>
            </summary>
            <param name="exType">the type that triggers this evaluator.</param>
            <param name="triggerOnSubClass">If true, this evaluator will trigger on subclasses of <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType"/>.</param>
        </member>
        <member name="P:log4net.Core.ExceptionEvaluator.ExceptionType">
            <summary>
            The type that triggers this evaluator.
            </summary>
        </member>
        <member name="P:log4net.Core.ExceptionEvaluator.TriggerOnSubclass">
            <summary>
            If true, this evaluator will trigger on subclasses of <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType"/>.
            </summary>
        </member>
        <member name="M:log4net.Core.ExceptionEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
            <summary>
            Is this <paramref name="loggingEvent"/> the triggering event?
            </summary>
            <param name="loggingEvent">The event to check</param>
            <returns>This method returns <c>true</c>, if the logging event Exception 
            Type is <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType"/>. 
            Otherwise it returns <c>false</c></returns>
            <remarks>
            <para>
            This evaluator will trigger if the Exception Type of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)"/>
            is <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.IAppenderAttachable">
            <summary>
            Interface for attaching appenders to objects.
            </summary>
            <remarks>
            <para>
            Interface for attaching, removing and retrieving appenders.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.IAppenderAttachable.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Attaches an appender.
            </summary>
            <param name="appender">The appender to add.</param>
            <remarks>
            <para>
            Add the specified appender. The implementation may
            choose to allow or deny duplicate appenders.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.IAppenderAttachable.Appenders">
            <summary>
            Gets all attached appenders.
            </summary>
            <value>
            A collection of attached appenders.
            </value>
            <remarks>
            <para>
            Gets a collection of attached appenders.
            If there are no attached appenders the
            implementation should return an empty 
            collection rather than <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IAppenderAttachable.GetAppender(System.String)">
            <summary>
            Gets an attached appender with the specified name.
            </summary>
            <param name="name">The name of the appender to get.</param>
            <returns>
            The appender with the name specified, or <c>null</c> if no appender with the
            specified name is found.
            </returns>
            <remarks>
            <para>
            Returns an attached appender with the <paramref name="name"/> specified.
            If no appender with the specified name is found <c>null</c> will be
            returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IAppenderAttachable.RemoveAllAppenders">
            <summary>
            Removes all attached appenders.
            </summary>
            <remarks>
            <para>
            Removes and closes all attached appenders
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IAppenderAttachable.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Removes the specified appender from the list of attached appenders.
            </summary>
            <param name="appender">The appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close"/> on the appender removed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IAppenderAttachable.RemoveAppender(System.String)">
            <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close"/> on the appender removed.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.IErrorHandler">
            <summary>
            Appenders may delegate their error handling to an <see cref="T:log4net.Core.IErrorHandler" />.
            </summary>
            <remarks>
            <para>
            Error handling is a particularly tedious to get right because by
            definition errors are hard to predict and to reproduce. 
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.IErrorHandler.Error(System.String,System.Exception,log4net.Core.ErrorCode)">
            <summary>
            Handles the error and information about the error condition is passed as 
            a parameter.
            </summary>
            <param name="message">The message associated with the error.</param>
            <param name="e">The <see cref="T:System.Exception" /> that was thrown when the error occurred.</param>
            <param name="errorCode">The error code associated with the error.</param>
            <remarks>
            <para>
            Handles the error and information about the error condition is passed as 
            a parameter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IErrorHandler.Error(System.String,System.Exception)">
            <summary>
            Prints the error message passed as a parameter.
            </summary>
            <param name="message">The message associated with the error.</param>
            <param name="e">The <see cref="T:System.Exception" /> that was thrown when the error occurred.</param>
            <remarks>
            <para>
            See <see cref="M:Error(string,Exception,ErrorCode)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IErrorHandler.Error(System.String)">
            <summary>
            Prints the error message passed as a parameter.
            </summary>
            <param name="message">The message associated with the error.</param>
            <remarks>
            <para>
            See <see cref="M:Error(string,Exception,ErrorCode)"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.IFixingRequired">
            <summary>
            Interface for objects that require fixing.
            </summary>
            <remarks>
            <para>
            Interface that indicates that the object requires fixing before it
            can be taken outside the context of the appender's 
            <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)"/> method.
            </para>
            <para>
            When objects that implement this interface are stored 
            in the context properties maps <see cref="T:log4net.GlobalContext"/>
            <see cref="P:log4net.GlobalContext.Properties"/> and <see cref="T:log4net.ThreadContext"/>
            <see cref="P:log4net.ThreadContext.Properties"/> are fixed 
            (see <see cref="P:log4net.Core.LoggingEvent.Fix"/>) the <see cref="M:log4net.Core.IFixingRequired.GetFixedObject"/>
            method will be called.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Core.IFixingRequired.GetFixedObject">
            <summary>
            Get a portable version of this object
            </summary>
            <returns>the portable instance of this object</returns>
            <remarks>
            <para>
            Get a portable instance object that represents the current
            state of this object. The portable object can be stored
            and logged from any thread with identical results.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.ILogger">
            <summary>
            Interface that all loggers implement
            </summary>
            <remarks>
            <para>
            This interface supports logging events and testing if a level
            is enabled for logging.
            </para>
            <para>
            These methods will not throw exceptions. Note to implementor, ensure
            that the implementation of these methods cannot allow an exception
            to be thrown to the caller.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="P:log4net.Core.ILogger.Name">
            <summary>
            Gets the name of the logger.
            </summary>
            <value>
            The name of the logger.
            </value>
            <remarks>
            <para>
            The name of this logger
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.ILogger.Log(System.Type,log4net.Core.Level,System.Object,System.Exception)">
            <summary>
            This generic form is intended to be used by wrappers.
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <param name="level">The level of the message to be logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">the exception to log, including its stack trace. Pass <c>null</c> to not log an exception.</param>
            <remarks>
            <para>
            Generates a logging event for the specified <paramref name="level"/> using
            the <paramref name="message"/> and <paramref name="exception"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.ILogger.Log(log4net.Core.LoggingEvent)">
            <summary>
            This is the most generic printing method that is intended to be used 
            by wrappers.
            </summary>
            <param name="logEvent">The event being logged.</param>
            <remarks>
            <para>
            Logs the specified logging event through this logger.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.ILogger.IsEnabledFor(log4net.Core.Level)">
            <summary>
            Checks if this logger is enabled for a given <see cref="T:log4net.Core.Level"/> passed as parameter.
            </summary>
            <param name="level">The level to check.</param>
            <returns>
            <c>true</c> if this logger is enabled for <c>level</c>, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            Test if this logger is going to log events of the specified <paramref name="level"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.ILogger.Repository">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> where this 
            <c>Logger</c> instance is attached to.
            </summary>
            <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this logger belongs to.
            </value>
            <remarks>
            <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> where this 
            <c>Logger</c> instance is attached to.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.ILoggerWrapper">
            <summary>
            Base interface for all wrappers
            </summary>
            <remarks>
            <para>
            Base interface for all wrappers.
            </para>
            <para>
            All wrappers must implement this interface.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="P:log4net.Core.ILoggerWrapper.Logger">
            <summary>
            Get the implementation behind this wrapper object.
            </summary>
            <value>
            The <see cref="T:log4net.Core.ILogger"/> object that in implementing this object.
            </value>
            <remarks>
            <para>
            The <see cref="T:log4net.Core.ILogger"/> object that in implementing this
            object. The <c>Logger</c> object may not 
            be the same object as this object because of logger decorators.
            This gets the actual underlying objects that is used to process
            the log events.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.IOptionHandler">
            <summary>
            Interface used to delay activate a configured object.
            </summary>
            <remarks>
            <para>
            This allows an object to defer activation of its options until all
            options have been set. This is required for components which have
            related options that remain ambiguous until all are set.
            </para>
            <para>
            If a component implements this interface then the <see cref="M:log4net.Core.IOptionHandler.ActivateOptions"/> method 
            must be called by the container after its all the configured properties have been set 
            and before the component can be used.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Core.IOptionHandler.ActivateOptions">
            <summary>
            Activate the options that were previously set with calls to properties.
            </summary>
            <remarks>
            <para>
            This allows an object to defer activation of its options until all
            options have been set. This is required for components which have
            related options that remain ambiguous until all are set.
            </para>
            <para>
            If a component implements this interface then this method must be called
            after its properties have been set before the component can be used.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.LoggerRepositoryCreationEventHandler">
            <summary>
            Delegate used to handle logger repository creation event notifications
            </summary>
            <param name="sender">The <see cref="T:log4net.Core.IRepositorySelector"/> which created the repository.</param>
            <param name="e">The <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs"/> event args
            that holds the <see cref="T:log4net.Repository.ILoggerRepository"/> instance that has been created.</param>
            <remarks>
            <para>
            Delegate used to handle logger repository creation event notifications.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.LoggerRepositoryCreationEventArgs">
            <summary>
            Provides data for the <see cref="E:log4net.Core.IRepositorySelector.LoggerRepositoryCreatedEvent"/> event.
            </summary>
            <remarks>
            <para>
            A <see cref="E:log4net.Core.IRepositorySelector.LoggerRepositoryCreatedEvent"/> 
            event is raised every time a <see cref="T:log4net.Repository.ILoggerRepository"/> is created.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggerRepositoryCreationEventArgs.m_repository">
            <summary>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created
            </summary>
        </member>
        <member name="M:log4net.Core.LoggerRepositoryCreationEventArgs.#ctor(log4net.Repository.ILoggerRepository)">
            <summary>
            Construct instance using <see cref="T:log4net.Repository.ILoggerRepository"/> specified
            </summary>
            <param name="repository">the <see cref="T:log4net.Repository.ILoggerRepository"/> that has been created</param>
            <remarks>
            <para>
            Construct instance using <see cref="T:log4net.Repository.ILoggerRepository"/> specified
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggerRepositoryCreationEventArgs.LoggerRepository">
            <summary>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> that has been created
            </summary>
            <value>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> that has been created
            </value>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> that has been created
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.IRepositorySelector">
            <summary>
            Interface used by the <see cref="T:log4net.LogManager"/> to select the <see cref="T:log4net.Repository.ILoggerRepository"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:log4net.LogManager"/> uses a <see cref="T:log4net.Core.IRepositorySelector"/> 
            to specify the policy for selecting the correct <see cref="T:log4net.Repository.ILoggerRepository"/> 
            to return to the caller.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.IRepositorySelector.GetRepository(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified assembly.
            </summary>
            <param name="assembly">The assembly to use to lookup to the <see cref="T:log4net.Repository.ILoggerRepository"/></param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> for the assembly.</returns>
            <remarks>
            <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified assembly.
            </para>
            <para>
            How the association between <see cref="T:System.Reflection.Assembly"/> and <see cref="T:log4net.Repository.ILoggerRepository"/>
            is made is not defined. The implementation may choose any method for
            this association. The results of this method must be repeatable, i.e.
            when called again with the same arguments the result must be the
            save value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IRepositorySelector.GetRepository(System.String)">
            <summary>
            Gets the named <see cref="T:log4net.Repository.ILoggerRepository"/>.
            </summary>
            <param name="repositoryName">The name to use to lookup to the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <returns>The named <see cref="T:log4net.Repository.ILoggerRepository"/></returns>
            <remarks>
            Lookup a named <see cref="T:log4net.Repository.ILoggerRepository"/>. This is the repository created by
            calling <see cref="M:CreateRepository(string,Type)"/>.
            </remarks>
        </member>
        <member name="M:log4net.Core.IRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            Creates a new repository for the assembly specified.
            </summary>
            <param name="assembly">The assembly to use to create the domain to associate with the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <returns>The repository created.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the domain
            specified such that a call to <see cref="M:GetRepository(Assembly)"/> with the
            same assembly specified will return the same repository instance.
            </para>
            <para>
            How the association between <see cref="T:System.Reflection.Assembly"/> and <see cref="T:log4net.Repository.ILoggerRepository"/>
            is made is not defined. The implementation may choose any method for
            this association.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IRepositorySelector.CreateRepository(System.String,System.Type)">
            <summary>
            Creates a new repository with the name specified.
            </summary>
            <param name="repositoryName">The name to associate with the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <returns>The repository created.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the name
            specified such that a call to <see cref="M:GetRepository(string)"/> with the
            same name will return the same repository instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IRepositorySelector.ExistsRepository(System.String)">
            <summary>
            Test if a named repository exists
            </summary>
            <param name="repositoryName">the named repository to check</param>
            <returns><c>true</c> if the repository exists</returns>
            <remarks>
            <para>
            Test if a named repository exists. Use <see cref="M:CreateRepository(Assembly, Type)"/>
            to create a new repository and <see cref="M:GetRepository(Assembly)"/> to retrieve 
            a repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IRepositorySelector.GetAllRepositories">
            <summary>
            Gets an array of all currently defined repositories.
            </summary>
            <returns>
            An array of the <see cref="T:log4net.Repository.ILoggerRepository"/> instances created by 
            this <see cref="T:log4net.Core.IRepositorySelector"/>.</returns>
            <remarks>
            <para>
            Gets an array of all of the repositories created by this selector.
            </para>
            </remarks>
        </member>
        <member name="E:log4net.Core.IRepositorySelector.LoggerRepositoryCreatedEvent">
            <summary>
            Event to notify that a logger repository has been created.
            </summary>
            <value>
            Event to notify that a logger repository has been created.
            </value>
            <remarks>
            <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs"/> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.ITriggeringEventEvaluator">
            <summary>
            Test if an <see cref="T:log4net.Core.LoggingEvent"/> triggers an action
            </summary>
            <remarks>
            <para>
            Implementations of this interface allow certain appenders to decide
            when to perform an appender specific action.
            </para>
            <para>
            The action or behavior triggered is defined by the implementation.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Core.ITriggeringEventEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
            <summary>
            Test if this event triggers the action
            </summary>
            <param name="loggingEvent">The event to check</param>
            <returns><c>true</c> if this event triggers the action, otherwise <c>false</c></returns>
            <remarks>
            <para>
            Return <c>true</c> if this event triggers the action
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.Level">
            <summary>
            Defines the default set of levels recognized by the system.
            </summary>
            <remarks>
            <para>
            Each <see cref="T:log4net.Core.LoggingEvent"/> has an associated <see cref="T:log4net.Core.Level"/>.
            </para>
            <para>
            Levels have a numeric <see cref="P:log4net.Core.Level.Value"/> that defines the relative 
            ordering between levels. Two Levels with the same <see cref="P:log4net.Core.Level.Value"/> 
            are deemed to be equivalent.
            </para>
            <para>
            The levels that are recognized by log4net are set for each <see cref="T:log4net.Repository.ILoggerRepository"/>
            and each repository can have different levels defined. The levels are stored
            in the <see cref="P:log4net.Repository.ILoggerRepository.LevelMap"/> on the repository. Levels are
            looked up by name from the <see cref="P:log4net.Repository.ILoggerRepository.LevelMap"/>.
            </para>
            <para>
            When logging at level INFO the actual level used is not <see cref="F:log4net.Core.Level.Info"/> but
            the value of <c>LoggerRepository.LevelMap["INFO"]</c>. The default value for this is
            <see cref="F:log4net.Core.Level.Info"/>, but this can be changed by reconfiguring the level map.
            </para>
            <para>
            Each level has a <see cref="P:log4net.Core.Level.DisplayName"/> in addition to its <see cref="P:log4net.Core.Level.Name"/>. The 
            <see cref="P:log4net.Core.Level.DisplayName"/> is the string that is written into the output log. By default
            the display name is the same as the level name, but this can be used to alias levels
            or to localize the log output.
            </para>
            <para>
            Some of the predefined levels recognized by the system are:
            </para>
            <list type="bullet">
            	<item>
            		<description><see cref="F:log4net.Core.Level.Off"/>.</description>
            	</item>
            	<item>
            		<description><see cref="F:log4net.Core.Level.Fatal"/>.</description>
            	</item>
            	<item>
            		<description><see cref="F:log4net.Core.Level.Error"/>.</description>
            	</item>
            	<item>
            		<description><see cref="F:log4net.Core.Level.Warn"/>.</description>
            	</item>
            	<item>
            		<description><see cref="F:log4net.Core.Level.Info"/>.</description>
            	</item>
            	<item>
            		<description><see cref="F:log4net.Core.Level.Debug"/>.</description>
            	</item>
            	<item>
            		<description><see cref="F:log4net.Core.Level.All"/>.</description>
            	</item>
            </list>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.Level.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="level">Integer value for this level, higher values represent more severe levels.</param>
            <param name="levelName">The string name of this level.</param>
            <param name="displayName">The display name for this level. This may be localized or otherwise different from the name</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Core.Level" /> class with
            the specified level name and value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="level">Integer value for this level, higher values represent more severe levels.</param>
            <param name="levelName">The string name of this level.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Core.Level" /> class with
            the specified level name and value.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.Level.Name">
            <summary>
            Gets the name of this level.
            </summary>
            <value>
            The name of this level.
            </value>
            <remarks>
            <para>
            Gets the name of this level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.Level.Value">
            <summary>
            Gets the value of this level.
            </summary>
            <value>
            The value of this level.
            </value>
            <remarks>
            <para>
            Gets the value of this level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.Level.DisplayName">
            <summary>
            Gets the display name of this level.
            </summary>
            <value>
            The display name of this level.
            </value>
            <remarks>
            <para>
            Gets the display name of this level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.ToString">
            <summary>
            Returns the <see cref="T:System.String" /> representation of the current 
            <see cref="T:log4net.Core.Level" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> representation of the current <see cref="T:log4net.Core.Level" />.
            </returns>
            <remarks>
            <para>
            Returns the level <see cref="P:log4net.Core.Level.Name"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.Equals(System.Object)">
            <summary>
            Compares levels.
            </summary>
            <param name="o">The object to compare against.</param>
            <returns><c>true</c> if the objects are equal.</returns>
            <remarks>
            <para>
            Compares the levels of <see cref="T:log4net.Core.Level" /> instances, and 
            defers to base class if the target object is not a <see cref="T:log4net.Core.Level" />
            instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.GetHashCode">
            <summary>
            Returns a hash code
            </summary>
            <returns>A hash code for the current <see cref="T:log4net.Core.Level" />.</returns>
            <remarks>
            <para>
            Returns a hash code suitable for use in hashing algorithms and data 
            structures like a hash table.
            </para>
            <para>
            Returns the hash code of the level <see cref="P:log4net.Core.Level.Value"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an 
            indication of their relative values.
            </summary>
            <param name="r">A <see cref="T:log4net.Core.Level"/> instance or <see langword="null" /> to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            values compared. The return value has these meanings:
            <list type="table">
            	<listheader>
            		<term>Value</term>
            		<description>Meaning</description>
            	</listheader>
            	<item>
            		<term>Less than zero</term>
            		<description>This instance is less than <paramref name="r" />.</description>
            	</item>
            	<item>
            		<term>Zero</term>
            		<description>This instance is equal to <paramref name="r" />.</description>
            	</item>
            	<item>
            		<term>Greater than zero</term>
            		<description>
            			<para>This instance is greater than <paramref name="r" />.</para>
            			<para>-or-</para>
            			<para><paramref name="r" /> is <see langword="null" />.</para>
            			</description>
            	</item>
            </list>
            </returns>
            <remarks>
            <para>
            <paramref name="r" /> must be an instance of <see cref="T:log4net.Core.Level" /> 
            or <see langword="null" />; otherwise, an exception is thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="r" /> is not a <see cref="T:log4net.Core.Level" />.</exception>
        </member>
        <member name="M:log4net.Core.Level.op_GreaterThan(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is greater than another specified <see cref="T:log4net.Core.Level" />.
            </summary>
            <param name="l">A <see cref="T:log4net.Core.Level" /></param>
            <param name="r">A <see cref="T:log4net.Core.Level" /></param>
            <returns>
            <c>true</c> if <paramref name="l" /> is greater than 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.op_LessThan(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is less than another specified <see cref="T:log4net.Core.Level" />.
            </summary>
            <param name="l">A <see cref="T:log4net.Core.Level" /></param>
            <param name="r">A <see cref="T:log4net.Core.Level" /></param>
            <returns>
            <c>true</c> if <paramref name="l" /> is less than 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.op_GreaterThanOrEqual(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is greater than or equal to another specified <see cref="T:log4net.Core.Level" />.
            </summary>
            <param name="l">A <see cref="T:log4net.Core.Level" /></param>
            <param name="r">A <see cref="T:log4net.Core.Level" /></param>
            <returns>
            <c>true</c> if <paramref name="l" /> is greater than or equal to 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.op_LessThanOrEqual(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is less than or equal to another specified <see cref="T:log4net.Core.Level" />.
            </summary>
            <param name="l">A <see cref="T:log4net.Core.Level" /></param>
            <param name="r">A <see cref="T:log4net.Core.Level" /></param>
            <returns>
            <c>true</c> if <paramref name="l" /> is less than or equal to 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.op_Equality(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Returns a value indicating whether two specified <see cref="T:log4net.Core.Level" /> 
            objects have the same value.
            </summary>
            <param name="l">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
            <param name="r">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
            <returns>
            <c>true</c> if the value of <paramref name="l" /> is the same as the 
            value of <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.op_Inequality(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Returns a value indicating whether two specified <see cref="T:log4net.Core.Level" /> 
            objects have different values.
            </summary>
            <param name="l">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
            <param name="r">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
            <returns>
            <c>true</c> if the value of <paramref name="l" /> is different from
            the value of <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.Compare(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Compares two specified <see cref="T:log4net.Core.Level"/> instances.
            </summary>
            <param name="l">The first <see cref="T:log4net.Core.Level"/> to compare.</param>
            <param name="r">The second <see cref="T:log4net.Core.Level"/> to compare.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            two values compared. The return value has these meanings:
            <list type="table">
            	<listheader>
            		<term>Value</term>
            		<description>Meaning</description>
            	</listheader>
            	<item>
            		<term>Less than zero</term>
            		<description><paramref name="l" /> is less than <paramref name="r" />.</description>
            	</item>
            	<item>
            		<term>Zero</term>
            		<description><paramref name="l" /> is equal to <paramref name="r" />.</description>
            	</item>
            	<item>
            		<term>Greater than zero</term>
            		<description><paramref name="l" /> is greater than <paramref name="r" />.</description>
            	</item>
            </list>
            </returns>
            <remarks>
            <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.Level.Off">
            <summary>
            The <see cref="F:log4net.Core.Level.Off" /> level designates a higher level than all the rest.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Log4Net_Debug">
            <summary>
            The <see cref="F:log4net.Core.Level.Emergency" /> level designates very severe error events. 
            System unusable, emergencies.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Emergency">
            <summary>
            The <see cref="F:log4net.Core.Level.Emergency" /> level designates very severe error events. 
            System unusable, emergencies.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Fatal">
            <summary>
            The <see cref="F:log4net.Core.Level.Fatal" /> level designates very severe error events 
            that will presumably lead the application to abort.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Alert">
            <summary>
            The <see cref="F:log4net.Core.Level.Alert" /> level designates very severe error events. 
            Take immediate action, alerts.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Critical">
            <summary>
            The <see cref="F:log4net.Core.Level.Critical" /> level designates very severe error events. 
            Critical condition, critical.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Severe">
            <summary>
            The <see cref="F:log4net.Core.Level.Severe" /> level designates very severe error events.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Error">
            <summary>
            The <see cref="F:log4net.Core.Level.Error" /> level designates error events that might 
            still allow the application to continue running.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Warn">
            <summary>
            The <see cref="F:log4net.Core.Level.Warn" /> level designates potentially harmful 
            situations.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Notice">
            <summary>
            The <see cref="F:log4net.Core.Level.Notice" /> level designates informational messages 
            that highlight the progress of the application at the highest level.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Info">
            <summary>
            The <see cref="F:log4net.Core.Level.Info" /> level designates informational messages that 
            highlight the progress of the application at coarse-grained level.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Debug">
            <summary>
            The <see cref="F:log4net.Core.Level.Debug" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Fine">
            <summary>
            The <see cref="F:log4net.Core.Level.Fine" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Trace">
            <summary>
            The <see cref="F:log4net.Core.Level.Trace" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Finer">
            <summary>
            The <see cref="F:log4net.Core.Level.Finer" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Verbose">
            <summary>
            The <see cref="F:log4net.Core.Level.Verbose" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Finest">
            <summary>
            The <see cref="F:log4net.Core.Level.Finest" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.All">
            <summary>
            The <see cref="F:log4net.Core.Level.All" /> level designates the lowest level possible.
            </summary>
        </member>
        <member name="T:log4net.Core.LevelCollection">
            <summary>
            A strongly-typed collection of <see cref="T:log4net.Core.Level"/> objects.
            </summary>
            <author>Nicko Cadell</author>
        </member>
        <member name="T:log4net.Core.LevelCollection.ILevelCollectionEnumerator">
            <summary>
            Supports type-safe iteration over a <see cref="T:log4net.Core.LevelCollection"/>.
            </summary>
        </member>
        <member name="P:log4net.Core.LevelCollection.ILevelCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.ILevelCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:log4net.Core.LevelCollection.ILevelCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.ReadOnly(log4net.Core.LevelCollection)">
            <summary>
            Creates a read-only wrapper for a <c>LevelCollection</c> instance.
            </summary>
            <param name="list">list to create a readonly wrapper arround</param>
            <returns>
            A <c>LevelCollection</c> wrapper that is read-only.
            </returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.#ctor">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that has the specified initial capacity.
            </summary>
            <param name="capacity">
            The number of elements that the new <c>LevelCollection</c> is initially capable of storing.
            </param>
        </member>
        <member name="M:log4net.Core.LevelCollection.#ctor(log4net.Core.LevelCollection)">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <c>LevelCollection</c>.
            </summary>
            <param name="c">The <c>LevelCollection</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:log4net.Core.LevelCollection.#ctor(log4net.Core.Level[])">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Core.Level"/> array.
            </summary>
            <param name="a">The <see cref="T:log4net.Core.Level"/> array whose elements are copied to the new list.</param>
        </member>
        <member name="M:log4net.Core.LevelCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Core.Level"/> collection.
            </summary>
            <param name="col">The <see cref="T:log4net.Core.Level"/> collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:log4net.Core.LevelCollection.Tag">
            <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
        </member>
        <member name="F:log4net.Core.LevelCollection.Tag.Default">
            <summary>
            A value
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.#ctor(log4net.Core.LevelCollection.Tag)">
            <summary>
            Allow subclasses to avoid our default constructors
            </summary>
            <param name="tag"></param>
        </member>
        <member name="P:log4net.Core.LevelCollection.Count">
            <summary>
            Gets the number of elements actually contained in the <c>LevelCollection</c>.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.CopyTo(log4net.Core.Level[])">
            <summary>
            Copies the entire <c>LevelCollection</c> to a one-dimensional
            <see cref="T:log4net.Core.Level"/> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:log4net.Core.Level"/> array to copy to.</param>
        </member>
        <member name="M:log4net.Core.LevelCollection.CopyTo(log4net.Core.Level[],System.Int32)">
            <summary>
            Copies the entire <c>LevelCollection</c> to a one-dimensional
            <see cref="T:log4net.Core.Level"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:log4net.Core.Level"/> array to copy to.</param>
            <param name="start">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:log4net.Core.LevelCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <returns>false, because the backing type is an array, which is never thread-safe.</returns>
        </member>
        <member name="P:log4net.Core.LevelCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:log4net.Core.LevelCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:log4net.Core.Level"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.LevelCollection.Add(log4net.Core.Level)">
            <summary>
            Adds a <see cref="T:log4net.Core.Level"/> to the end of the <c>LevelCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Core.Level"/> to be added to the end of the <c>LevelCollection</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.Clear">
            <summary>
            Removes all elements from the <c>LevelCollection</c>.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:log4net.Core.LevelCollection"/>.
            </summary>
            <returns>A new <see cref="T:log4net.Core.LevelCollection"/> with a shallow copy of the collection data.</returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.Contains(log4net.Core.Level)">
            <summary>
            Determines whether a given <see cref="T:log4net.Core.Level"/> is in the <c>LevelCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Core.Level"/> to check for.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the <c>LevelCollection</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.IndexOf(log4net.Core.Level)">
            <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:log4net.Core.Level"/>
            in the <c>LevelCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Core.Level"/> to locate in the <c>LevelCollection</c>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item"/> 
            in the entire <c>LevelCollection</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.Insert(System.Int32,log4net.Core.Level)">
            <summary>
            Inserts an element into the <c>LevelCollection</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:log4net.Core.Level"/> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.LevelCollection.Remove(log4net.Core.Level)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:log4net.Core.Level"/> from the <c>LevelCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Core.Level"/> to remove from the <c>LevelCollection</c>.</param>
            <exception cref="T:System.ArgumentException">
            The specified <see cref="T:log4net.Core.Level"/> was not found in the <c>LevelCollection</c>.
            </exception>
        </member>
        <member name="M:log4net.Core.LevelCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <c>LevelCollection</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="P:log4net.Core.LevelCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
        </member>
        <member name="P:log4net.Core.LevelCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false. The default is false</value>
        </member>
        <member name="M:log4net.Core.LevelCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <c>LevelCollection</c>.
            </summary>
            <returns>An <see cref="T:log4net.Core.LevelCollection.Enumerator"/> for the entire <c>LevelCollection</c>.</returns>
        </member>
        <member name="P:log4net.Core.LevelCollection.Capacity">
            <summary>
            Gets or sets the number of elements the <c>LevelCollection</c> can contain.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.AddRange(log4net.Core.LevelCollection)">
            <summary>
            Adds the elements of another <c>LevelCollection</c> to the current <c>LevelCollection</c>.
            </summary>
            <param name="x">The <c>LevelCollection</c> whose elements should be added to the end of the current <c>LevelCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Core.LevelCollection.Count"/> of the <c>LevelCollection</c>.</returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.AddRange(log4net.Core.Level[])">
            <summary>
            Adds the elements of a <see cref="T:log4net.Core.Level"/> array to the current <c>LevelCollection</c>.
            </summary>
            <param name="x">The <see cref="T:log4net.Core.Level"/> array whose elements should be added to the end of the <c>LevelCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Core.LevelCollection.Count"/> of the <c>LevelCollection</c>.</returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of a <see cref="T:log4net.Core.Level"/> collection to the current <c>LevelCollection</c>.
            </summary>
            <param name="col">The <see cref="T:log4net.Core.Level"/> collection whose elements should be added to the end of the <c>LevelCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Core.LevelCollection.Count"/> of the <c>LevelCollection</c>.</returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="i"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="i"/> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.LevelCollection.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="i"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="i"/> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="T:log4net.Core.LevelCollection.Enumerator">
            <summary>
            Supports simple iteration over a <see cref="T:log4net.Core.LevelCollection"/>.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.Enumerator.#ctor(log4net.Core.LevelCollection)">
            <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="P:log4net.Core.LevelCollection.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:log4net.Core.LevelCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="T:log4net.Core.LevelEvaluator">
            <summary>
            An evaluator that triggers at a threshold level
            </summary>
            <remarks>
            <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)"/>
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold"/>
            level.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Core.LevelEvaluator.m_threshold">
            <summary>
            The threshold for triggering
            </summary>
        </member>
        <member name="M:log4net.Core.LevelEvaluator.#ctor">
            <summary>
            Create a new evaluator using the <see cref="F:log4net.Core.Level.Off"/> threshold.
            </summary>
            <remarks>
            <para>
            Create a new evaluator using the <see cref="F:log4net.Core.Level.Off"/> threshold.
            </para>
            <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)"/>
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold"/>
            level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LevelEvaluator.#ctor(log4net.Core.Level)">
            <summary>
            Create a new evaluator using the specified <see cref="T:log4net.Core.Level"/> threshold.
            </summary>
            <param name="threshold">the threshold to trigger at</param>
            <remarks>
            <para>
            Create a new evaluator using the specified <see cref="T:log4net.Core.Level"/> threshold.
            </para>
            <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)"/>
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold"/>
            level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LevelEvaluator.Threshold">
            <summary>
            the threshold to trigger at
            </summary>
            <value>
            The <see cref="T:log4net.Core.Level"/> that will cause this evaluator to trigger
            </value>
            <remarks>
            <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)"/>
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold"/>
            level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LevelEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
            <summary>
            Is this <paramref name="loggingEvent"/> the triggering event?
            </summary>
            <param name="loggingEvent">The event to check</param>
            <returns>This method returns <c>true</c>, if the event level
            is equal or higher than the <see cref="P:log4net.Core.LevelEvaluator.Threshold"/>. 
            Otherwise it returns <c>false</c></returns>
            <remarks>
            <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)"/>
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold"/>
            level.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.LevelMap">
            <summary>
            Mapping between string name and Level object
            </summary>
            <remarks>
            <para>
            Mapping between string name and <see cref="T:log4net.Core.Level"/> object.
            This mapping is held separately for each <see cref="T:log4net.Repository.ILoggerRepository"/>.
            The level name is case insensitive.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Core.LevelMap.m_mapName2Level">
            <summary>
            Mapping from level name to Level object. The
            level name is case insensitive
            </summary>
        </member>
        <member name="M:log4net.Core.LevelMap.#ctor">
            <summary>
            Construct the level map
            </summary>
            <remarks>
            <para>
            Construct the level map.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LevelMap.Clear">
            <summary>
            Clear the internal maps of all levels
            </summary>
            <remarks>
            <para>
            Clear the internal maps of all levels
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LevelMap.Item(System.String)">
            <summary>
            Lookup a <see cref="T:log4net.Core.Level"/> by name
            </summary>
            <param name="name">The name of the Level to lookup</param>
            <returns>a Level from the map with the name specified</returns>
            <remarks>
            <para>
            Returns the <see cref="T:log4net.Core.Level"/> from the
            map with the name specified. If the no level is
            found then <c>null</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LevelMap.Add(System.String,System.Int32)">
            <summary>
            Create a new Level and add it to the map
            </summary>
            <param name="name">the string to display for the Level</param>
            <param name="value">the level value to give to the Level</param>
            <remarks>
            <para>
            Create a new Level and add it to the map
            </para>
            </remarks>
            <seealso cref="M:Add(string,int,string)"/>
        </member>
        <member name="M:log4net.Core.LevelMap.Add(System.String,System.Int32,System.String)">
            <summary>
            Create a new Level and add it to the map
            </summary>
            <param name="name">the string to display for the Level</param>
            <param name="value">the level value to give to the Level</param>
            <param name="displayName">the display name to give to the Level</param>
            <remarks>
            <para>
            Create a new Level and add it to the map
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LevelMap.Add(log4net.Core.Level)">
            <summary>
            Add a Level to the map
            </summary>
            <param name="level">the Level to add</param>
            <remarks>
            <para>
            Add a Level to the map
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LevelMap.AllLevels">
            <summary>
            Return all possible levels as a list of Level objects.
            </summary>
            <returns>all possible levels as a list of Level objects</returns>
            <remarks>
            <para>
            Return all possible levels as a list of Level objects.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LevelMap.LookupWithDefault(log4net.Core.Level)">
            <summary>
            Lookup a named level from the map
            </summary>
            <param name="defaultLevel">the name of the level to lookup is taken from this level. 
            If the level is not set on the map then this level is added</param>
            <returns>the level in the map with the name specified</returns>
            <remarks>
            <para>
            Lookup a named level from the map. The name of the level to lookup is taken
            from the <see cref="P:log4net.Core.Level.Name"/> property of the <paramref name="defaultLevel"/>
            argument.
            </para>
            <para>
            If no level with the specified name is found then the 
            <paramref name="defaultLevel"/> argument is added to the level map
            and returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.LocationInfo">
            <summary>
            The internal representation of caller location information.
            </summary>
            <remarks>
            <para>
            This class uses the <c>System.Diagnostics.StackTrace</c> class to generate
            a call stack. The caller's information is then extracted from this stack.
            </para>
            <para>
            The <c>System.Diagnostics.StackTrace</c> class is not supported on the 
            .NET Compact Framework 1.0 therefore caller location information is not
            available on that framework.
            </para>
            <para>
            The <c>System.Diagnostics.StackTrace</c> class has this to say about Release builds:
            </para>
            <para>
            "StackTrace information will be most informative with Debug build configurations. 
            By default, Debug builds include debug symbols, while Release builds do not. The 
            debug symbols contain most of the file, method name, line number, and column 
            information used in constructing StackFrame and StackTrace objects. StackTrace 
            might not report as many method calls as expected, due to code transformations 
            that occur during optimization."
            </para>
            <para>
            This means that in a Release build the caller information may be incomplete or may 
            not exist at all! Therefore caller location information cannot be relied upon in a Release build.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.LocationInfo.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LocationInfo" />
            class based on the current thread.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LocationInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="className">The fully qualified class name.</param>
            <param name="methodName">The method name.</param>
            <param name="fileName">The file name.</param>
            <param name="lineNumber">The line number of the method within the file.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LocationInfo" />
            class with the specified data.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LocationInfo.ClassName">
            <summary>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </summary>
            <value>
            The fully qualified class name of the caller making the logging 
            request.
            </value>
            <remarks>
            <para>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LocationInfo.FileName">
            <summary>
            Gets the file name of the caller.
            </summary>
            <value>
            The file name of the caller.
            </value>
            <remarks>
            <para>
            Gets the file name of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LocationInfo.LineNumber">
            <summary>
            Gets the line number of the caller.
            </summary>
            <value>
            The line number of the caller.
            </value>
            <remarks>
            <para>
            Gets the line number of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LocationInfo.MethodName">
            <summary>
            Gets the method name of the caller.
            </summary>
            <value>
            The method name of the caller.
            </value>
            <remarks>
            <para>
            Gets the method name of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LocationInfo.FullInfo">
            <summary>
            Gets all available caller information
            </summary>
            <value>
            All available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c>
            </value>
            <remarks>
            <para>
            Gets all available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c>
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LocationInfo.StackFrames">
            <summary>
            Gets the stack frames from the stack trace of the caller making the log request
            </summary>
        </member>
        <member name="F:log4net.Core.LocationInfo.declaringType">
            <summary>
            The fully qualified type of the LocationInfo class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Core.LocationInfo.NA">
            <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
        </member>
        <member name="T:log4net.Core.LogException">
            <summary>
            Exception base type for log4net.
            </summary>
            <remarks>
            <para>
            This type extends <see cref="T:System.ApplicationException"/>. It
            does not add any new functionality but does differentiate the
            type of exception being thrown.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.LogException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class 
            with serialized data.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.LoggerManager">
            <summary>
            Static manager that controls the creation of repositories
            </summary>
            <remarks>
            <para>
            Static manager that controls the creation of repositories
            </para>
            <para>
            This class is used by the wrapper managers (e.g. <see cref="T:log4net.LogManager"/>)
            to provide access to the <see cref="T:log4net.Core.ILogger"/> objects.
            </para>
            <para>
            This manager also holds the <see cref="T:log4net.Core.IRepositorySelector"/> that is used to
            lookup and create repositories. The selector can be set either programmatically using
            the <see cref="P:log4net.Core.LoggerManager.RepositorySelector"/> property, or by setting the <c>log4net.RepositorySelector</c>
            AppSetting in the applications config file to the fully qualified type name of the
            selector to use. 
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.LoggerManager.#ctor">
            <summary>
            Private constructor to prevent instances. Only static methods should be used.
            </summary>
            <remarks>
            <para>
            Private constructor to prevent instances. Only static methods should be used.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.#cctor">
            <summary>
            Hook the shutdown event
            </summary>
            <remarks>
            <para>
            On the full .NET runtime, the static constructor hooks up the 
            <c>AppDomain.ProcessExit</c> and <c>AppDomain.DomainUnload</c>> events. 
            These are used to shutdown the log4net system as the application exits.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.RegisterAppDomainEvents">
            <summary>
            Register for ProcessExit and DomainUnload events on the AppDomain
            </summary>
            <remarks>
            <para>
            This needs to be in a separate method because the events make
            a LinkDemand for the ControlAppDomain SecurityPermission. Because
            this is a LinkDemand it is demanded at JIT time. Therefore we cannot
            catch the exception in the method itself, we have to catch it in the
            caller.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetLoggerRepository(System.String)">
            <summary>
            Return the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.
            </summary>
            <param name="repository">the repository to lookup in</param>
            <returns>Return the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance</returns>
            <remarks>
            <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified
            by the <paramref name="repository"/> argument.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetLoggerRepository(System.Reflection.Assembly)">
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.</returns>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetRepository(System.String)">
            <summary>
            Return the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.
            </summary>
            <param name="repository">the repository to lookup in</param>
            <returns>Return the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance</returns>
            <remarks>
            <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified
            by the <paramref name="repository"/> argument.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetRepository(System.Reflection.Assembly)">
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.</returns>
            <remarks>
            <para>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.Exists(System.String,System.String)">
            <summary>
            Returns the named logger if it exists.
            </summary>
            <param name="repository">The repository to lookup in.</param>
            <param name="name">The fully qualified logger name to look for.</param>
            <returns>
            The logger found, or <c>null</c> if the named logger does not exist in the
            specified repository.
            </returns>
            <remarks>
            <para>
            If the named logger exists (in the specified repository) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.Exists(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the named logger if it exists.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <param name="name">The fully qualified logger name to look for.</param>
            <returns>
            The logger found, or <c>null</c> if the named logger does not exist in the
            specified assembly's repository.
            </returns>
            <remarks>
            <para>
            If the named logger exists (in the specified assembly's repository) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetCurrentLoggers(System.String)">
            <summary>
            Returns all the currently defined loggers in the specified repository.
            </summary>
            <param name="repository">The repository to lookup in.</param>
            <returns>All the defined loggers.</returns>
            <remarks>
            <para>
            The root logger is <b>not</b> included in the returned array.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetCurrentLoggers(System.Reflection.Assembly)">
            <summary>
            Returns all the currently defined loggers in the specified assembly's repository.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <returns>All the defined loggers.</returns>
            <remarks>
            <para>
            The root logger is <b>not</b> included in the returned array.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetLogger(System.String,System.String)">
            <summary>
            Retrieves or creates a named logger.
            </summary>
            <param name="repository">The repository to lookup in.</param>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
            <remarks>
            <para>
            Retrieves a logger named as the <paramref name="name"/>
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
            <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetLogger(System.Reflection.Assembly,System.String)">
            <summary>
            Retrieves or creates a named logger.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
            <remarks>
            <para>
            Retrieves a logger named as the <paramref name="name"/>
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
            <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetLogger(System.String,System.Type)">
            <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)"/>.
            </summary>
            <param name="repository">The repository to lookup in.</param>
            <param name="type">The <paramref name="type"/> of which the fullname will be used as the name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
            <remarks>
            <para>
            Gets the logger for the fully qualified name of the type specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetLogger(System.Reflection.Assembly,System.Type)">
            <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)"/>.
            </summary>
            <param name="repositoryAssembly">the assembly to use to lookup the repository</param>
            <param name="type">The <paramref name="type"/> of which the fullname will be used as the name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
            <remarks>
            <para>
            Gets the logger for the fully qualified name of the type specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.Shutdown">
            <summary>
            Shuts down the log4net system.
            </summary>
            <remarks>
            <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in all the
            default repositories.
            </para>
            <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
            <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.ShutdownRepository(System.String)">
            <summary>
            Shuts down the repository for the repository specified.
            </summary>
            <param name="repository">The repository to shutdown.</param>
            <remarks>
            <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            repository for the <paramref name="repository"/> specified.
            </para>
            <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
            <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.ShutdownRepository(System.Reflection.Assembly)">
            <summary>
            Shuts down the repository for the repository specified.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <remarks>
            <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            repository for the repository. The repository is looked up using
            the <paramref name="repositoryAssembly"/> specified.
            </para>
            <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
            <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.ResetConfiguration(System.String)">
            <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
            <param name="repository">The repository to reset.</param>
            <remarks>
            <para>
            Resets all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug"/>. Moreover,
            message disabling is set its default "off" value.
            </para>		
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.ResetConfiguration(System.Reflection.Assembly)">
            <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository to reset.</param>
            <remarks>
            <para>
            Resets all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug"/>. Moreover,
            message disabling is set its default "off" value.
            </para>		
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.CreateDomain(System.String)">
            <summary>
            Creates a repository with the specified name.
            </summary>
            <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
            <remarks>
            <para>
            <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
            </para>
            <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository"/> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/> object.
            </para>
            <para>
            The <paramref name="repository"/> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception"/> will be thrown if the repository already exists.
            </para>
            </remarks>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.Core.LoggerManager.CreateRepository(System.String)">
            <summary>
            Creates a repository with the specified name.
            </summary>
            <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
            <remarks>
            <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository"/> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/> object.
            </para>
            <para>
            The <paramref name="repository"/> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception"/> will be thrown if the repository already exists.
            </para>
            </remarks>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.Core.LoggerManager.CreateDomain(System.String,System.Type)">
            <summary>
            Creates a repository with the specified name and repository type.
            </summary>
            <param name="repository">The name of the repository, this must be unique to the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type"/> that implements <see cref="T:log4net.Repository.ILoggerRepository"/>
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
            <remarks>
            <para>
            <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
            </para>
            <para>
            The <paramref name="repository"/> name must be unique. Repositories cannot be redefined.
            An Exception will be thrown if the repository already exists.
            </para>
            </remarks>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.Core.LoggerManager.CreateRepository(System.String,System.Type)">
            <summary>
            Creates a repository with the specified name and repository type.
            </summary>
            <param name="repository">The name of the repository, this must be unique to the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type"/> that implements <see cref="T:log4net.Repository.ILoggerRepository"/>
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
            <remarks>
            <para>
            The <paramref name="repository"/> name must be unique. Repositories cannot be redefined.
            An Exception will be thrown if the repository already exists.
            </para>
            </remarks>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.Core.LoggerManager.CreateDomain(System.Reflection.Assembly,System.Type)">
            <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
            <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type"/> that implements <see cref="T:log4net.Repository.ILoggerRepository"/>
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
            <remarks>
            <para>
            <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
            </para>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)"/> with the
            same assembly specified will return the same repository instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
            <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type"/> that implements <see cref="T:log4net.Repository.ILoggerRepository"/>
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)"/> with the
            same assembly specified will return the same repository instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetAllRepositories">
            <summary>
            Gets an array of all currently defined repositories.
            </summary>
            <returns>An array of all the known <see cref="T:log4net.Repository.ILoggerRepository"/> objects.</returns>
            <remarks>
            <para>
            Gets an array of all currently defined repositories.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggerManager.RepositorySelector">
            <summary>
            Gets or sets the repository selector used by the <see cref="T:log4net.LogManager" />.
            </summary>
            <value>
            The repository selector used by the <see cref="T:log4net.LogManager" />.
            </value>
            <remarks>
            <para>
            The repository selector (<see cref="T:log4net.Core.IRepositorySelector"/>) is used by 
            the <see cref="T:log4net.LogManager"/> to create and select repositories 
            (<see cref="T:log4net.Repository.ILoggerRepository"/>).
            </para>
            <para>
            The caller to <see cref="T:log4net.LogManager"/> supplies either a string name 
            or an assembly (if not supplied the assembly is inferred using 
            <see cref="M:Assembly.GetCallingAssembly()"/>).
            </para>
            <para>
            This context is used by the selector to lookup a specific repository.
            </para>
            <para>
            For the full .NET Framework, the default repository is <c>DefaultRepositorySelector</c>;
            for the .NET Compact Framework <c>CompactRepositorySelector</c> is the default
            repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetVersionInfo">
            <summary>
            Internal method to get pertinent version info.
            </summary>
            <returns>A string of version info.</returns>
        </member>
        <member name="M:log4net.Core.LoggerManager.OnDomainUnload(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:System.AppDomain.DomainUnload"/> event fires
            </summary>
            <param name="sender">the <see cref="T:System.AppDomain"/> that is exiting</param>
            <param name="e">null</param>
            <remarks>
            <para>
            Called when the <see cref="E:System.AppDomain.DomainUnload"/> event fires.
            </para>
            <para>
            When the event is triggered the log4net system is <see cref="M:Shutdown()"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.OnProcessExit(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:System.AppDomain.ProcessExit"/> event fires
            </summary>
            <param name="sender">the <see cref="T:System.AppDomain"/> that is exiting</param>
            <param name="e">null</param>
            <remarks>
            <para>
            Called when the <see cref="E:System.AppDomain.ProcessExit"/> event fires.
            </para>
            <para>
            When the event is triggered the log4net system is <see cref="M:Shutdown()"/>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggerManager.declaringType">
            <summary>
            The fully qualified type of the LoggerManager class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggerManager.s_repositorySelector">
            <summary>
            Initialize the default repository selector
            </summary>
        </member>
        <member name="T:log4net.Core.LoggerWrapperImpl">
            <summary>
            Implementation of the <see cref="T:log4net.Core.ILoggerWrapper"/> interface.
            </summary>
            <remarks>
            <para>
            This class should be used as the base for all wrapper implementations.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.LoggerWrapperImpl.#ctor(log4net.Core.ILogger)">
            <summary>
            Constructs a new wrapper for the specified logger.
            </summary>
            <param name="logger">The logger to wrap.</param>
            <remarks>
            <para>
            Constructs a new wrapper for the specified logger.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggerWrapperImpl.Logger">
            <summary>
            Gets the implementation behind this wrapper object.
            </summary>
            <value>
            The <see cref="T:log4net.Core.ILogger"/> object that this object is implementing.
            </value>
            <remarks>
            <para>
            The <c>Logger</c> object may not be the same object as this object 
            because of logger decorators.
            </para>
            <para>
            This gets the actual underlying objects that is used to process
            the log events.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggerWrapperImpl.m_logger">
            <summary>
            The logger that this object is wrapping
            </summary>
        </member>
        <member name="T:log4net.Core.LoggingEventData">
            <summary>
            Portable data structure used by <see cref="T:log4net.Core.LoggingEvent"/>
            </summary>
            <remarks>
            <para>
            Portable data structure used by <see cref="T:log4net.Core.LoggingEvent"/>
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Core.LoggingEventData.LoggerName">
            <summary>
            The logger name.
            </summary>
            <remarks>
            <para>
            The logger name.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.Level">
            <summary>
            Level of logging event.
            </summary>
            <remarks>
            <para>
            Level of logging event. Level cannot be Serializable
            because it is a flyweight.  Due to its special serialization it
            cannot be declared final either.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.Message">
            <summary>
            The application supplied message.
            </summary>
            <remarks>
            <para>
            The application supplied message of logging event.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.ThreadName">
            <summary>
            The name of thread
            </summary>
            <remarks>
            <para>
            The name of thread in which this logging event was generated
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.TimeStamp">
            <summary>
            Gets or sets the local time the event was logged
            </summary>
            <remarks>
            <para>
            Prefer using the <see cref="P:log4net.Core.LoggingEventData.TimeStampUtc"/> setter, since local time can be ambiguous.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEventData.TimeStampUtc">
            <summary>
            Gets or sets the UTC time the event was logged
            </summary>
            <remarks>
            <para>
            The TimeStamp is stored in the UTC time zone.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.LocationInfo">
            <summary>
            Location information for the caller.
            </summary>
            <remarks>
            <para>
            Location information for the caller.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.UserName">
            <summary>
            String representation of the user
            </summary>
            <remarks>
            <para>
            String representation of the user's windows name,
            like DOMAIN\username
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.Identity">
            <summary>
            String representation of the identity.
            </summary>
            <remarks>
            <para>
            String representation of the current thread's principal identity.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.ExceptionString">
            <summary>
            The string representation of the exception
            </summary>
            <remarks>
            <para>
            The string representation of the exception
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.Domain">
            <summary>
            String representation of the AppDomain.
            </summary>
            <remarks>
            <para>
            String representation of the AppDomain.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.Properties">
            <summary>
            Additional event specific properties
            </summary>
            <remarks>
            <para>
            A logger or an appender may attach additional
            properties to specific events. These properties
            have a string key and an object value.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.FixFlags">
            <summary>
            Flags passed to the <see cref="P:log4net.Core.LoggingEvent.Fix"/> property
            </summary>
            <remarks>
            <para>
            Flags passed to the <see cref="P:log4net.Core.LoggingEvent.Fix"/> property
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Core.FixFlags.Mdc">
            <summary>
            Fix the MDC
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.Ndc">
            <summary>
            Fix the NDC
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.Message">
            <summary>
            Fix the rendered message
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.ThreadName">
            <summary>
            Fix the thread name
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.LocationInfo">
            <summary>
            Fix the callers location information
            </summary>
            <remarks>
            CAUTION: Very slow to generate
            </remarks>
        </member>
        <member name="F:log4net.Core.FixFlags.UserName">
            <summary>
            Fix the callers windows user name
            </summary>
            <remarks>
            CAUTION: Slow to generate
            </remarks>
        </member>
        <member name="F:log4net.Core.FixFlags.Domain">
            <summary>
            Fix the domain friendly name
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.Identity">
            <summary>
            Fix the callers principal name
            </summary>
            <remarks>
            CAUTION: May be slow to generate
            </remarks>
        </member>
        <member name="F:log4net.Core.FixFlags.Exception">
            <summary>
            Fix the exception text
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.Properties">
            <summary>
            Fix the event properties. Active properties must implement <see cref="T:log4net.Core.IFixingRequired"/> in order to be eligible for fixing.
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.None">
            <summary>
            No fields fixed
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.All">
            <summary>
            All fields fixed
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.Partial">
            <summary>
            Partial fields fixed
            </summary>
            <remarks>
            <para>
            This set of partial fields gives good performance. The following fields are fixed:
            </para>
            <list type="bullet">
            <item><description><see cref="F:log4net.Core.FixFlags.Message"/></description></item>
            <item><description><see cref="F:log4net.Core.FixFlags.ThreadName"/></description></item>
            <item><description><see cref="F:log4net.Core.FixFlags.Exception"/></description></item>
            <item><description><see cref="F:log4net.Core.FixFlags.Domain"/></description></item>
            <item><description><see cref="F:log4net.Core.FixFlags.Properties"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="T:log4net.Core.LoggingEvent">
            <summary>
            The internal representation of logging events. 
            </summary>
            <remarks>
            <para>
            When an affirmative decision is made to log then a 
            <see cref="T:log4net.Core.LoggingEvent"/> instance is created. This instance 
            is passed around to the different log4net components.
            </para>
            <para>
            This class is of concern to those wishing to extend log4net.
            </para>
            <para>
            Some of the values in instances of <see cref="T:log4net.Core.LoggingEvent"/>
            are considered volatile, that is the values are correct at the
            time the event is delivered to appenders, but will not be consistent
            at any time afterwards. If an event is to be stored and then processed
            at a later time these volatile values must be fixed by calling
            <see cref="M:FixVolatileData()"/>. There is a performance penalty
            for incurred by calling <see cref="M:FixVolatileData()"/> but it
            is essential to maintaining data consistency.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Douglas de la Torre</author>
            <author>Daniel Cazzulino</author>
        </member>
        <member name="M:log4net.Core.LoggingEvent.#ctor(System.Type,log4net.Repository.ILoggerRepository,System.String,log4net.Core.Level,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class
            from the supplied parameters.
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <param name="repository">The repository this event is logged in.</param>
            <param name="loggerName">The name of the logger of this event.</param>
            <param name="level">The level of this event.</param>
            <param name="message">The message of this event.</param>
            <param name="exception">The exception for this event.</param>
            <remarks>
            <para>
            Except <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/>, <see cref="P:log4net.Core.LoggingEvent.Level"/> and <see cref="P:log4net.Core.LoggingEvent.LoggerName"/>, 
            all fields of <c>LoggingEvent</c> are filled when actually needed. Call
            <see cref="M:FixVolatileData()"/> to cache all data locally
            to prevent inconsistencies.
            </para>
            <para>This method is called by the log4net framework
            to create a logging event.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.#ctor(System.Type,log4net.Repository.ILoggerRepository,log4net.Core.LoggingEventData,log4net.Core.FixFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            using specific data.
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <param name="repository">The repository this event is logged in.</param>
            <param name="data">Data used to initialize the logging event.</param>
            <param name="fixedData">The fields in the <paranref name="data"/> struct that have already been fixed.</param>
            <remarks>
            <para>
            This constructor is provided to allow a <see cref="T:log4net.Core.LoggingEvent" />
            to be created independently of the log4net framework. This can
            be useful if you require a custom serialization scheme.
            </para>
            <para>
            Use the <see cref="M:GetLoggingEventData(FixFlags)"/> method to obtain an 
            instance of the <see cref="T:log4net.Core.LoggingEventData"/> class.
            </para>
            <para>
            The <paramref name="fixedData"/> parameter should be used to specify which fields in the
            <paramref name="data"/> struct have been preset. Fields not specified in the <paramref name="fixedData"/>
            will be captured from the environment if requested or fixed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.#ctor(System.Type,log4net.Repository.ILoggerRepository,log4net.Core.LoggingEventData)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            using specific data.
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <param name="repository">The repository this event is logged in.</param>
            <param name="data">Data used to initialize the logging event.</param>
            <remarks>
            <para>
            This constructor is provided to allow a <see cref="T:log4net.Core.LoggingEvent" />
            to be created independently of the log4net framework. This can
            be useful if you require a custom serialization scheme.
            </para>
            <para>
            Use the <see cref="M:GetLoggingEventData(FixFlags)"/> method to obtain an 
            instance of the <see cref="T:log4net.Core.LoggingEventData"/> class.
            </para>
            <para>
            This constructor sets this objects <see cref="P:log4net.Core.LoggingEvent.Fix"/> flags to <see cref="F:log4net.Core.FixFlags.All"/>,
            this assumes that all the data relating to this event is passed in via the <paramref name="data"/>
            parameter and no other data should be captured from the environment.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.#ctor(log4net.Core.LoggingEventData)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            using specific data.
            </summary>
            <param name="data">Data used to initialize the logging event.</param>
            <remarks>
            <para>
            This constructor is provided to allow a <see cref="T:log4net.Core.LoggingEvent" />
            to be created independently of the log4net framework. This can
            be useful if you require a custom serialization scheme.
            </para>
            <para>
            Use the <see cref="M:GetLoggingEventData(FixFlags)"/> method to obtain an 
            instance of the <see cref="T:log4net.Core.LoggingEventData"/> class.
            </para>
            <para>
            This constructor sets this objects <see cref="P:log4net.Core.LoggingEvent.Fix"/> flags to <see cref="F:log4net.Core.FixFlags.All"/>,
            this assumes that all the data relating to this event is passed in via the <paramref name="data"/>
            parameter and no other data should be captured from the environment.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            with serialized data.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.StartTime">
            <summary>
            Gets the time when the current process started.
            </summary>
            <value>
            This is the time when this process started.
            </value>
            <remarks>
            <para>
            The TimeStamp is stored internally in UTC and converted to the local time zone for this computer.
            </para>
            <para>
            Tries to get the start time for the current process.
            Failing that it returns the time of the first call to
            this property.
            </para>
            <para>
            Note that AppDomains may be loaded and unloaded within the
            same process without the process terminating and therefore
            without the process start time being reset.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.StartTimeUtc">
            <summary>
            Gets the UTC time when the current process started.
            </summary>
            <value>
            This is the UTC time when this process started.
            </value>
            <remarks>
            <para>
            Tries to get the start time for the current process.
            Failing that it returns the time of the first call to
            this property.
            </para>
            <para>
            Note that AppDomains may be loaded and unloaded within the
            same process without the process terminating and therefore
            without the process start time being reset.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.Level">
            <summary>
            Gets the <see cref="P:log4net.Core.LoggingEvent.Level" /> of the logging event.
            </summary>
            <value>
            The <see cref="P:log4net.Core.LoggingEvent.Level" /> of the logging event.
            </value>
            <remarks>
            <para>
            Gets the <see cref="P:log4net.Core.LoggingEvent.Level" /> of the logging event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.TimeStamp">
            <summary>
            Gets the time of the logging event.
            </summary>
            <value>
            The time of the logging event.
            </value>
            <remarks>
            <para>
            The TimeStamp is stored in UTC and converted to the local time zone for this computer.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.TimeStampUtc">
            <summary>
            Gets UTC the time of the logging event.
            </summary>
            <value>
            The UTC time of the logging event.
            </value>
        </member>
        <member name="P:log4net.Core.LoggingEvent.LoggerName">
            <summary>
            Gets the name of the logger that logged the event.
            </summary>
            <value>
            The name of the logger that logged the event.
            </value>
            <remarks>
            <para>
            Gets the name of the logger that logged the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.LocationInformation">
            <summary>
            Gets the location information for this logging event.
            </summary>
            <value>
            The location information for this logging event.
            </value>
            <remarks>
            <para>
            The collected information is cached for future use.
            </para>
            <para>
            See the <see cref="T:log4net.Core.LocationInfo"/> class for more information on
            supported frameworks and the different behavior in Debug and
            Release builds.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.MessageObject">
            <summary>
            Gets the message object used to initialize this event.
            </summary>
            <value>
            The message object used to initialize this event.
            </value>
            <remarks>
            <para>
            Gets the message object used to initialize this event.
            Note that this event may not have a valid message object.
            If the event is serialized the message object will not 
            be transferred. To get the text of the message the
            <see cref="P:log4net.Core.LoggingEvent.RenderedMessage"/> property must be used 
            not this property.
            </para>
            <para>
            If there is no defined message object for this event then
            null will be returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.ExceptionObject">
            <summary>
            Gets the exception object used to initialize this event.
            </summary>
            <value>
            The exception object used to initialize this event.
            </value>
            <remarks>
            <para>
            Gets the exception object used to initialize this event.
            Note that this event may not have a valid exception object.
            If the event is serialized the exception object will not 
            be transferred. To get the text of the exception the
            <see cref="M:log4net.Core.LoggingEvent.GetExceptionString"/> method must be used 
            not this property.
            </para>
            <para>
            If there is no defined exception object for this event then
            null will be returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.Repository">
            <summary>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> that this event was created in.
            </summary>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> that this event was created in.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.EnsureRepository(log4net.Repository.ILoggerRepository)">
            <summary>
            Ensure that the repository is set.
            </summary>
            <param name="repository">the value for the repository</param>
        </member>
        <member name="P:log4net.Core.LoggingEvent.RenderedMessage">
            <summary>
            Gets the message, rendered through the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </summary>
            <value>
            The message rendered through the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </value>
            <remarks>
            <para>
            The collected information is cached for future use.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)">
            <summary>
            Write the rendered message to a TextWriter
            </summary>
            <param name="writer">the writer to write the message to</param>
            <remarks>
            <para>
            Unlike the <see cref="P:log4net.Core.LoggingEvent.RenderedMessage"/> property this method
            does store the message data in the internal cache. Therefore 
            if called only once this method should be faster than the
            <see cref="P:log4net.Core.LoggingEvent.RenderedMessage"/> property, however if the message is
            to be accessed multiple times then the property will be more efficient.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.ThreadName">
            <summary>
            Gets the name of the current thread.  
            </summary>
            <value>
            The name of the current thread, or the thread ID when 
            the name is not available.
            </value>
            <remarks>
            <para>
            The collected information is cached for future use.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.UserName">
            <summary>
            Gets the name of the current user.
            </summary>
            <value>
            The name of the current user, or <c>NOT AVAILABLE</c> when the 
            underlying runtime has no support for retrieving the name of the 
            current user.
            </value>
            <remarks>
            <para>
            Calls <c>WindowsIdentity.GetCurrent().Name</c> to get the name of
            the current windows user.
            </para>
            <para>
            To improve performance, we could cache the string representation of 
            the name, and reuse that as long as the identity stayed constant.  
            Once the identity changed, we would need to re-assign and re-render 
            the string.
            </para>
            <para>
            However, the <c>WindowsIdentity.GetCurrent()</c> call seems to 
            return different objects every time, so the current implementation 
            doesn't do this type of caching.
            </para>
            <para>
            Timing for these operations:
            </para>
            <list type="table">
              <listheader>
                <term>Method</term>
                <description>Results</description>
              </listheader>
              <item>
                <term><c>WindowsIdentity.GetCurrent()</c></term>
                <description>10000 loops, 00:00:00.2031250 seconds</description>
              </item>
              <item>
                <term><c>WindowsIdentity.GetCurrent().Name</c></term>
                <description>10000 loops, 00:00:08.0468750 seconds</description>
              </item>
            </list>
            <para>
            This means we could speed things up almost 40 times by caching the 
            value of the <c>WindowsIdentity.GetCurrent().Name</c> property, since 
            this takes (8.04-0.20) = 7.84375 seconds.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.Identity">
            <summary>
            Gets the identity of the current thread principal.
            </summary>
            <value>
            The string name of the identity of the current thread principal.
            </value>
            <remarks>
            <para>
            Calls <c>System.Threading.Thread.CurrentPrincipal.Identity.Name</c> to get
            the name of the current thread principal.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.Domain">
            <summary>
            Gets the AppDomain friendly name.
            </summary>
            <value>
            The AppDomain friendly name.
            </value>
            <remarks>
            <para>
            Gets the AppDomain friendly name.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.Properties">
            <summary>
            Additional event specific properties.
            </summary>
            <value>
            Additional event specific properties.
            </value>
            <remarks>
            <para>
            A logger or an appender may attach additional
            properties to specific events. These properties
            have a string key and an object value.
            </para>
            <para>
            This property is for events that have been added directly to
            this event. The aggregate properties (which include these
            event properties) can be retrieved using <see cref="M:log4net.Core.LoggingEvent.LookupProperty(System.String)"/>
            and <see cref="M:log4net.Core.LoggingEvent.GetProperties"/>.
            </para>
            <para>
            Once the properties have been fixed <see cref="P:log4net.Core.LoggingEvent.Fix"/> this property
            returns the combined cached properties. This ensures that updates to
            this property are always reflected in the underlying storage. When
            returning the combined properties there may be more keys in the
            Dictionary than expected.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.Fix">
            <summary>
            The fixed fields in this event
            </summary>
            <value>
            The set of fields that are fixed in this event
            </value>
            <remarks>
            <para>
            Fields will not be fixed if they have previously been fixed.
            It is not possible to 'unfix' a field.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> provided.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
            <remarks>
            <para>
            The data in this event must be fixed before it can be serialized.
            </para>
            <para>
            The <see cref="M:FixVolatileData()"/> method must be called during the
            <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)"/> method call if this event 
            is to be used outside that method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.GetLoggingEventData">
            <summary>
            Gets the portable data for this <see cref="T:log4net.Core.LoggingEvent" />.
            </summary>
            <returns>The <see cref="T:log4net.Core.LoggingEventData"/> for this event.</returns>
            <remarks>
            <para>
            A new <see cref="T:log4net.Core.LoggingEvent"/> can be constructed using a
            <see cref="T:log4net.Core.LoggingEventData"/> instance.
            </para>
            <para>
            Does a <see cref="F:log4net.Core.FixFlags.Partial"/> fix of the data
            in the logging event before returning the event data.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.GetLoggingEventData(log4net.Core.FixFlags)">
            <summary>
            Gets the portable data for this <see cref="T:log4net.Core.LoggingEvent" />.
            </summary>
            <param name="fixFlags">The set of data to ensure is fixed in the LoggingEventData</param>
            <returns>The <see cref="T:log4net.Core.LoggingEventData"/> for this event.</returns>
            <remarks>
            <para>
            A new <see cref="T:log4net.Core.LoggingEvent"/> can be constructed using a
            <see cref="T:log4net.Core.LoggingEventData"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.GetExceptionStrRep">
            <summary>
            Returns this event's exception's rendered using the 
            <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </summary>
            <returns>
            This event's exception's rendered using the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </returns>
            <remarks>
            <para>
            <b>Obsolete. Use <see cref="M:log4net.Core.LoggingEvent.GetExceptionString"/> instead.</b>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.GetExceptionString">
            <summary>
            Returns this event's exception's rendered using the 
            <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </summary>
            <returns>
            This event's exception's rendered using the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </returns>
            <remarks>
            <para>
            Returns this event's exception's rendered using the 
            <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.FixVolatileData">
            <summary>
            Fix instance fields that hold volatile data.
            </summary>
            <remarks>
            <para>
            Some of the values in instances of <see cref="T:log4net.Core.LoggingEvent"/>
            are considered volatile, that is the values are correct at the
            time the event is delivered to appenders, but will not be consistent
            at any time afterwards. If an event is to be stored and then processed
            at a later time these volatile values must be fixed by calling
            <see cref="M:FixVolatileData()"/>. There is a performance penalty
            incurred by calling <see cref="M:FixVolatileData()"/> but it
            is essential to maintaining data consistency.
            </para>
            <para>
            Calling <see cref="M:FixVolatileData()"/> is equivalent to
            calling <see cref="M:FixVolatileData(bool)"/> passing the parameter
            <c>false</c>.
            </para>
            <para>
            See <see cref="M:FixVolatileData(bool)"/> for more
            information.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.FixVolatileData(System.Boolean)">
            <summary>
            Fixes instance fields that hold volatile data.
            </summary>
            <param name="fastButLoose">Set to <c>true</c> to not fix data that takes a long time to fix.</param>
            <remarks>
            <para>
            Some of the values in instances of <see cref="T:log4net.Core.LoggingEvent"/>
            are considered volatile, that is the values are correct at the
            time the event is delivered to appenders, but will not be consistent
            at any time afterwards. If an event is to be stored and then processed
            at a later time these volatile values must be fixed by calling
            <see cref="M:FixVolatileData()"/>. There is a performance penalty
            for incurred by calling <see cref="M:FixVolatileData()"/> but it
            is essential to maintaining data consistency.
            </para>
            <para>
            The <paramref name="fastButLoose"/> param controls the data that
            is fixed. Some of the data that can be fixed takes a long time to 
            generate, therefore if you do not require those settings to be fixed
            they can be ignored by setting the <paramref name="fastButLoose"/> param
            to <c>true</c>. This setting will ignore the <see cref="P:log4net.Core.LoggingEvent.LocationInformation"/>
            and <see cref="P:log4net.Core.LoggingEvent.UserName"/> settings.
            </para>
            <para>
            Set <paramref name="fastButLoose"/> to <c>false</c> to ensure that all 
            settings are fixed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.FixVolatileData(log4net.Core.FixFlags)">
            <summary>
            Fix the fields specified by the <see cref="T:log4net.Core.FixFlags"/> parameter
            </summary>
            <param name="flags">the fields to fix</param>
            <remarks>
            <para>
            Only fields specified in the <paramref name="flags"/> will be fixed.
            Fields will not be fixed if they have previously been fixed.
            It is not possible to 'unfix' a field.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.LookupProperty(System.String)">
            <summary>
            Lookup a composite property in this event
            </summary>
            <param name="key">the key for the property to lookup</param>
            <returns>the value for the property</returns>
            <remarks>
            <para>
            This event has composite properties that combine together properties from
            several different contexts in the following order:
            <list type="definition">
            	<item>
            		<term>this events properties</term>
            		<description>
            		This event has <see cref="P:log4net.Core.LoggingEvent.Properties"/> that can be set. These 
            		properties are specific to this event only.
            		</description>
            	</item>
            	<item>
            		<term>the thread properties</term>
            		<description>
            		The <see cref="P:log4net.ThreadContext.Properties"/> that are set on the current
            		thread. These properties are shared by all events logged on this thread.
            		</description>
            	</item>
            	<item>
            		<term>the global properties</term>
            		<description>
            		The <see cref="P:log4net.GlobalContext.Properties"/> that are set globally. These 
            		properties are shared by all the threads in the AppDomain.
            		</description>
            	</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.GetProperties">
            <summary>
            Get all the composite properties in this event
            </summary>
            <returns>the <see cref="T:log4net.Util.PropertiesDictionary"/> containing all the properties</returns>
            <remarks>
            <para>
            See <see cref="M:log4net.Core.LoggingEvent.LookupProperty(System.String)"/> for details of the composite properties 
            stored by the event.
            </para>
            <para>
            This method returns a single <see cref="T:log4net.Util.PropertiesDictionary"/> containing all the
            properties defined for this event.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_data">
            <summary>
            The internal logging event data.
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_compositeProperties">
            <summary>
            The internal logging event data.
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_eventProperties">
            <summary>
            The internal logging event data.
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_callerStackBoundaryDeclaringType">
            <summary>
            The fully qualified Type of the calling 
            logger class in the stack frame (i.e. the declaring type of the method).
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_message">
            <summary>
            The application supplied message of logging event.
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_thrownException">
            <summary>
            The exception that was thrown.
            </summary>
            <remarks>
            This is not serialized. The string representation
            is serialized instead.
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_repository">
            <summary>
            The repository that generated the logging event
            </summary>
            <remarks>
            This is not serialized.
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_fixFlags">
            <summary>
            The fix state for this event
            </summary>
            <remarks>
            These flags indicate which fields have been fixed.
            Not serialized.
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_cacheUpdatable">
            <summary>
            Indicated that the internal cache is updateable (ie not fixed)
            </summary>
            <remarks>
            This is a seperate flag to m_fixFlags as it allows incrementel fixing and simpler
            changes in the caching strategy.
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEvent.HostNameProperty">
            <summary>
            The key into the Properties map for the host name value.
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.IdentityProperty">
            <summary>
            The key into the Properties map for the thread identity value.
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.UserNameProperty">
            <summary>
            The key into the Properties map for the user name value.
            </summary>
        </member>
        <member name="T:log4net.Core.LogImpl">
            <summary>
            Implementation of <see cref="T:log4net.ILog"/> wrapper interface.
            </summary>
            <remarks>
            <para>
            This implementation of the <see cref="T:log4net.ILog"/> interface
            forwards to the <see cref="T:log4net.Core.ILogger"/> held by the base class.
            </para>
            <para>
            This logger has methods to allow the caller to log at the following
            levels:
            </para>
            <list type="definition">
              <item>
                <term>DEBUG</term>
                <description>
                The <see cref="M:Debug(object)"/> and <see cref="M:DebugFormat(string, object[])"/> methods log messages
                at the <c>DEBUG</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap"/>. The default value
                for this level is <see cref="F:log4net.Core.Level.Debug"/>. The <see cref="P:log4net.Core.LogImpl.IsDebugEnabled"/>
                property tests if this level is enabled for logging.
                </description>
              </item>
              <item>
                <term>INFO</term>
                <description>
                The <see cref="M:Info(object)"/> and <see cref="M:InfoFormat(string, object[])"/> methods log messages
                at the <c>INFO</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap"/>. The default value
                for this level is <see cref="F:log4net.Core.Level.Info"/>. The <see cref="P:log4net.Core.LogImpl.IsInfoEnabled"/>
                property tests if this level is enabled for logging.
                </description>
              </item>
              <item>
                <term>WARN</term>
                <description>
                The <see cref="M:Warn(object)"/> and <see cref="M:WarnFormat(string, object[])"/> methods log messages
                at the <c>WARN</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap"/>. The default value
                for this level is <see cref="F:log4net.Core.Level.Warn"/>. The <see cref="P:log4net.Core.LogImpl.IsWarnEnabled"/>
                property tests if this level is enabled for logging.
                </description>
              </item>
              <item>
                <term>ERROR</term>
                <description>
                The <see cref="M:Error(object)"/> and <see cref="M:ErrorFormat(string, object[])"/> methods log messages
                at the <c>ERROR</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap"/>. The default value
                for this level is <see cref="F:log4net.Core.Level.Error"/>. The <see cref="P:log4net.Core.LogImpl.IsErrorEnabled"/>
                property tests if this level is enabled for logging.
                </description>
              </item>
              <item>
                <term>FATAL</term>
                <description>
                The <see cref="M:Fatal(object)"/> and <see cref="M:FatalFormat(string, object[])"/> methods log messages
                at the <c>FATAL</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap"/>. The default value
                for this level is <see cref="F:log4net.Core.Level.Fatal"/>. The <see cref="P:log4net.Core.LogImpl.IsFatalEnabled"/>
                property tests if this level is enabled for logging.
                </description>
              </item>
            </list>
            <para>
            The values for these levels and their semantic meanings can be changed by 
            configuring the <see cref="P:log4net.Repository.ILoggerRepository.LevelMap"/> for the repository.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.LogImpl.#ctor(log4net.Core.ILogger)">
            <summary>
            Construct a new wrapper for the specified logger.
            </summary>
            <param name="logger">The logger to wrap.</param>
            <remarks>
            <para>
            Construct a new wrapper for the specified logger.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.ReloadLevels(log4net.Repository.ILoggerRepository)">
            <summary>
            Virtual method called when the configuration of the repository changes
            </summary>
            <param name="repository">the repository holding the levels</param>
            <remarks>
            <para>
            Virtual method called when the configuration of the repository changes
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Debug(System.Object)">
            <summary>
            Logs a message object with the <c>DEBUG</c> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>DEBUG</c>
            enabled by comparing the level of this logger with the 
            <c>DEBUG</c> level. If this logger is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
            <para>
            <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Debug(object,Exception)"/> form instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Debug(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>DEBUG</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            Logs a message object with the <c>DEBUG</c> level including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="exception"/> passed
            as a parameter.
            </para>
            <para>
            See the <see cref="M:Debug(object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)"/>
        </member>
        <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:DebugFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Debug(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:DebugFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Debug(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:DebugFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Debug(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:DebugFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Debug(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Debug(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Info(System.Object)">
            <summary>
            Logs a message object with the <c>INFO</c> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by comparing the level of this logger with the 
            <c>INFO</c> level. If this logger is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para>
            <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Info(object,Exception)"/> form instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Info(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>INFO</c> level.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            Logs a message object with the <c>INFO</c> level including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="exception"/> 
            passed as a parameter.
            </para>
            <para>
            See the <see cref="M:Info(object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Info(object)"/>
        </member>
        <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:InfoFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Info(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:InfoFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Info(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:InfoFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Info(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:InfoFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Info(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Info(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Warn(System.Object)">
            <summary>
            Logs a message object with the <c>WARN</c> level.
            </summary>
            <param name="message">the message object to log</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by comparing the level of this logger with the 
            <c>WARN</c> level. If this logger is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger and 
            also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
            <para>
            <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <see cref="T:System.Exception"/> but no
            stack trace. To print a stack trace use the 
            <see cref="M:Warn(object,Exception)"/> form instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Warn(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>WARN</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            Logs a message object with the <c>WARN</c> level including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="exception"/> 
            passed as a parameter.
            </para>
            <para>
            See the <see cref="M:Warn(object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Warn(object)"/>
        </member>
        <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:WarnFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Warn(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:WarnFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Warn(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:WarnFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Warn(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:WarnFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Warn(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Warn(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Error(System.Object)">
            <summary>
            Logs a message object with the <c>ERROR</c> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by comparing the level of this logger with the 
            <c>ERROR</c> level. If this logger is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger and 
            also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
            <para>
            <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <see cref="T:System.Exception"/> but no
            stack trace. To print a stack trace use the 
            <see cref="M:Error(object,Exception)"/> form instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Error(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>ERROR</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            Logs a message object with the <c>ERROR</c> level including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="exception"/> 
            passed as a parameter.
            </para>
            <para>
            See the <see cref="M:Error(object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Error(object)"/>
        </member>
        <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:ErrorFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Error(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:ErrorFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Error(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:ErrorFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Error(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:ErrorFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Error(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Error(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Fatal(System.Object)">
            <summary>
            Logs a message object with the <c>FATAL</c> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by comparing the level of this logger with the 
            <c>FATAL</c> level. If this logger is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger and 
            also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
            <para>
            <b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> to this
            method will print the name of the <see cref="T:System.Exception"/> but no
            stack trace. To print a stack trace use the 
            <see cref="M:Fatal(object,Exception)"/> form instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>FATAL</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            Logs a message object with the <c>FATAL</c> level including
            the stack trace of the <see cref="T:System.Exception"/> <paramref name="exception"/> 
            passed as a parameter.
            </para>
            <para>
            See the <see cref="M:Fatal(object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object)"/>
        </member>
        <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:FatalFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Fatal(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:FatalFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Fatal(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:FatalFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Fatal(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            format provider. To specify a localized provider use the
            <see cref="M:FatalFormat(IFormatProvider,string,object[])"/> method.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Fatal(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])"/> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Fatal(object)"/>
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LogImpl.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the <c>DEBUG</c>
            level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <c>DEBUG</c> events,
            <c>false</c> otherwise.
            </value>
            <remarks>
            <para>
            This function is intended to lessen the computational cost of
            disabled log debug statements.
            </para>
            <para>
            For some <c>log</c> Logger object, when you write:
            </para>
            <code lang="C#">
            log.Debug("This is entry number: " + i );
            </code>
            <para>
            You incur the cost constructing the message, concatenation in
            this case, regardless of whether the message is logged or not.
            </para>
            <para>
            If you are worried about speed, then you should write:
            </para>
            <code lang="C#">
            if (log.IsDebugEnabled())
            { 
             log.Debug("This is entry number: " + i );
            }
            </code>
            <para>
            This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>log</c>. On
            the other hand, if the <c>log</c> is debug enabled, you
            will incur the cost of evaluating whether the logger is debug
            enabled twice. Once in <c>IsDebugEnabled</c> and once in
            the <c>Debug</c>.  This is an insignificant overhead
            since evaluating a logger takes about 1% of the time it
            takes to actually log.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LogImpl.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <c>INFO</c> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <c>INFO</c> events,
            <c>false</c> otherwise.
            </value>
            <remarks>
            <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled"/> for more information and examples 
            of using this method.
            </para>
            </remarks>
            <seealso cref="P:log4net.Core.LogImpl.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.Core.LogImpl.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <c>WARN</c> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <c>WARN</c> events,
            <c>false</c> otherwise.
            </value>
            <remarks>
            <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled"/> for more information and examples 
            of using this method.
            </para>
            </remarks>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.Core.LogImpl.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <c>ERROR</c> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <c>ERROR</c> events,
            <c>false</c> otherwise.
            </value>
            <remarks>
            <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled"/> for more information and examples of using this method.
            </para>
            </remarks>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.Core.LogImpl.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <c>FATAL</c> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <c>FATAL</c> events,
            <c>false</c> otherwise.
            </value>
            <remarks>
            <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled"/> for more information and examples of using this method.
            </para>
            </remarks>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.Core.LogImpl.LoggerRepositoryConfigurationChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <see cref="E:log4net.Repository.ILoggerRepository.ConfigurationChanged"/> event
            </summary>
            <param name="sender">the repository</param>
            <param name="e">Empty</param>
        </member>
        <member name="F:log4net.Core.LogImpl.ThisDeclaringType">
            <summary>
            The fully qualified name of this declaring type not the type of any subclass.
            </summary>
        </member>
        <member name="T:log4net.Core.MethodItem">
            <summary>
            provides method information without actually referencing a System.Reflection.MethodBase
            as that would require that the containing assembly is loaded.
            </summary>
            
        </member>
        <member name="M:log4net.Core.MethodItem.#ctor">
            <summary>
            constructs a method item for an unknown method.
            </summary>
        </member>
        <member name="M:log4net.Core.MethodItem.#ctor(System.String)">
            <summary>
            constructs a method item from the name of the method.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:log4net.Core.MethodItem.#ctor(System.String,System.String[])">
            <summary>
            constructs a method item from the name of the method and its parameters.
            </summary>
            <param name="name"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:log4net.Core.MethodItem.#ctor(System.Reflection.MethodBase)">
            <summary>
            constructs a method item from a method base by determining the method name and its parameters.
            </summary>
            <param name="methodBase"></param>
        </member>
        <member name="P:log4net.Core.MethodItem.Name">
            <summary>
            Gets the method name of the caller making the logging 
            request.
            </summary>
            <value>
            The method name of the caller making the logging 
            request.
            </value>
            <remarks>
            <para>
            Gets the method name of the caller making the logging 
            request.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.MethodItem.Parameters">
            <summary>
            Gets the method parameters of the caller making
            the logging request.
            </summary>
            <value>
            The method parameters of the caller making
            the logging request
            </value>
            <remarks>
            <para>
            Gets the method parameters of the caller making
            the logging request.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.MethodItem.declaringType">
            <summary>
            The fully qualified type of the StackFrameItem class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Core.MethodItem.NA">
            <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
        </member>
        <member name="T:log4net.Core.SecurityContext">
            <summary>
            A SecurityContext used by log4net when interacting with protected resources
            </summary>
            <remarks>
            <para>
            A SecurityContext used by log4net when interacting with protected resources
            for example with operating system services. This can be used to impersonate
            a principal that has been granted privileges on the system resources.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Core.SecurityContext.Impersonate(System.Object)">
            <summary>
            Impersonate this SecurityContext
            </summary>
            <param name="state">State supplied by the caller</param>
            <returns>An <see cref="T:System.IDisposable"/> instance that will
            revoke the impersonation of this SecurityContext, or <c>null</c></returns>
            <remarks>
            <para>
            Impersonate this security context. Further calls on the current
            thread should now be made in the security context provided
            by this object. When the <see cref="T:System.IDisposable"/> result 
            <see cref="M:System.IDisposable.Dispose"/> method is called the security
            context of the thread should be reverted to the state it was in
            before <see cref="M:log4net.Core.SecurityContext.Impersonate(System.Object)"/> was called.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.SecurityContextProvider">
            <summary>
            The <see cref="T:log4net.Core.SecurityContextProvider"/> providers default <see cref="T:log4net.Core.SecurityContext"/> instances.
            </summary>
            <remarks>
            <para>
            A configured component that interacts with potentially protected system
            resources uses a <see cref="T:log4net.Core.SecurityContext"/> to provide the elevated
            privileges required. If the <see cref="T:log4net.Core.SecurityContext"/> object has
            been not been explicitly provided to the component then the component
            will request one from this <see cref="T:log4net.Core.SecurityContextProvider"/>.
            </para>
            <para>
            By default the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider"/> is
            an instance of <see cref="T:log4net.Core.SecurityContextProvider"/> which returns only
            <see cref="T:log4net.Util.NullSecurityContext"/> objects. This is a reasonable default
            where the privileges required are not know by the system.
            </para>
            <para>
            This default behavior can be overridden by subclassing the <see cref="T:log4net.Core.SecurityContextProvider"/>
            and overriding the <see cref="M:log4net.Core.SecurityContextProvider.CreateSecurityContext(System.Object)"/> method to return
            the desired <see cref="T:log4net.Core.SecurityContext"/> objects. The default provider
            can be replaced by programmatically setting the value of the 
            <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider"/> property.
            </para>
            <para>
            An alternative is to use the <c>log4net.Config.SecurityContextProviderAttribute</c>
            This attribute can be applied to an assembly in the same way as the
            <c>log4net.Config.XmlConfiguratorAttribute"</c>. The attribute takes
            the type to use as the <see cref="T:log4net.Core.SecurityContextProvider"/> as an argument.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Core.SecurityContextProvider.s_defaultProvider">
            <summary>
            The default provider
            </summary>
        </member>
        <member name="P:log4net.Core.SecurityContextProvider.DefaultProvider">
            <summary>
            Gets or sets the default SecurityContextProvider
            </summary>
            <value>
            The default SecurityContextProvider
            </value>
            <remarks>
            <para>
            The default provider is used by configured components that
            require a <see cref="T:log4net.Core.SecurityContext"/> and have not had one
            given to them.
            </para>
            <para>
            By default this is an instance of <see cref="T:log4net.Core.SecurityContextProvider"/>
            that returns <see cref="T:log4net.Util.NullSecurityContext"/> objects.
            </para>
            <para>
            The default provider can be set programmatically by setting
            the value of this property to a sub class of <see cref="T:log4net.Core.SecurityContextProvider"/>
            that has the desired behavior.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.SecurityContextProvider.#ctor">
            <summary>
            Protected default constructor to allow subclassing
            </summary>
            <remarks>
            <para>
            Protected default constructor to allow subclassing
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.SecurityContextProvider.CreateSecurityContext(System.Object)">
            <summary>
            Create a SecurityContext for a consumer
            </summary>
            <param name="consumer">The consumer requesting the SecurityContext</param>
            <returns>An impersonation context</returns>
            <remarks>
            <para>
            The default implementation is to return a <see cref="T:log4net.Util.NullSecurityContext"/>.
            </para>
            <para>
            Subclasses should override this method to provide their own
            behavior.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.StackFrameItem">
            <summary>
            provides stack frame information without actually referencing a System.Diagnostics.StackFrame
            as that would require that the containing assembly is loaded.
            </summary>
            
        </member>
        <member name="M:log4net.Core.StackFrameItem.#ctor(System.Diagnostics.StackFrame)">
            <summary>
            returns a stack frame item from a stack frame. This 
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="P:log4net.Core.StackFrameItem.ClassName">
            <summary>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </summary>
            <value>
            The fully qualified class name of the caller making the logging 
            request.
            </value>
            <remarks>
            <para>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.StackFrameItem.FileName">
            <summary>
            Gets the file name of the caller.
            </summary>
            <value>
            The file name of the caller.
            </value>
            <remarks>
            <para>
            Gets the file name of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.StackFrameItem.LineNumber">
            <summary>
            Gets the line number of the caller.
            </summary>
            <value>
            The line number of the caller.
            </value>
            <remarks>
            <para>
            Gets the line number of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.StackFrameItem.Method">
            <summary>
            Gets the method name of the caller.
            </summary>
            <value>
            The method name of the caller.
            </value>
            <remarks>
            <para>
            Gets the method name of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.StackFrameItem.FullInfo">
            <summary>
            Gets all available caller information
            </summary>
            <value>
            All available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c>
            </value>
            <remarks>
            <para>
            Gets all available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c>
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.StackFrameItem.declaringType">
            <summary>
            The fully qualified type of the StackFrameItem class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Core.StackFrameItem.NA">
            <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
        </member>
        <member name="T:log4net.Core.TimeEvaluator">
            <summary>
            An evaluator that triggers after specified number of seconds.
            </summary>
            <remarks>
            <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval"/> has passed since last check.
            </para>
            </remarks>
            <author>Robert Sevcik</author>
        </member>
        <member name="F:log4net.Core.TimeEvaluator.m_interval">
            <summary>
            The time threshold for triggering in seconds. Zero means it won't trigger at all.
            </summary>
        </member>
        <member name="F:log4net.Core.TimeEvaluator.m_lastTimeUtc">
            <summary>
            The UTC time of last check. This gets updated when the object is created and when the evaluator triggers.
            </summary>
        </member>
        <member name="F:log4net.Core.TimeEvaluator.DEFAULT_INTERVAL">
            <summary>
            The default time threshold for triggering in seconds. Zero means it won't trigger at all.
            </summary>
        </member>
        <member name="M:log4net.Core.TimeEvaluator.#ctor">
            <summary>
            Create a new evaluator using the <see cref="F:log4net.Core.TimeEvaluator.DEFAULT_INTERVAL"/> time threshold in seconds.
            </summary>
            <remarks>
            <para>
            Create a new evaluator using the <see cref="F:log4net.Core.TimeEvaluator.DEFAULT_INTERVAL"/> time threshold in seconds.
            </para>
            <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval"/> has passed since last check.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.TimeEvaluator.#ctor(System.Int32)">
            <summary>
            Create a new evaluator using the specified time threshold in seconds.
            </summary>
            <param name="interval">
            The time threshold in seconds to trigger after.
            Zero means it won't trigger at all.
            </param>
            <remarks>
            <para>
            Create a new evaluator using the specified time threshold in seconds.
            </para>
            <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval"/> has passed since last check.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.TimeEvaluator.Interval">
            <summary>
            The time threshold in seconds to trigger after
            </summary>
            <value>
            The time threshold in seconds to trigger after.
            Zero means it won't trigger at all.
            </value>
            <remarks>
            <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval"/> has passed since last check.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.TimeEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
            <summary>
            Is this <paramref name="loggingEvent"/> the triggering event?
            </summary>
            <param name="loggingEvent">The event to check</param>
            <returns>This method returns <c>true</c>, if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval"/> has passed since last check.. 
            Otherwise it returns <c>false</c></returns>
            <remarks>
            <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval"/> has passed since last check.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.WrapperCreationHandler">
            <summary>
            Delegate used to handle creation of new wrappers.
            </summary>
            <param name="logger">The logger to wrap in a wrapper.</param>
            <remarks>
            <para>
            Delegate used to handle creation of new wrappers. This delegate
            is called from the <see cref="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)"/>
            method to construct the wrapper for the specified logger.
            </para>
            <para>
            The delegate to use is supplied to the <see cref="T:log4net.Core.WrapperMap"/>
            constructor.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.WrapperMap">
            <summary>
            Maps between logger objects and wrapper objects.
            </summary>
            <remarks>
            <para>
            This class maintains a mapping between <see cref="T:log4net.Core.ILogger"/> objects and
            <see cref="T:log4net.Core.ILoggerWrapper"/> objects. Use the <see cref="M:log4net.Core.WrapperMap.GetWrapper(log4net.Core.ILogger)"/> method to 
            lookup the <see cref="T:log4net.Core.ILoggerWrapper"/> for the specified <see cref="T:log4net.Core.ILogger"/>.
            </para>
            <para>
            New wrapper instances are created by the <see cref="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)"/>
            method. The default behavior is for this method to delegate construction
            of the wrapper to the <see cref="T:log4net.Core.WrapperCreationHandler"/> delegate supplied
            to the constructor. This allows specialization of the behavior without
            requiring subclassing of this type.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.WrapperMap.#ctor(log4net.Core.WrapperCreationHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.WrapperMap" />
            </summary>
            <param name="createWrapperHandler">The handler to use to create the wrapper objects.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Core.WrapperMap" /> class with 
            the specified handler to create the wrapper objects.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.WrapperMap.GetWrapper(log4net.Core.ILogger)">
            <summary>
            Gets the wrapper object for the specified logger.
            </summary>
            <returns>The wrapper object for the specified logger</returns>
            <remarks>
            <para>
            If the logger is null then the corresponding wrapper is null.
            </para>
            <para>
            Looks up the wrapper it it has previously been requested and
            returns it. If the wrapper has never been requested before then
            the <see cref="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)"/> virtual method is
            called.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.WrapperMap.Repositories">
            <summary>
            Gets the map of logger repositories.
            </summary>
            <value>
            Map of logger repositories.
            </value>
            <remarks>
            <para>
            Gets the hashtable that is keyed on <see cref="T:log4net.Repository.ILoggerRepository"/>. The
            values are hashtables keyed on <see cref="T:log4net.Core.ILogger"/> with the
            value being the corresponding <see cref="T:log4net.Core.ILoggerWrapper"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)">
            <summary>
            Creates the wrapper object for the specified logger.
            </summary>
            <param name="logger">The logger to wrap in a wrapper.</param>
            <returns>The wrapper object for the logger.</returns>
            <remarks>
            <para>
            This implementation uses the <see cref="T:log4net.Core.WrapperCreationHandler"/>
            passed to the constructor to create the wrapper. This method
            can be overridden in a subclass.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.WrapperMap.RepositoryShutdown(log4net.Repository.ILoggerRepository)">
            <summary>
            Called when a monitored repository shutdown event is received.
            </summary>
            <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository"/> that is shutting down</param>
            <remarks>
            <para>
            This method is called when a <see cref="T:log4net.Repository.ILoggerRepository"/> that this
            <see cref="T:log4net.Core.WrapperMap"/> is holding loggers for has signaled its shutdown
            event <see cref="E:log4net.Repository.ILoggerRepository.ShutdownEvent"/>. The default
            behavior of this method is to release the references to the loggers
            and their wrappers generated for this repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.WrapperMap.ILoggerRepository_Shutdown(System.Object,System.EventArgs)">
            <summary>
            Event handler for repository shutdown event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="F:log4net.Core.WrapperMap.m_repositories">
            <summary>
            Map of logger repositories to hashtables of ILogger to ILoggerWrapper mappings
            </summary>
        </member>
        <member name="F:log4net.Core.WrapperMap.m_createWrapperHandler">
            <summary>
            The handler to use to create the extension wrapper objects.
            </summary>
        </member>
        <member name="F:log4net.Core.WrapperMap.m_shutdownHandler">
            <summary>
            Internal reference to the delegate used to register for repository shutdown events.
            </summary>
        </member>
        <member name="T:log4net.DateFormatter.AbsoluteTimeDateFormatter">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as <c>"HH:mm:ss,fff"</c>.
            </summary>
            <remarks>
            <para>
            Formats a <see cref="T:System.DateTime"/> in the format <c>"HH:mm:ss,fff"</c> for example, <c>"15:49:37,459"</c>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Renders the date into a string. Format is <c>"HH:mm:ss"</c>.
            </summary>
            <param name="dateToFormat">The date to render into a string.</param>
            <param name="buffer">The string builder to write to.</param>
            <remarks>
            <para>
            Subclasses should override this method to render the date
            into a string using a precision up to the second. This method
            will be called at most once per second and the result will be
            reused if it is needed again during the same second.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)">
            <summary>
            Renders the date into a string. Format is "HH:mm:ss,fff".
            </summary>
            <param name="dateToFormat">The date to render into a string.</param>
            <param name="writer">The writer to write to.</param>
            <remarks>
            <para>
            Uses the <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)"/> method to generate the
            time string up to the seconds and then appends the current
            milliseconds. The results from <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)"/> are
            cached and <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)"/> is called at most once
            per second.
            </para>
            <para>
            Sub classes should override <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)"/>
            rather than <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)"/>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.AbsoluteTimeDateFormat">
            <summary>
            String constant used to specify AbsoluteTimeDateFormat in layouts. Current value is <b>ABSOLUTE</b>.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.DateAndTimeDateFormat">
            <summary>
            String constant used to specify DateTimeDateFormat in layouts.  Current value is <b>DATE</b>.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.Iso8601TimeDateFormat">
            <summary>
            String constant used to specify ISO8601DateFormat in layouts. Current value is <b>ISO8601</b>.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.s_lastTimeToTheSecond">
            <summary>
            Last stored time with precision up to the second.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.s_lastTimeBuf">
            <summary>
            Last stored time with precision up to the second, formatted
            as a string.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.s_lastTimeStrings">
            <summary>
            Last stored time with precision up to the second, formatted
            as a string.
            </summary>
        </member>
        <member name="T:log4net.DateFormatter.DateTimeDateFormatter">
            <summary>
            Formats a <see cref="T:System.DateTime"/> as <c>"dd MMM yyyy HH:mm:ss,fff"</c>
            </summary>
            <remarks>
            <para>
            Formats a <see cref="T:System.DateTime"/> in the format 
            <c>"dd MMM yyyy HH:mm:ss,fff"</c> for example, 
            <c>"06 Nov 1994 15:49:37,459"</c>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Angelika Schnagl</author>
        </member>
        <member name="M:log4net.DateFormatter.DateTimeDateFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.DateFormatter.DateTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Formats the date without the milliseconds part
            </summary>
            <param name="dateToFormat">The date to format.</param>
            <param name="buffer">The string builder to write to.</param>
            <remarks>
            <para>
            Formats a DateTime in the format <c>"dd MMM yyyy HH:mm:ss"</c>
            for example, <c>"06 Nov 1994 15:49:37"</c>.
            </para>
            <para>
            The base class will append the <c>",fff"</c> milliseconds section.
            This method will only be called at most once per second.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.DateFormatter.DateTimeDateFormatter.m_dateTimeFormatInfo">
            <summary>
            The format info for the invariant culture.
            </summary>
        </member>
        <member name="T:log4net.DateFormatter.IDateFormatter">
            <summary>
            Render a <see cref="T:System.DateTime"/> as a string.
            </summary>
            <remarks>
            <para>
            Interface to abstract the rendering of a <see cref="T:System.DateTime"/>
            instance into a string.
            </para>
            <para>
            The <see cref="M:log4net.DateFormatter.IDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)"/> method is used to render the
            date to a text writer.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.DateFormatter.IDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)">
            <summary>
            Formats the specified date as a string.
            </summary>
            <param name="dateToFormat">The date to format.</param>
            <param name="writer">The writer to write to.</param>
            <remarks>
            <para>
            Format the <see cref="T:System.DateTime"/> as a string and write it
            to the <see cref="T:System.IO.TextWriter"/> provided.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.DateFormatter.Iso8601DateFormatter">
            <summary>
            Formats the <see cref="T:System.DateTime"/> as <c>"yyyy-MM-dd HH:mm:ss,fff"</c>.
            </summary>
            <remarks>
            <para>
            Formats the <see cref="T:System.DateTime"/> specified as a string: <c>"yyyy-MM-dd HH:mm:ss,fff"</c>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.DateFormatter.Iso8601DateFormatter.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.DateFormatter.Iso8601DateFormatter" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.DateFormatter.Iso8601DateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Formats the date without the milliseconds part
            </summary>
            <param name="dateToFormat">The date to format.</param>
            <param name="buffer">The string builder to write to.</param>
            <remarks>
            <para>
            Formats the date specified as a string: <c>"yyyy-MM-dd HH:mm:ss"</c>.
            </para>
            <para>
            The base class will append the <c>",fff"</c> milliseconds section.
            This method will only be called at most once per second.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.DateFormatter.SimpleDateFormatter">
            <summary>
            Formats the <see cref="T:System.DateTime"/> using the <see cref="M:DateTime.ToString(string, IFormatProvider)"/> method.
            </summary>
            <remarks>
            <para>
            Formats the <see cref="T:System.DateTime"/> using the <see cref="T:System.DateTime"/> <see cref="M:DateTime.ToString(string, IFormatProvider)"/> method.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.DateFormatter.SimpleDateFormatter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="format">The format string.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.DateFormatter.SimpleDateFormatter" /> class 
            with the specified format string.
            </para>
            <para>
            The format string must be compatible with the options
            that can be supplied to <see cref="M:DateTime.ToString(string, IFormatProvider)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.DateFormatter.SimpleDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)">
            <summary>
            Formats the date using <see cref="M:DateTime.ToString(string, IFormatProvider)"/>.
            </summary>
            <param name="dateToFormat">The date to convert to a string.</param>
            <param name="writer">The writer to write to.</param>
            <remarks>
            <para>
            Uses the date format string supplied to the constructor to call
            the <see cref="M:DateTime.ToString(string, IFormatProvider)"/> method to format the date.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.DateFormatter.SimpleDateFormatter.m_formatString">
            <summary>
            The format string used to format the <see cref="T:System.DateTime" />.
            </summary>
            <remarks>
            <para>
            The format string must be compatible with the options
            that can be supplied to <see cref="M:DateTime.ToString(string, IFormatProvider)"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.DenyAllFilter">
            <summary>
            This filter drops all <see cref="T:log4net.Core.LoggingEvent"/>. 
            </summary>
            <remarks>
            <para>
            You can add this filter to the end of a filter chain to
            switch from the default "accept all unless instructed otherwise"
            filtering behavior to a "deny all unless instructed otherwise"
            behavior.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Filter.DenyAllFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Filter.DenyAllFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Always returns the integer constant <see cref="F:log4net.Filter.FilterDecision.Deny"/>
            </summary>
            <param name="loggingEvent">the LoggingEvent to filter</param>
            <returns>Always returns <see cref="F:log4net.Filter.FilterDecision.Deny"/></returns>
            <remarks>
            <para>
            Ignores the event being logged and just returns
            <see cref="F:log4net.Filter.FilterDecision.Deny"/>. This can be used to change the default filter
            chain behavior from <see cref="F:log4net.Filter.FilterDecision.Accept"/> to <see cref="F:log4net.Filter.FilterDecision.Deny"/>. This filter
            should only be used as the last filter in the chain
            as any further filters will be ignored!
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.FilterDecision">
            <summary>
            The return result from <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)"/>
            </summary>
            <remarks>
            <para>
            The return result from <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)"/>
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Filter.FilterDecision.Deny">
            <summary>
            The log event must be dropped immediately without 
            consulting with the remaining filters, if any, in the chain.
            </summary>
        </member>
        <member name="F:log4net.Filter.FilterDecision.Neutral">
            <summary>
            This filter is neutral with respect to the log event. 
            The remaining filters, if any, should be consulted for a final decision.
            </summary>
        </member>
        <member name="F:log4net.Filter.FilterDecision.Accept">
            <summary>
            The log event must be logged immediately without 
            consulting with the remaining filters, if any, in the chain.
            </summary>
        </member>
        <member name="T:log4net.Filter.FilterSkeleton">
            <summary>
            Subclass this type to implement customized logging event filtering
            </summary>
            <remarks>
            <para>
            Users should extend this class to implement customized logging
            event filtering. Note that <see cref="T:log4net.Repository.Hierarchy.Logger"/> and 
            <see cref="T:log4net.Appender.AppenderSkeleton"/>, the parent class of all standard
            appenders, have built-in filtering rules. It is suggested that you
            first use and understand the built-in rules before rushing to write
            your own custom filters.
            </para>
            <para>
            This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:log4net.Filter.FilterSkeleton.Decide(log4net.Core.LoggingEvent)"/>
            method of each filter is called sequentially, in the order of their 
            addition to the chain.
            </para>
            <para>
            The <see cref="M:log4net.Filter.FilterSkeleton.Decide(log4net.Core.LoggingEvent)"/> method must return one
            of the integer constants <see cref="F:log4net.Filter.FilterDecision.Deny"/>, 
            <see cref="F:log4net.Filter.FilterDecision.Neutral"/> or <see cref="F:log4net.Filter.FilterDecision.Accept"/>.
            </para>
            <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Deny"/> is returned, then the log event is dropped 
            immediately without consulting with the remaining filters.
            </para>
            <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Neutral"/> is returned, then the next filter
            in the chain is consulted. If there are no more filters in the
            chain, then the log event is logged. Thus, in the presence of no
            filters, the default behavior is to log all logging events.
            </para>
            <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Accept"/> is returned, then the log
            event is logged without consulting the remaining filters.
            </para>
            <para>
            The philosophy of log4net filters is largely inspired from the
            Linux ipchains.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Filter.FilterSkeleton.m_next">
            <summary>
            Points to the next filter in the filter chain.
            </summary>
            <remarks>
            <para>
            See <see cref="P:log4net.Filter.FilterSkeleton.Next"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.FilterSkeleton.ActivateOptions">
            <summary>
            Initialize the filter with the options set
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Filter.FilterSkeleton.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Filter.FilterSkeleton.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Filter.FilterSkeleton.ActivateOptions"/> must be called again.
            </para>
            <para>
            Typically filter's options become active immediately on set, 
            however this method must still be called. 
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.FilterSkeleton.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Decide if the <see cref="T:log4net.Core.LoggingEvent"/> should be logged through an appender.
            </summary>
            <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent"/> to decide upon</param>
            <returns>The decision of the filter</returns>
            <remarks>
            <para>
            If the decision is <see cref="F:log4net.Filter.FilterDecision.Deny"/>, then the event will be
            dropped. If the decision is <see cref="F:log4net.Filter.FilterDecision.Neutral"/>, then the next
            filter, if any, will be invoked. If the decision is <see cref="F:log4net.Filter.FilterDecision.Accept"/> then
            the event will be logged without consulting with other filters in
            the chain.
            </para>
            <para>
            This method is marked <c>abstract</c> and must be implemented
            in a subclass.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.FilterSkeleton.Next">
            <summary>
            Property to get and set the next filter
            </summary>
            <value>
            The next filter in the chain
            </value>
            <remarks>
            <para>
            Filters are typically composed into chains. This property allows the next filter in 
            the chain to be accessed.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.IFilter">
            <summary>
            Implement this interface to provide customized logging event filtering
            </summary>
            <remarks>
            <para>
            Users should implement this interface to implement customized logging
            event filtering. Note that <see cref="T:log4net.Repository.Hierarchy.Logger"/> and 
            <see cref="T:log4net.Appender.AppenderSkeleton"/>, the parent class of all standard
            appenders, have built-in filtering rules. It is suggested that you
            first use and understand the built-in rules before rushing to write
            your own custom filters.
            </para>
            <para>
            This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)"/>
            method of each filter is called sequentially, in the order of their 
            addition to the chain.
            </para>
            <para>
            The <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)"/> method must return one
            of the integer constants <see cref="F:log4net.Filter.FilterDecision.Deny"/>, 
            <see cref="F:log4net.Filter.FilterDecision.Neutral"/> or <see cref="F:log4net.Filter.FilterDecision.Accept"/>.
            </para>
            <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Deny"/> is returned, then the log event is dropped 
            immediately without consulting with the remaining filters.
            </para>
            <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Neutral"/> is returned, then the next filter
            in the chain is consulted. If there are no more filters in the
            chain, then the log event is logged. Thus, in the presence of no
            filters, the default behavior is to log all logging events.
            </para>
            <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Accept"/> is returned, then the log
            event is logged without consulting the remaining filters.
            </para>
            <para>
            The philosophy of log4net filters is largely inspired from the
            Linux ipchains.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Decide if the logging event should be logged through an appender.
            </summary>
            <param name="loggingEvent">The LoggingEvent to decide upon</param>
            <returns>The decision of the filter</returns>
            <remarks>
            <para>
            If the decision is <see cref="F:log4net.Filter.FilterDecision.Deny"/>, then the event will be
            dropped. If the decision is <see cref="F:log4net.Filter.FilterDecision.Neutral"/>, then the next
            filter, if any, will be invoked. If the decision is <see cref="F:log4net.Filter.FilterDecision.Accept"/> then
            the event will be logged without consulting with other filters in
            the chain.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.IFilter.Next">
            <summary>
            Property to get and set the next filter
            </summary>
            <value>
            The next filter in the chain
            </value>
            <remarks>
            <para>
            Filters are typically composed into chains. This property allows the next filter in 
            the chain to be accessed.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.LevelMatchFilter">
            <summary>
            This is a very simple filter based on <see cref="T:log4net.Core.Level"/> matching.
            </summary>
            <remarks>
            <para>
            The filter admits two options <see cref="P:log4net.Filter.LevelMatchFilter.LevelToMatch"/> and
            <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch"/>. If there is an exact match between the value
            of the <see cref="P:log4net.Filter.LevelMatchFilter.LevelToMatch"/> option and the <see cref="T:log4net.Core.Level"/> of the 
            <see cref="T:log4net.Core.LoggingEvent"/>, then the <see cref="M:log4net.Filter.LevelMatchFilter.Decide(log4net.Core.LoggingEvent)"/> method returns <see cref="F:log4net.Filter.FilterDecision.Accept"/> in 
            case the <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch"/> option value is set
            to <c>true</c>, if it is <c>false</c> then 
            <see cref="F:log4net.Filter.FilterDecision.Deny"/> is returned. If the <see cref="T:log4net.Core.Level"/> does not match then
            the result will be <see cref="F:log4net.Filter.FilterDecision.Neutral"/>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Filter.LevelMatchFilter.m_acceptOnMatch">
            <summary>
            flag to indicate if the filter should <see cref="F:log4net.Filter.FilterDecision.Accept"/> on a match
            </summary>
        </member>
        <member name="F:log4net.Filter.LevelMatchFilter.m_levelToMatch">
            <summary>
            the <see cref="T:log4net.Core.Level"/> to match against
            </summary>
        </member>
        <member name="M:log4net.Filter.LevelMatchFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch">
            <summary>
            <see cref="F:log4net.Filter.FilterDecision.Accept"/> when matching <see cref="P:log4net.Filter.LevelMatchFilter.LevelToMatch"/>
            </summary>
            <remarks>
            <para>
            The <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch"/> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level"/> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept"/> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Deny"/> the event.
            </para>
            <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept"/> the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.LevelMatchFilter.LevelToMatch">
            <summary>
            The <see cref="T:log4net.Core.Level"/> that the filter will match
            </summary>
            <remarks>
            <para>
            The level that this filter will attempt to match against the 
            <see cref="T:log4net.Core.LoggingEvent"/> level. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.LevelMatchFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Tests if the <see cref="T:log4net.Core.Level"/> of the logging event matches that of the filter
            </summary>
            <param name="loggingEvent">the event to filter</param>
            <returns>see remarks</returns>
            <remarks>
            <para>
            If the <see cref="T:log4net.Core.Level"/> of the event matches the level of the
            filter then the result of the function depends on the
            value of <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch"/>. If it is true then
            the function will return <see cref="F:log4net.Filter.FilterDecision.Accept"/>, it it is false then it
            will return <see cref="F:log4net.Filter.FilterDecision.Deny"/>. If the <see cref="T:log4net.Core.Level"/> does not match then
            the result will be <see cref="F:log4net.Filter.FilterDecision.Neutral"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.LevelRangeFilter">
            <summary>
            This is a simple filter based on <see cref="T:log4net.Core.Level"/> matching.
            </summary>
            <remarks>
            <para>
            The filter admits three options <see cref="P:log4net.Filter.LevelRangeFilter.LevelMin"/> and <see cref="P:log4net.Filter.LevelRangeFilter.LevelMax"/>
            that determine the range of priorities that are matched, and
            <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch"/>. If there is a match between the range
            of priorities and the <see cref="T:log4net.Core.Level"/> of the <see cref="T:log4net.Core.LoggingEvent"/>, then the 
            <see cref="M:log4net.Filter.LevelRangeFilter.Decide(log4net.Core.LoggingEvent)"/> method returns <see cref="F:log4net.Filter.FilterDecision.Accept"/> in case the <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch"/> 
            option value is set to <c>true</c>, if it is <c>false</c>
            then <see cref="F:log4net.Filter.FilterDecision.Deny"/> is returned. If there is no match, <see cref="F:log4net.Filter.FilterDecision.Deny"/> is returned.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Filter.LevelRangeFilter.m_acceptOnMatch">
            <summary>
            Flag to indicate the behavior when matching a <see cref="T:log4net.Core.Level"/>
            </summary>
        </member>
        <member name="F:log4net.Filter.LevelRangeFilter.m_levelMin">
            <summary>
            the minimum <see cref="T:log4net.Core.Level"/> value to match
            </summary>
        </member>
        <member name="F:log4net.Filter.LevelRangeFilter.m_levelMax">
            <summary>
            the maximum <see cref="T:log4net.Core.Level"/> value to match
            </summary>
        </member>
        <member name="M:log4net.Filter.LevelRangeFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch">
            <summary>
            <see cref="F:log4net.Filter.FilterDecision.Accept"/> when matching <see cref="P:log4net.Filter.LevelRangeFilter.LevelMin"/> and <see cref="P:log4net.Filter.LevelRangeFilter.LevelMax"/>
            </summary>
            <remarks>
            <para>
            The <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch"/> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level"/> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept"/> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Neutral"/> the event.
            </para>
            <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept"/> the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.LevelRangeFilter.LevelMin">
            <summary>
            Set the minimum matched <see cref="T:log4net.Core.Level"/>
            </summary>
            <remarks>
            <para>
            The minimum level that this filter will attempt to match against the 
            <see cref="T:log4net.Core.LoggingEvent"/> level. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.LevelRangeFilter.LevelMax">
            <summary>
            Sets the maximum matched <see cref="T:log4net.Core.Level"/>
            </summary>
            <remarks>
            <para>
            The maximum level that this filter will attempt to match against the 
            <see cref="T:log4net.Core.LoggingEvent"/> level. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.LevelRangeFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Check if the event should be logged.
            </summary>
            <param name="loggingEvent">the logging event to check</param>
            <returns>see remarks</returns>
            <remarks>
            <para>
            If the <see cref="T:log4net.Core.Level"/> of the logging event is outside the range
            matched by this filter then <see cref="F:log4net.Filter.FilterDecision.Deny"/>
            is returned. If the <see cref="T:log4net.Core.Level"/> is matched then the value of
            <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch"/> is checked. If it is true then
            <see cref="F:log4net.Filter.FilterDecision.Accept"/> is returned, otherwise
            <see cref="F:log4net.Filter.FilterDecision.Neutral"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.LoggerMatchFilter">
            <summary>
            Simple filter to match a string in the event's logger name.
            </summary>
            <remarks>
            <para>
            The works very similar to the <see cref="T:log4net.Filter.LevelMatchFilter"/>. It admits two 
            options <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch"/> and <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch"/>. If the 
            <see cref="P:log4net.Core.LoggingEvent.LoggerName"/> of the <see cref="T:log4net.Core.LoggingEvent"/> starts 
            with the value of the <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch"/> option, then the 
            <see cref="M:log4net.Filter.LoggerMatchFilter.Decide(log4net.Core.LoggingEvent)"/> method returns <see cref="F:log4net.Filter.FilterDecision.Accept"/> in 
            case the <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch"/> option value is set to <c>true</c>, 
            if it is <c>false</c> then <see cref="F:log4net.Filter.FilterDecision.Deny"/> is returned.
            </para>
            </remarks>
            <author>Daniel Cazzulino</author>
        </member>
        <member name="F:log4net.Filter.LoggerMatchFilter.m_acceptOnMatch">
            <summary>
            Flag to indicate the behavior when we have a match
            </summary>
        </member>
        <member name="F:log4net.Filter.LoggerMatchFilter.m_loggerToMatch">
            <summary>
            The logger name string to substring match against the event
            </summary>
        </member>
        <member name="M:log4net.Filter.LoggerMatchFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch">
            <summary>
            <see cref="F:log4net.Filter.FilterDecision.Accept"/> when matching <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch"/>
            </summary>
            <remarks>
            <para>
            The <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch"/> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level"/> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept"/> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Deny"/> the event.
            </para>
            <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept"/> the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch">
            <summary>
            The <see cref="P:log4net.Core.LoggingEvent.LoggerName"/> that the filter will match
            </summary>
            <remarks>
            <para>
            This filter will attempt to match this value against logger name in
            the following way. The match will be done against the beginning of the
            logger name (using <see cref="M:String.StartsWith(string)"/>). The match is
            case sensitive. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.LoggerMatchFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Check if this filter should allow the event to be logged
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>see remarks</returns>
            <remarks>
            <para>
            The rendered message is matched against the <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch"/>.
            If the <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch"/> equals the beginning of 
            the incoming <see cref="P:log4net.Core.LoggingEvent.LoggerName"/> (<see cref="M:String.StartsWith(string)"/>)
            then a match will have occurred. If no match occurs
            this function will return <see cref="F:log4net.Filter.FilterDecision.Neutral"/>
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch"/> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterDecision.Accept"/> is returned otherwise
            <see cref="F:log4net.Filter.FilterDecision.Deny"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.MdcFilter">
            <summary>
            Simple filter to match a keyed string in the <see cref="T:log4net.MDC"/>
            </summary>
            <remarks>
            <para>
            Simple filter to match a keyed string in the <see cref="T:log4net.MDC"/>
            </para>
            <para>
            As the MDC has been replaced with layered properties the
            <see cref="T:log4net.Filter.PropertyFilter"/> should be used instead.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="T:log4net.Filter.NdcFilter">
            <summary>
            Simple filter to match a string in the <see cref="T:log4net.NDC"/>
            </summary>
            <remarks>
            <para>
            Simple filter to match a string in the <see cref="T:log4net.NDC"/>
            </para>
            <para>
            As the MDC has been replaced with named stacks stored in the
            properties collections the <see cref="T:log4net.Filter.PropertyFilter"/> should 
            be used instead.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Filter.NdcFilter.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Sets the <see cref="P:log4net.Filter.PropertyFilter.Key"/> to <c>"NDC"</c>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.PropertyFilter">
            <summary>
            Simple filter to match a string an event property
            </summary>
            <remarks>
            <para>
            Simple filter to match a string in the value for a
            specific event property
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Filter.PropertyFilter.m_key">
            <summary>
            The key to use to lookup the string from the event properties
            </summary>
        </member>
        <member name="M:log4net.Filter.PropertyFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:log4net.Filter.PropertyFilter.Key">
            <summary>
            The key to lookup in the event properties and then match against.
            </summary>
            <remarks>
            <para>
            The key name to use to lookup in the properties map of the
            <see cref="T:log4net.Core.LoggingEvent"/>. The match will be performed against 
            the value of this property if it exists.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.PropertyFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Check if this filter should allow the event to be logged
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>see remarks</returns>
            <remarks>
            <para>
            The event property for the <see cref="P:log4net.Filter.PropertyFilter.Key"/> is matched against 
            the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch"/>.
            If the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch"/> occurs as a substring within
            the property value then a match will have occurred. If no match occurs
            this function will return <see cref="F:log4net.Filter.FilterDecision.Neutral"/>
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch"/> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterDecision.Accept"/> is returned otherwise
            <see cref="F:log4net.Filter.FilterDecision.Deny"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.StringMatchFilter">
            <summary>
            Simple filter to match a string in the rendered message
            </summary>
            <remarks>
            <para>
            Simple filter to match a string in the rendered message
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Filter.StringMatchFilter.m_acceptOnMatch">
            <summary>
            Flag to indicate the behavior when we have a match
            </summary>
        </member>
        <member name="F:log4net.Filter.StringMatchFilter.m_stringToMatch">
            <summary>
            The string to substring match against the message
            </summary>
        </member>
        <member name="F:log4net.Filter.StringMatchFilter.m_stringRegexToMatch">
            <summary>
            A string regex to match
            </summary>
        </member>
        <member name="F:log4net.Filter.StringMatchFilter.m_regexToMatch">
            <summary>
            A regex object to match (generated from m_stringRegexToMatch)
            </summary>
        </member>
        <member name="M:log4net.Filter.StringMatchFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Filter.StringMatchFilter.ActivateOptions">
            <summary>
            Initialize and precompile the Regex if required
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Filter.StringMatchFilter.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Filter.StringMatchFilter.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Filter.StringMatchFilter.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.StringMatchFilter.AcceptOnMatch">
            <summary>
            <see cref="F:log4net.Filter.FilterDecision.Accept"/> when matching <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch"/> or <see cref="P:log4net.Filter.StringMatchFilter.RegexToMatch"/>
            </summary>
            <remarks>
            <para>
            The <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch"/> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level"/> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept"/> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Neutral"/> the event.
            </para>
            <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept"/> the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.StringMatchFilter.StringToMatch">
            <summary>
            Sets the static string to match
            </summary>
            <remarks>
            <para>
            The string that will be substring matched against
            the rendered message. If the message contains this
            string then the filter will match. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch"/>.
            </para>
            <para>
            One of <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch"/> or <see cref="P:log4net.Filter.StringMatchFilter.RegexToMatch"/>
            must be specified.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.StringMatchFilter.RegexToMatch">
            <summary>
            Sets the regular expression to match
            </summary>
            <remarks>
            <para>
            The regular expression pattern that will be matched against
            the rendered message. If the message matches this
            pattern then the filter will match. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch"/>.
            </para>
            <para>
            One of <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch"/> or <see cref="P:log4net.Filter.StringMatchFilter.RegexToMatch"/>
            must be specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.StringMatchFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Check if this filter should allow the event to be logged
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>see remarks</returns>
            <remarks>
            <para>
            The rendered message is matched against the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch"/>.
            If the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch"/> occurs as a substring within
            the message then a match will have occurred. If no match occurs
            this function will return <see cref="F:log4net.Filter.FilterDecision.Neutral"/>
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch"/> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterDecision.Accept"/> is returned otherwise
            <see cref="F:log4net.Filter.FilterDecision.Deny"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.GlobalContext">
            <summary>
            The log4net Global Context.
            </summary>
            <remarks>
            <para>
            The <c>GlobalContext</c> provides a location for global debugging 
            information to be stored.
            </para>
            <para>
            The global context has a properties map and these properties can 
            be included in the output of log messages. The <see cref="T:log4net.Layout.PatternLayout"/>
            supports selecting and outputing these properties.
            </para>
            <para>
            By default the <c>log4net:HostName</c> property is set to the name of 
            the current machine.
            </para>
            </remarks>
            <example>
            <code lang="C#">
            GlobalContext.Properties["hostname"] = Environment.MachineName;
            </code>
            </example>
            <threadsafety static="true" instance="true" />
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.GlobalContext.#ctor">
            <summary>
            Private Constructor. 
            </summary>
            <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
        </member>
        <member name="P:log4net.GlobalContext.Properties">
            <summary>
            The global properties map.
            </summary>
            <value>
            The global properties map.
            </value>
            <remarks>
            <para>
            The global properties map.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.GlobalContext.s_properties">
            <summary>
            The global context properties instance
            </summary>
        </member>
        <member name="T:log4net.ILog">
            <summary>
            The ILog interface is use by application to log messages into
            the log4net framework.
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:log4net.LogManager"/> to obtain logger instances
            that implement this interface. The <see cref="M:LogManager.GetLogger(Assembly,Type)"/>
            static method is used to get logger instances.
            </para>
            <para>
            This class contains methods for logging at different levels and also
            has properties for determining if those logging levels are
            enabled in the current configuration.
            </para>
            <para>
            This interface can be implemented in different ways. This documentation
            specifies reasonable behavior that a caller can expect from the actual
            implementation, however different implementations reserve the right to
            do things differently.
            </para>
            </remarks>
            <example>Simple example of logging messages
            <code lang="C#">
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code>
            </example>
            <seealso cref="T:log4net.LogManager"/>
            <seealso cref="M:LogManager.GetLogger(Assembly, Type)"/>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.ILog.Debug(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Debug"/> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>DEBUG</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Debug"/> level. If this logger is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Debug(object,Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:Debug(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:Debug(object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.ILog.DebugFormat(System.String,System.Object[])">
            <overloads>Log a formatted string with the <see cref="F:log4net.Core.Level.Debug"/> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Debug(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.ILog.DebugFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Debug(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.ILog.DebugFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Debug(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.ILog.DebugFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Debug(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Debug(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.ILog.Info(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Info"/> level.</overloads>
            <summary>
            Logs a message object with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <remarks>
            <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Info"/> level. If this logger is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Info(object,Exception)"/> form instead.
            </para>
            </remarks>
            <param name="message">The message object to log.</param>
            <seealso cref="M:Info(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.ILog.Info(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>INFO</c> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:Info(object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Info(object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.ILog.InfoFormat(System.String,System.Object[])">
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Info(object)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Info(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.ILog.InfoFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Info(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Info(object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.ILog.InfoFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Info(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Info(object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.ILog.InfoFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Info(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Info(object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Info(object)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Info(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.ILog.Warn(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Warn"/> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <remarks>
            <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Warn"/> level. If this logger is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Warn(object,Exception)"/> form instead.
            </para>
            </remarks>
            <param name="message">The message object to log.</param>
            <seealso cref="M:Warn(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:Warn(object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Warn(object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.ILog.WarnFormat(System.String,System.Object[])">
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Warn(object)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Warn(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.ILog.WarnFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Warn(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Warn(object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.ILog.WarnFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Warn(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Warn(object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.ILog.WarnFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Warn(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Warn(object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Warn(object)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Warn(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.ILog.Error(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Error"/> level.</overloads>
            <summary>
            Logs a message object with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Error"/> level. If this logger is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Error(object,Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:Error(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.ILog.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:Error(object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Error(object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object[])">
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Error(object)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Error(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Error(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Error(object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Error(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Error(object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Error(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Error(object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Error(object)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Error(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.ILog.Fatal(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Fatal"/> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <remarks>
            <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Fatal"/> level. If this logger is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Fatal(object,Exception)"/> form instead.
            </para>
            </remarks>
            <param name="message">The message object to log.</param>
            <seealso cref="M:Fatal(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:Fatal(object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.ILog.FatalFormat(System.String,System.Object[])">
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Fatal(object)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.ILog.FatalFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Fatal(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.ILog.FatalFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Fatal(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.ILog.FatalFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Fatal(object,Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:Fatal(object)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object,Exception)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="P:log4net.ILog.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Debug"/> events, <c>false</c> otherwise.
            </value>
            <remarks>
            <para>
            This function is intended to lessen the computational cost of
            disabled log debug statements.
            </para>
            <para> For some ILog interface <c>log</c>, when you write:</para>
            <code lang="C#">
            log.Debug("This is entry number: " + i );
            </code>
            <para>
            You incur the cost constructing the message, string construction and concatenation in
            this case, regardless of whether the message is logged or not.
            </para>
            <para>
            If you are worried about speed (who isn't), then you should write:
            </para>
            <code lang="C#">
            if (log.IsDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
            <para>
            This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>log</c>. On
            the other hand, if the <c>log</c> is debug enabled, you
            will incur the cost of evaluating whether the logger is debug
            enabled twice. Once in <see cref="P:log4net.ILog.IsDebugEnabled"/> and once in
            the <see cref="M:Debug(object)"/>.  This is an insignificant overhead
            since evaluating a logger takes about 1% of the time it
            takes to actually log. This is the preferred style of logging.
            </para>
            <para>Alternatively if your logger is available statically then the is debug
            enabled state can be stored in a static variable like this:
            </para>
            <code lang="C#">
            private static readonly bool isDebugEnabled = log.IsDebugEnabled;
            </code>
            <para>
            Then when you come to log you can write:
            </para>
            <code lang="C#">
            if (isDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
            <para>
            This way the debug enabled state is only queried once
            when the class is loaded. Using a <c>private static readonly</c>
            variable is the most efficient because it is a run time constant
            and can be heavily optimized by the JIT compiler.
            </para>
            <para>
            Of course if you use a static readonly variable to
            hold the enabled state of the logger then you cannot
            change the enabled state at runtime to vary the logging
            that is produced. You have to decide if you need absolute
            speed or runtime flexibility.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)"/>
            <seealso cref="M:DebugFormat(IFormatProvider, string, object[])"/>
        </member>
        <member name="P:log4net.ILog.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Info"/> events, <c>false</c> otherwise.
            </value>
            <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled"/>.
            </remarks>
            <seealso cref="M:Info(object)"/>
            <seealso cref="M:InfoFormat(IFormatProvider, string, object[])"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.ILog.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Warn"/> events, <c>false</c> otherwise.
            </value>
            <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled"/>.
            </remarks>
            <seealso cref="M:Warn(object)"/>
            <seealso cref="M:WarnFormat(IFormatProvider, string, object[])"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.ILog.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Error"/> events, <c>false</c> otherwise.
            </value>
            <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled"/>.
            </remarks>
            <seealso cref="M:Error(object)"/>
            <seealso cref="M:ErrorFormat(IFormatProvider, string, object[])"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="P:log4net.ILog.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <value>
            <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Fatal"/> events, <c>false</c> otherwise.
            </value>
            <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled"/>.
            </remarks>
            <seealso cref="M:Fatal(object)"/>
            <seealso cref="M:FatalFormat(IFormatProvider, string, object[])"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="T:log4net.Layout.DynamicPatternLayout">
            <summary>
            A flexible layout configurable with pattern string that re-evaluates on each call.
            </summary>
            <remarks>
            <para>This class is built on <see cref="T:log4net.Layout.PatternLayout"></see> and provides all the
            features and capabilities of PatternLayout.  PatternLayout is a 'static' class
            in that its layout is done once at configuration time.  This class will recreate
            the layout on each reference.</para>
            <para>One important difference between PatternLayout and DynamicPatternLayout is the
            treatment of the Header and Footer parameters in the configuration.  The Header and Footer
            parameters for DynamicPatternLayout must be syntactically in the form of a PatternString,
            but should not be marked as type log4net.Util.PatternString.  Doing so causes the
            pattern to be statically converted at configuration time and causes DynamicPatternLayout
            to perform the same as PatternLayout.</para>
            <para>Please see <see cref="T:log4net.Layout.PatternLayout"/> for complete documentation.</para>
            <example>
            &lt;layout type="log4net.Layout.DynamicPatternLayout"&gt;
              &lt;param name="Header" value="%newline**** Trace Opened     Local: %date{yyyy-MM-dd HH:mm:ss.fff}     UTC: %utcdate{yyyy-MM-dd HH:mm:ss.fff} ****%newline" /&gt;
              &lt;param name="Footer" value="**** Trace Closed %date{yyyy-MM-dd HH:mm:ss.fff} ****%newline" /&gt;
            &lt;/layout&gt;
            </example>
            </remarks>
        </member>
        <member name="F:log4net.Layout.DynamicPatternLayout.m_headerPatternString">
            <summary>
            The header PatternString
            </summary>
        </member>
        <member name="F:log4net.Layout.DynamicPatternLayout.m_footerPatternString">
            <summary>
            The footer PatternString
            </summary>
        </member>
        <member name="M:log4net.Layout.DynamicPatternLayout.#ctor">
            <summary>
            Constructs a DynamicPatternLayout using the DefaultConversionPattern
            </summary>
            <remarks>
            <para>
            The default pattern just produces the application supplied message.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.DynamicPatternLayout.#ctor(System.String)">
            <summary>
            Constructs a DynamicPatternLayout using the supplied conversion pattern
            </summary>
            <param name="pattern">the pattern to use</param>
            <remarks>
            </remarks>
        </member>
        <member name="P:log4net.Layout.DynamicPatternLayout.Header">
            <summary>
            The header for the layout format.
            </summary>
            <value>the layout header</value>
            <remarks>
            <para>
            The Header text will be appended before any logging events
            are formatted and appended.
            </para>
            The pattern will be formatted on each get operation.
            </remarks>
        </member>
        <member name="P:log4net.Layout.DynamicPatternLayout.Footer">
            <summary>
            The footer for the layout format.
            </summary>
            <value>the layout footer</value>
            <remarks>
            <para>
            The Footer text will be appended after all the logging events
            have been formatted and appended.
            </para>
            The pattern will be formatted on each get operation.
            </remarks>
        </member>
        <member name="T:log4net.Layout.ExceptionLayout">
            <summary>
            A Layout that renders only the Exception text from the logging event
            </summary>
            <remarks>
            <para>
            A Layout that renders only the Exception text from the logging event.
            </para>
            <para>
            This Layout should only be used with appenders that utilize multiple
            layouts (e.g. <see cref="T:log4net.Appender.AdoNetAppender"/>).
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.ExceptionLayout.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Constructs a ExceptionLayout
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.ExceptionLayout.ActivateOptions">
            <summary>
            Activate component options
            </summary>
            <remarks>
            <para>
            Part of the <see cref="T:log4net.Core.IOptionHandler"/> component activation
            framework.
            </para>
            <para>
            This method does nothing as options become effective immediately.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.ExceptionLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Gets the exception text from the logging event
            </summary>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Write the exception string to the <see cref="T:System.IO.TextWriter"/>.
            The exception string is retrieved from <see cref="M:LoggingEvent.GetExceptionString()"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.ILayout">
            <summary>
            Interface implemented by layout objects
            </summary>
            <remarks>
            <para>
            An <see cref="T:log4net.Layout.ILayout"/> object is used to format a <see cref="T:log4net.Core.LoggingEvent"/>
            as text. The <see cref="M:Format(TextWriter,LoggingEvent)"/> method is called by an
            appender to transform the <see cref="T:log4net.Core.LoggingEvent"/> into a string.
            </para>
            <para>
            The layout can also supply <see cref="P:log4net.Layout.ILayout.Header"/> and <see cref="P:log4net.Layout.ILayout.Footer"/>
            text that is appender before any events and after all the events respectively.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.ILayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Implement this method to create your own layout format.
            </summary>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <param name="loggingEvent">The event to format</param>
            <remarks>
            <para>
            This method is called by an appender to format
            the <paramref name="loggingEvent"/> as text and output to a writer.
            </para>
            <para>
            If the caller does not have a <see cref="T:System.IO.TextWriter"/> and prefers the
            event to be formatted as a <see cref="T:System.String"/> then the following
            code can be used to format the event into a <see cref="T:System.IO.StringWriter"/>.
            </para>
            <code lang="C#">
            StringWriter writer = new StringWriter();
            Layout.Format(writer, loggingEvent);
            string formattedEvent = writer.ToString();
            </code>
            </remarks>
        </member>
        <member name="P:log4net.Layout.ILayout.ContentType">
            <summary>
            The content type output by this layout. 
            </summary>
            <value>The content type</value>
            <remarks>
            <para>
            The content type output by this layout.
            </para>
            <para>
            This is a MIME type e.g. <c>"text/plain"</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.ILayout.Header">
            <summary>
            The header for the layout format.
            </summary>
            <value>the layout header</value>
            <remarks>
            <para>
            The Header text will be appended before any logging events
            are formatted and appended.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.ILayout.Footer">
            <summary>
            The footer for the layout format.
            </summary>
            <value>the layout footer</value>
            <remarks>
            <para>
            The Footer text will be appended after all the logging events
            have been formatted and appended.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.ILayout.IgnoresException">
            <summary>
            Flag indicating if this layout handle exceptions
            </summary>
            <value><c>false</c> if this layout handles exceptions</value>
            <remarks>
            <para>
            If this layout handles the exception object contained within
            <see cref="T:log4net.Core.LoggingEvent"/>, then the layout should return
            <c>false</c>. Otherwise, if the layout ignores the exception
            object, then the layout should return <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.IRawLayout">
            <summary>
            Interface for raw layout objects
            </summary>
            <remarks>
            <para>
            Interface used to format a <see cref="T:log4net.Core.LoggingEvent"/>
            to an object.
            </para>
            <para>
            This interface should not be confused with the
            <see cref="T:log4net.Layout.ILayout"/> interface. This interface is used in
            only certain specialized situations where a raw object is
            required rather than a formatted string. The <see cref="T:log4net.Layout.ILayout"/>
            is not generally useful than this interface.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.IRawLayout.Format(log4net.Core.LoggingEvent)">
            <summary>
            Implement this method to create your own layout format.
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns the formatted event</returns>
            <remarks>
            <para>
            Implement this method to create your own layout format.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Layout2RawLayoutAdapter">
            <summary>
            Adapts any <see cref="T:log4net.Layout.ILayout"/> to a <see cref="T:log4net.Layout.IRawLayout"/>
            </summary>
            <remarks>
            <para>
            Where an <see cref="T:log4net.Layout.IRawLayout"/> is required this adapter
            allows a <see cref="T:log4net.Layout.ILayout"/> to be specified.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Layout.Layout2RawLayoutAdapter.m_layout">
            <summary>
            The layout to adapt
            </summary>
        </member>
        <member name="M:log4net.Layout.Layout2RawLayoutAdapter.#ctor(log4net.Layout.ILayout)">
            <summary>
            Construct a new adapter
            </summary>
            <param name="layout">the layout to adapt</param>
            <remarks>
            <para>
            Create the adapter for the specified <paramref name="layout"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Layout2RawLayoutAdapter.Format(log4net.Core.LoggingEvent)">
            <summary>
            Format the logging event as an object.
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns the formatted event</returns>
            <remarks>
            <para>
            Format the logging event as an object.
            </para>
            <para>
            Uses the <see cref="T:log4net.Layout.ILayout"/> object supplied to 
            the constructor to perform the formatting.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.LayoutSkeleton">
            <summary>
            Extend this abstract class to create your own log layout format.
            </summary>
            <remarks>
            <para>
            This is the base implementation of the <see cref="T:log4net.Layout.ILayout"/>
            interface. Most layout objects should extend this class.
            </para>
            </remarks>
            <remarks>
            <note type="inheritinfo">
            <para>
            Subclasses must implement the <see cref="M:Format(TextWriter,LoggingEvent)"/>
            method.
            </para>
            <para>
            Subclasses should set the <see cref="P:log4net.Layout.LayoutSkeleton.IgnoresException"/> in their default
            constructor.
            </para>
            </note>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Layout.LayoutSkeleton.m_header">
            <summary>
            The header text
            </summary>
            <remarks>
            <para>
            See <see cref="P:log4net.Layout.LayoutSkeleton.Header"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.LayoutSkeleton.m_footer">
            <summary>
            The footer text
            </summary>
            <remarks>
            <para>
            See <see cref="P:log4net.Layout.LayoutSkeleton.Footer"/> for more information.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.LayoutSkeleton.m_ignoresException">
            <summary>
            Flag indicating if this layout handles exceptions
            </summary>
            <remarks>
            <para>
            <c>false</c> if this layout handles exceptions
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.LayoutSkeleton.#ctor">
            <summary>
            Empty default constructor
            </summary>
            <remarks>
            <para>
            Empty default constructor
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.LayoutSkeleton.ActivateOptions">
            <summary>
            Activate component options
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Layout.LayoutSkeleton.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.LayoutSkeleton.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.LayoutSkeleton.ActivateOptions"/> must be called again.
            </para>
            <para>
            This method must be implemented by the subclass.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.LayoutSkeleton.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Implement this method to create your own layout format.
            </summary>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <param name="loggingEvent">The event to format</param>
            <remarks>
            <para>
            This method is called by an appender to format
            the <paramref name="loggingEvent"/> as text.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.LayoutSkeleton.Format(log4net.Core.LoggingEvent)">
            <summary>
            Convenience method for easily formatting the logging event into a string variable.
            </summary>
            <param name="loggingEvent"></param>
            <remarks>
            Creates a new StringWriter instance to store the formatted logging event.
            </remarks>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.ContentType">
            <summary>
            The content type output by this layout. 
            </summary>
            <value>The content type is <c>"text/plain"</c></value>
            <remarks>
            <para>
            The content type output by this layout.
            </para>
            <para>
            This base class uses the value <c>"text/plain"</c>.
            To change this value a subclass must override this
            property.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.Header">
            <summary>
            The header for the layout format.
            </summary>
            <value>the layout header</value>
            <remarks>
            <para>
            The Header text will be appended before any logging events
            are formatted and appended.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.Footer">
            <summary>
            The footer for the layout format.
            </summary>
            <value>the layout footer</value>
            <remarks>
            <para>
            The Footer text will be appended after all the logging events
            have been formatted and appended.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.IgnoresException">
            <summary>
            Flag indicating if this layout handles exceptions
            </summary>
            <value><c>false</c> if this layout handles exceptions</value>
            <remarks>
            <para>
            If this layout handles the exception object contained within
            <see cref="T:log4net.Core.LoggingEvent"/>, then the layout should return
            <c>false</c>. Otherwise, if the layout ignores the exception
            object, then the layout should return <c>true</c>.
            </para>
            <para>
            Set this value to override a this default setting. The default
            value is <c>true</c>, this layout does not handle the exception.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.PatternLayout">
            <summary>
            A flexible layout configurable with pattern string.
            </summary>
            <remarks>
            <para>
            The goal of this class is to <see cref="M:PatternLayout.Format(TextWriter,LoggingEvent)"/> a 
            <see cref="T:log4net.Core.LoggingEvent"/> as a string. The results
            depend on the <i>conversion pattern</i>.
            </para>
            <para>
            The conversion pattern is closely related to the conversion
            pattern of the printf function in C. A conversion pattern is
            composed of literal text and format control expressions called
            <i>conversion specifiers</i>.
            </para>
            <para>
            <i>You are free to insert any literal text within the conversion
            pattern.</i>
            </para>
            <para>
            Each conversion specifier starts with a percent sign (%) and is
            followed by optional <i>format modifiers</i> and a <i>conversion
            pattern name</i>. The conversion pattern name specifies the type of
            data, e.g. logger, level, date, thread name. The format
            modifiers control such things as field width, padding, left and
            right justification. The following is a simple example.
            </para>
            <para>
            Let the conversion pattern be <b>"%-5level [%thread]: %message%newline"</b> and assume
            that the log4net environment was set to use a PatternLayout. Then the
            statements
            </para>
            <code lang="C#">
            ILog log = LogManager.GetLogger(typeof(TestApp));
            log.Debug("Message 1");
            log.Warn("Message 2");   
            </code>
            <para>would yield the output</para>
            <code>
            DEBUG [main]: Message 1
            WARN  [main]: Message 2  
            </code>
            <para>
            Note that there is no explicit separator between text and
            conversion specifiers. The pattern parser knows when it has reached
            the end of a conversion specifier when it reads a conversion
            character. In the example above the conversion specifier
            <b>%-5level</b> means the level of the logging event should be left
            justified to a width of five characters.
            </para>
            <para>
            The recognized conversion pattern names are:
            </para>
            <list type="table">
                <listheader>
                    <term>Conversion Pattern Name</term>
                    <description>Effect</description>
                </listheader>
                <item>
                    <term>a</term>
                    <description>Equivalent to <b>appdomain</b></description>
                </item>
                <item>
                    <term>appdomain</term>
                    <description>
            			Used to output the friendly name of the AppDomain where the 
            			logging event was generated. 
                    </description>
                </item>
                <item>
                    <term>aspnet-cache</term>
                    <description>
                        <para>
                        Used to output all cache items in the case of <b>%aspnet-cache</b> or just one named item if used as <b>%aspnet-cache{key}</b>
                        </para>
                        <para>
                        This pattern is not available for Compact Framework or Client Profile assemblies.
                        </para>
                    </description>
                </item>
                <item>
                    <term>aspnet-context</term>
                    <description>
                        <para>
                        Used to output all context items in the case of <b>%aspnet-context</b> or just one named item if used as <b>%aspnet-context{key}</b>
                        </para>
                        <para>
                        This pattern is not available for Compact Framework or Client Profile assemblies.
                        </para>
                    </description>
                </item>
                <item>
                    <term>aspnet-request</term>
                    <description>
                        <para>
                        Used to output all request parameters in the case of <b>%aspnet-request</b> or just one named param if used as <b>%aspnet-request{key}</b>
                        </para>
                        <para>
                        This pattern is not available for Compact Framework or Client Profile assemblies.
                        </para>
                    </description>
                </item>
                <item>
                    <term>aspnet-session</term>
                    <description>
                        <para>
                        Used to output all session items in the case of <b>%aspnet-session</b> or just one named item if used as <b>%aspnet-session{key}</b>
                        </para>
                        <para>
                        This pattern is not available for Compact Framework or Client Profile assemblies.
                        </para>
                    </description>
                </item>
                <item>
                    <term>c</term>
                    <description>Equivalent to <b>logger</b></description>
                </item>
                <item>
                    <term>C</term>
                    <description>Equivalent to <b>type</b></description>
                </item>
                <item>
                    <term>class</term>
                    <description>Equivalent to <b>type</b></description>
                </item>
                <item>
                    <term>d</term>
                    <description>Equivalent to <b>date</b></description>
                </item>
                <item>
            		<term>date</term> 
            		<description>
            			<para>
            			Used to output the date of the logging event in the local time zone. 
            			To output the date in universal time use the <c>%utcdate</c> pattern.
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%date{HH:mm:ss,fff}</b> or
            			<b>%date{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter"/>).
            			</para>
            			<para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:DateTime.ToString(string)"/>.
            			</para>
            			<para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter"/>, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter"/> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter"/>. For example, 
            			<b>%date{ISO8601}</b> or <b>%date{ABSOLUTE}</b>.
            			</para>
            			<para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:DateTime.ToString(string)"/>.
            			</para>
            		</description>
            	</item>
            	<item>
            		<term>exception</term>
            		<description>
            			<para>
            			Used to output the exception passed in with the log message.
            			</para>
            			<para>
            			If an exception object is stored in the logging event
            			it will be rendered into the pattern output with a
            			trailing newline.
            			If there is no exception then nothing will be output
            			and no trailing newline will be appended.
            			It is typical to put a newline before the exception
            			and to have the exception as the last data in the pattern.
            			</para>
            		</description>
            	</item>
                <item>
                    <term>F</term>
                    <description>Equivalent to <b>file</b></description>
                </item>
            	<item>
            		<term>file</term>
            		<description>
            			<para>
            			Used to output the file name where the logging request was
            			issued.
            			</para>
            			<para>
            			<b>WARNING</b> Generating caller location information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
            			<para>
            			See the note below on the availability of caller location information.
            			</para>
            		</description>
            	</item>
            	<item>
            		<term>identity</term>
            		<description>
            			<para>
            			Used to output the user name for the currently active user
            			(Principal.Identity.Name).
            			</para>
            			<para>
            			<b>WARNING</b> Generating caller information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
            		</description>
            	</item>
                <item>
                    <term>l</term>
                    <description>Equivalent to <b>location</b></description>
                </item>
                <item>
                    <term>L</term>
                    <description>Equivalent to <b>line</b></description>
                </item>
            	<item>
            		<term>location</term>
            		<description>
            			<para>
            			Used to output location information of the caller which generated
            			the logging event.
            			</para>
            			<para>
            			The location information depends on the CLI implementation but
            			usually consists of the fully qualified name of the calling
            			method followed by the callers source the file name and line
            			number between parentheses.
            			</para>
            			<para>
            			The location information can be very useful. However, its
            			generation is <b>extremely</b> slow. Its use should be avoided
            			unless execution speed is not an issue.
            			</para>
            			<para>
            			See the note below on the availability of caller location information.
            			</para>
            		</description>
            	</item>
            	<item>
            		<term>level</term>
            		<description>
            			<para>
            			Used to output the level of the logging event.
            			</para>
            		</description>
            	</item>
            	<item>
            		<term>line</term>
            		<description>
            			<para>
            			Used to output the line number from where the logging request
            			was issued.
            			</para>
            			<para>
            			<b>WARNING</b> Generating caller location information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
            			<para>
            			See the note below on the availability of caller location information.
            			</para>
            		</description>
            	</item>
                <item>
                    <term>logger</term>
                    <description>
                        <para>
            			Used to output the logger of the logging event. The
            			logger conversion specifier can be optionally followed by
            			<i>precision specifier</i>, that is a decimal constant in
            			brackets.
                        </para>
            			<para>
            			If a precision specifier is given, then only the corresponding
            			number of right most components of the logger name will be
            			printed. By default the logger name is printed in full.
            			</para>
            			<para>
            			For example, for the logger name "a.b.c" the pattern
            			<b>%logger{2}</b> will output "b.c".
            			</para>
                    </description>
                </item>
                <item>
                    <term>m</term>
                    <description>Equivalent to <b>message</b></description>
                </item>
                <item>
                    <term>M</term>
                    <description>Equivalent to <b>method</b></description>
                </item>
            	<item>
            		<term>message</term>
            		<description>
            			<para>
            			Used to output the application supplied message associated with 
            			the logging event.
            			</para>
            		</description>
            	</item>
            	<item>
            		<term>mdc</term>
            		<description>
            			<para>
            			The MDC (old name for the ThreadContext.Properties) is now part of the
            			combined event properties. This pattern is supported for compatibility
            			but is equivalent to <b>property</b>.
            			</para>
            		</description>
            	</item>
            	<item>
            		<term>method</term>
            		<description>
            			<para>
            			Used to output the method name where the logging request was
            			issued.
            			</para>
            			<para>
            			<b>WARNING</b> Generating caller location information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
            			<para>
            			See the note below on the availability of caller location information.
            			</para>
            		</description>
            	</item>
                <item>
                    <term>n</term>
                    <description>Equivalent to <b>newline</b></description>
                </item>
            	<item>
            		<term>newline</term>
            		<description>
            			<para>
            			Outputs the platform dependent line separator character or
            			characters.
            			</para>
            			<para>
            			This conversion pattern offers the same performance as using 
            			non-portable line separator strings such as	"\n", or "\r\n". 
            			Thus, it is the preferred way of specifying a line separator.
            			</para> 
            		</description>
            	</item>
            	<item>
            		<term>ndc</term>
            		<description>
            			<para>
            			Used to output the NDC (nested diagnostic context) associated
            			with the thread that generated the logging event.
            			</para>
            		</description>
            	</item>
                <item>
                    <term>p</term>
                    <description>Equivalent to <b>level</b></description>
                </item>
                <item>
                    <term>P</term>
                    <description>Equivalent to <b>property</b></description>
                </item>
                <item>
                    <term>properties</term>
                    <description>Equivalent to <b>property</b></description>
                </item>
            	<item>
            		<term>property</term>
            		<description>
            			<para>
            			Used to output the an event specific property. The key to 
            			lookup must be specified within braces and directly following the
            			pattern specifier, e.g. <b>%property{user}</b> would include the value
            			from the property that is keyed by the string 'user'. Each property value
            			that is to be included in the log must be specified separately.
            			Properties are added to events by loggers or appenders. By default 
            			the <c>log4net:HostName</c> property is set to the name of machine on 
            			which the event was originally logged.
            			</para>
            			<para>
            			If no key is specified, e.g. <b>%property</b> then all the keys and their
            			values are printed in a comma separated list.
            			</para>
            			<para>
            			The properties of an event are combined from a number of different
            			contexts. These are listed below in the order in which they are searched.
            			</para>
            			<list type="definition">
            				<item>
            					<term>the event properties</term>
            					<description>
            					The event has <see cref="P:log4net.Core.LoggingEvent.Properties"/> that can be set. These 
            					properties are specific to this event only.
            					</description>
            				</item>
            				<item>
            					<term>the thread properties</term>
            					<description>
            					The <see cref="P:log4net.ThreadContext.Properties"/> that are set on the current
            					thread. These properties are shared by all events logged on this thread.
            					</description>
            				</item>
            				<item>
            					<term>the global properties</term>
            					<description>
            					The <see cref="P:log4net.GlobalContext.Properties"/> that are set globally. These 
            					properties are shared by all the threads in the AppDomain.
            					</description>
            				</item>
            			</list>
            			
            		</description>
            	</item>
                <item>
                    <term>r</term>
                    <description>Equivalent to <b>timestamp</b></description>
                </item>
            	<item>
            		<term>stacktrace</term> 
            		<description>
            			<para>
            			Used to output the stack trace of the logging event
            			The stack trace level specifier may be enclosed 
            			between braces. For example, <b>%stacktrace{level}</b>.  
            			If no stack trace level specifier is given then 1 is assumed 
            			</para>
            			<para>
            			Output uses the format:
            			type3.MethodCall3 > type2.MethodCall2 > type1.MethodCall1
            			</para>
                        <para>
                        This pattern is not available for Compact Framework assemblies.
                        </para>
            		</description>
            	</item>
            	<item>
            		<term>stacktracedetail</term> 
            		<description>
            			<para>
            			Used to output the stack trace of the logging event
            			The stack trace level specifier may be enclosed 
            			between braces. For example, <b>%stacktracedetail{level}</b>.  
            			If no stack trace level specifier is given then 1 is assumed 
            			</para>
            			<para>
            			Output uses the format:
                        type3.MethodCall3(type param,...) > type2.MethodCall2(type param,...) > type1.MethodCall1(type param,...)
            			</para>
                        <para>
                        This pattern is not available for Compact Framework assemblies.
                        </para>
            		</description>
            	</item>
                <item>
                    <term>t</term>
                    <description>Equivalent to <b>thread</b></description>
                </item>
            	<item>
            		<term>timestamp</term>
            		<description>
            			<para>
            			Used to output the number of milliseconds elapsed since the start
            			of the application until the creation of the logging event.
            			</para>
            		</description>
            	</item>
            	<item>
            		<term>thread</term>
            		<description>
            			<para>
            			Used to output the name of the thread that generated the
            			logging event. Uses the thread number if no name is available.
            			</para>
            		</description>
            	</item>
                <item>
            		<term>type</term> 
            		<description>
            			<para>
            			Used to output the fully qualified type name of the caller
            			issuing the logging request. This conversion specifier
            			can be optionally followed by <i>precision specifier</i>, that
            			is a decimal constant in brackets.
            			</para>
            			<para>
            			If a precision specifier is given, then only the corresponding
            			number of right most components of the class name will be
            			printed. By default the class name is output in fully qualified form.
            			</para>
            			<para>
            			For example, for the class name "log4net.Layout.PatternLayout", the
            			pattern <b>%type{1}</b> will output "PatternLayout".
            			</para>
            			<para>
            			<b>WARNING</b> Generating the caller class information is
            			slow. Thus, its use should be avoided unless execution speed is
            			not an issue.
            			</para>
            			<para>
            			See the note below on the availability of caller location information.
            			</para>
            		</description>
                </item>
                <item>
                    <term>u</term>
                    <description>Equivalent to <b>identity</b></description>
                </item>
            	<item>
            		<term>username</term>
            		<description>
            			<para>
            			Used to output the WindowsIdentity for the currently
            			active user.
            			</para>
            			<para>
            			<b>WARNING</b> Generating caller WindowsIdentity information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
            		</description>
            	</item>
                <item>
            		<term>utcdate</term> 
            		<description>
            			<para>
            			Used to output the date of the logging event in universal time. 
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%utcdate{HH:mm:ss,fff}</b> or
            			<b>%utcdate{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter"/>).
            			</para>
            			<para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:DateTime.ToString(string)"/>.
            			</para>
            			<para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter"/>, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter"/> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter"/>. For example, 
            			<b>%utcdate{ISO8601}</b> or <b>%utcdate{ABSOLUTE}</b>.
            			</para>
            			<para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:DateTime.ToString(string)"/>.
            			</para>
            		</description>
            	</item>
                <item>
                    <term>w</term>
                    <description>Equivalent to <b>username</b></description>
                </item>
                <item>
                    <term>x</term>
                    <description>Equivalent to <b>ndc</b></description>
                </item>
                <item>
                    <term>X</term>
                    <description>Equivalent to <b>mdc</b></description>
                </item>
            	<item>
            		<term>%</term>
            		<description>
            			<para>
            			The sequence %% outputs a single percent sign.
            			</para>
            		</description>
            	</item>
            </list>
            <para>
            The single letter patterns are deprecated in favor of the 
            longer more descriptive pattern names.
            </para>
            <para>
            By default the relevant information is output as is. However,
            with the aid of format modifiers it is possible to change the
            minimum field width, the maximum field width and justification.
            </para>
            <para>
            The optional format modifier is placed between the percent sign
            and the conversion pattern name.
            </para>
            <para>
            The first optional format modifier is the <i>left justification
            flag</i> which is just the minus (-) character. Then comes the
            optional <i>minimum field width</i> modifier. This is a decimal
            constant that represents the minimum number of characters to
            output. If the data item requires fewer characters, it is padded on
            either the left or the right until the minimum width is
            reached. The default is to pad on the left (right justify) but you
            can specify right padding with the left justification flag. The
            padding character is space. If the data item is larger than the
            minimum field width, the field is expanded to accommodate the
            data. The value is never truncated.
            </para>
            <para>
            This behavior can be changed using the <i>maximum field
            width</i> modifier which is designated by a period followed by a
            decimal constant. If the data item is longer than the maximum
            field, then the extra characters are removed from the
            <i>beginning</i> of the data item and not from the end. For
            example, it the maximum field width is eight and the data item is
            ten characters long, then the first two characters of the data item
            are dropped. This behavior deviates from the printf function in C
            where truncation is done from the end.
            </para>
            <para>
            Below are various format modifier examples for the logger
            conversion specifier.
            </para>
            <div class="tablediv">
            	<table class="dtTABLE" cellspacing="0">
            		<tr>
            			<th>Format modifier</th>
            			<th>left justify</th>
            			<th>minimum width</th>
            			<th>maximum width</th>
            			<th>comment</th>
            		</tr>
            		<tr>
            			<td align="center">%20logger</td>
            			<td align="center">false</td>
            			<td align="center">20</td>
            			<td align="center">none</td>
            			<td>
            				<para>
            				Left pad with spaces if the logger name is less than 20
            				characters long.
            				</para>
            			</td>
            		</tr>
            		<tr>
            			<td align="center">%-20logger</td>
            			<td align="center">true</td>
            			<td align="center">20</td>
            			<td align="center">none</td>
            			<td>
            				<para>
            				Right pad with spaces if the logger 
            				name is less than 20 characters long.
            				</para>
            			</td>
            		</tr>
            		<tr>
            			<td align="center">%.30logger</td>
            			<td align="center">NA</td>
            			<td align="center">none</td>
            			<td align="center">30</td>
            			<td>
            				<para>
            				Truncate from the beginning if the logger 
            				name is longer than 30 characters.
            				</para>
            			</td>
            		</tr>
            		<tr>
            			<td align="center"><nobr>%20.30logger</nobr></td>
            			<td align="center">false</td>
            			<td align="center">20</td>
            			<td align="center">30</td>
            			<td>
            				<para>
            				Left pad with spaces if the logger name is shorter than 20
            				characters. However, if logger name is longer than 30 characters,
            				then truncate from the beginning.
            				</para>
            			</td>
            		</tr>
            		<tr>
            			<td align="center">%-20.30logger</td>
            			<td align="center">true</td>
            			<td align="center">20</td>
            			<td align="center">30</td>
            			<td>
            				<para>
            				Right pad with spaces if the logger name is shorter than 20
            				characters. However, if logger name is longer than 30 characters,
            				then truncate from the beginning.
            				</para>
            			</td>
            		</tr>
            	</table>
            </div>
            <para>
            <b>Note about caller location information.</b><br />
            The following patterns <c>%type %file %line %method %location %class %C %F %L %l %M</c> 
            all generate caller location information.
            Location information uses the <c>System.Diagnostics.StackTrace</c> class to generate
            a call stack. The caller's information is then extracted from this stack.
            </para>
            <note type="caution">
            <para>
            The <c>System.Diagnostics.StackTrace</c> class is not supported on the 
            .NET Compact Framework 1.0 therefore caller location information is not
            available on that framework.
            </para>
            </note>
            <note type="caution">
            <para>
            The <c>System.Diagnostics.StackTrace</c> class has this to say about Release builds:
            </para>
            <para>
            "StackTrace information will be most informative with Debug build configurations. 
            By default, Debug builds include debug symbols, while Release builds do not. The 
            debug symbols contain most of the file, method name, line number, and column 
            information used in constructing StackFrame and StackTrace objects. StackTrace 
            might not report as many method calls as expected, due to code transformations 
            that occur during optimization."
            </para>
            <para>
            This means that in a Release build the caller information may be incomplete or may 
            not exist at all! Therefore caller location information cannot be relied upon in a Release build.
            </para>
            </note>
            <para>
            Additional pattern converters may be registered with a specific <see cref="T:log4net.Layout.PatternLayout"/>
            instance using the <see cref="M:AddConverter(string, Type)"/> method.
            </para>
            </remarks>
            <example>
            This is a more detailed pattern.
            <code><b>%timestamp [%thread] %level %logger %ndc - %message%newline</b></code>
            </example>
            <example>
            A similar pattern except that the relative time is
            right padded if less than 6 digits, thread name is right padded if
            less than 15 characters and truncated if longer and the logger
            name is left padded if shorter than 30 characters and truncated if
            longer.
            <code><b>%-6timestamp [%15.15thread] %-5level %30.30logger %ndc - %message%newline</b></code>
            </example>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Douglas de la Torre</author>
            <author>Daniel Cazzulino</author>
        </member>
        <member name="F:log4net.Layout.PatternLayout.DefaultConversionPattern">
            <summary>
            Default pattern string for log output. 
            </summary>
            <remarks>
            <para>
            Default pattern string for log output. 
            Currently set to the string <b>"%message%newline"</b> 
            which just prints the application supplied message. 
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.PatternLayout.DetailConversionPattern">
            <summary>
            A detailed conversion pattern
            </summary>
            <remarks>
            <para>
            A conversion pattern which includes Time, Thread, Logger, and Nested Context.
            Current value is <b>%timestamp [%thread] %level %logger %ndc - %message%newline</b>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.PatternLayout.s_globalRulesRegistry">
            <summary>
            Internal map of converter identifiers to converter types.
            </summary>
            <remarks>
            <para>
            This static map is overridden by the m_converterRegistry instance map
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.PatternLayout.m_pattern">
            <summary>
            the pattern
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.m_head">
            <summary>
            the head of the pattern converter chain
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.m_instanceRulesRegistry">
            <summary>
            patterns defined on this PatternLayout only
            </summary>
        </member>
        <member name="M:log4net.Layout.PatternLayout.#cctor">
            <summary>
            Initialize the global registry
            </summary>
            <remarks>
            <para>
            Defines the builtin global rules.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.#ctor">
            <summary>
            Constructs a PatternLayout using the DefaultConversionPattern
            </summary>
            <remarks>
            <para>
            The default pattern just produces the application supplied message.
            </para>
            <para>
            Note to Inheritors: This constructor calls the virtual method
            <see cref="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)"/>. If you override this method be
            aware that it will be called before your is called constructor.
            </para>
            <para>
            As per the <see cref="T:log4net.Core.IOptionHandler"/> contract the <see cref="M:log4net.Layout.PatternLayout.ActivateOptions"/>
            method must be called after the properties on this object have been
            configured.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.#ctor(System.String)">
            <summary>
            Constructs a PatternLayout using the supplied conversion pattern
            </summary>
            <param name="pattern">the pattern to use</param>
            <remarks>
            <para>
            Note to Inheritors: This constructor calls the virtual method
            <see cref="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)"/>. If you override this method be
            aware that it will be called before your is called constructor.
            </para>
            <para>
            When using this constructor the <see cref="M:log4net.Layout.PatternLayout.ActivateOptions"/> method 
            need not be called. This may not be the case when using a subclass.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.PatternLayout.ConversionPattern">
            <summary>
            The pattern formatting string
            </summary>
            <remarks>
            <para>
            The <b>ConversionPattern</b> option. This is the string which
            controls formatting and consists of a mix of literal content and
            conversion specifiers.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)">
            <summary>
            Create the pattern parser instance
            </summary>
            <param name="pattern">the pattern to parse</param>
            <returns>The <see cref="T:log4net.Util.PatternParser"/> that will format the event</returns>
            <remarks>
            <para>
            Creates the <see cref="T:log4net.Util.PatternParser"/> used to parse the conversion string. Sets the
            global and instance rules on the <see cref="T:log4net.Util.PatternParser"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.ActivateOptions">
            <summary>
            Initialize layout options
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Layout.PatternLayout.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.PatternLayout.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.PatternLayout.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Produces a formatted string as specified by the conversion pattern.
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <remarks>
            <para>
            Parse the <see cref="T:log4net.Core.LoggingEvent"/> using the patter format
            specified in the <see cref="P:log4net.Layout.PatternLayout.ConversionPattern"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.AddConverter(log4net.Util.ConverterInfo)">
            <summary>
            Add a converter to this PatternLayout
            </summary>
            <param name="converterInfo">the converter info</param>
            <remarks>
            <para>
            This version of the method is used by the configurator.
            Programmatic users should use the alternative <see cref="M:AddConverter(string,Type)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.AddConverter(System.String,System.Type)">
            <summary>
            Add a converter to this PatternLayout
            </summary>
            <param name="name">the name of the conversion pattern for this converter</param>
            <param name="type">the type of the converter</param>
            <remarks>
            <para>
            Add a named pattern converter to this instance. This
            converter will be used in the formatting of the event.
            This method must be called before <see cref="M:log4net.Layout.PatternLayout.ActivateOptions"/>.
            </para>
            <para>
            The <paramref name="type"/> specified must extend the 
            <see cref="T:log4net.Util.PatternConverter"/> type.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.AppDomainPatternConverter">
            <summary>
            Write the event appdomain name to the output
            </summary>
            <remarks>
            <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.Domain"/> to the output writer.
            </para>
            </remarks>
            <author>Daniel Cazzulino</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.AppDomainPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the event appdomain name to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.Domain"/> to the output <paramref name="writer"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.AspNetCachePatternConverter">
            <summary>
            Converter for items in the ASP.Net Cache.
            </summary>
            <remarks>
            <para>
            Outputs an item from the <see cref="P:System.Web.HttpRuntime.Cache" />.
            </para>
            </remarks>
            <author>Ron Grabowski</author>
        </member>
        <member name="M:log4net.Layout.Pattern.AspNetCachePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent,System.Web.HttpContext)">
            <summary>
            Write the ASP.Net Cache item to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent" /> on which the pattern converter should be executed.</param>
            <param name="httpContext">The <see cref="T:System.Web.HttpContext" /> under which the ASP.Net request is running.</param>
            <remarks>
            <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option"/>
            property. If no property has been set, all key value pairs from the Cache will
            be written to the output.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.AspNetContextPatternConverter">
            <summary>
            Converter for items in the <see cref="T:System.Web.HttpContext" />.
            </summary>
            <remarks>
            <para>
            Outputs an item from the <see cref="T:System.Web.HttpContext" />.
            </para>
            </remarks>
            <author>Ron Grabowski</author>
        </member>
        <member name="M:log4net.Layout.Pattern.AspNetContextPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent,System.Web.HttpContext)">
            <summary>
            Write the ASP.Net HttpContext item to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent" /> on which the pattern converter should be executed.</param>
            <param name="httpContext">The <see cref="T:System.Web.HttpContext" /> under which the ASP.Net request is running.</param>
            <remarks>
            <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option"/>
            property.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.AspNetPatternLayoutConverter">
            <summary>
            Abstract class that provides access to the current HttpContext (<see cref="P:System.Web.HttpContext.Current" />) that 
            derived classes need.
            </summary>
            <remarks>
            This class handles the case when HttpContext.Current is null by writing
            <see cref="P:log4net.Util.SystemInfo.NotAvailableText" /> to the writer.
            </remarks>
            <author>Ron Grabowski</author>
        </member>
        <member name="M:log4net.Layout.Pattern.AspNetPatternLayoutConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent,System.Web.HttpContext)">
            <summary>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the correct way.
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent" /> on which the pattern converter should be executed.</param>
            <param name="httpContext">The <see cref="T:System.Web.HttpContext" /> under which the ASP.Net request is running.</param>
        </member>
        <member name="T:log4net.Layout.Pattern.AspNetRequestPatternConverter">
            <summary>
            Converter for items in the ASP.Net Cache.
            </summary>
            <remarks>
            <para>
            Outputs an item from the <see cref="P:System.Web.HttpRuntime.Cache" />.
            </para>
            </remarks>
            <author>Ron Grabowski</author>
        </member>
        <member name="M:log4net.Layout.Pattern.AspNetRequestPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent,System.Web.HttpContext)">
            <summary>
            Write the ASP.Net Cache item to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent" /> on which the pattern converter should be executed.</param>
            <param name="httpContext">The <see cref="T:System.Web.HttpContext" /> under which the ASP.Net request is running.</param>
            <remarks>
            <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option"/>
            property.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.AspNetSessionPatternConverter">
            <summary>
            Converter for items in the ASP.Net Cache.
            </summary>
            <remarks>
            <para>
            Outputs an item from the <see cref="P:System.Web.HttpRuntime.Cache" />.
            </para>
            </remarks>
            <author>Ron Grabowski</author>
        </member>
        <member name="M:log4net.Layout.Pattern.AspNetSessionPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent,System.Web.HttpContext)">
            <summary>
            Write the ASP.Net Cache item to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent" /> on which the pattern converter should be executed.</param>
            <param name="httpContext">The <see cref="T:System.Web.HttpContext" /> under which the ASP.Net request is running.</param>
            <remarks>
            <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option"/>
            property. If no property has been set, all key value pairs from the Session will
            be written to the output.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.DatePatternConverter">
            <summary>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter"/> to format 
            the date of a <see cref="T:log4net.Core.LoggingEvent"/>.
            </summary>
            <remarks>
            <para>
            Render the <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/> to the writer as a string.
            </para>
            <para>
            The value of the <see cref="P:log4net.Util.PatternConverter.Option"/> determines 
            the formatting of the date. The following values are allowed:
            <list type="definition">
            	<listheader>
            		<term>Option value</term>
            		<description>Output</description>
            	</listheader>
            	<item>
            		<term>ISO8601</term>
            		<description>
            		Uses the <see cref="T:log4net.DateFormatter.Iso8601DateFormatter"/> formatter. 
            		Formats using the <c>"yyyy-MM-dd HH:mm:ss,fff"</c> pattern.
            		</description>
            	</item>
            	<item>
            		<term>DATE</term>
            		<description>
            		Uses the <see cref="T:log4net.DateFormatter.DateTimeDateFormatter"/> formatter. 
            		Formats using the <c>"dd MMM yyyy HH:mm:ss,fff"</c> for example, <c>"06 Nov 1994 15:49:37,459"</c>.
            		</description>
            	</item>
            	<item>
            		<term>ABSOLUTE</term>
            		<description>
            		Uses the <see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter"/> formatter. 
            		Formats using the <c>"HH:mm:ss,yyyy"</c> for example, <c>"15:49:37,459"</c>.
            		</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>
            		Any other pattern string uses the <see cref="T:log4net.DateFormatter.SimpleDateFormatter"/> formatter. 
            		This formatter passes the pattern string to the <see cref="T:System.DateTime"/> 
            		<see cref="M:DateTime.ToString(string)"/> method.
            		For details on valid patterns see 
            		<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemglobalizationdatetimeformatinfoclasstopic.asp">DateTimeFormatInfo Class</a>.
            		</description>
            	</item>
            </list>
            </para>
            <para>
            The <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/> is in the local time zone and is rendered in that zone.
            To output the time in Universal time see <see cref="T:log4net.Layout.Pattern.UtcDatePatternConverter"/>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Layout.Pattern.DatePatternConverter.m_dateFormatter">
            <summary>
            The <see cref="T:log4net.DateFormatter.IDateFormatter"/> used to render the date to a string
            </summary>
            <remarks>
            <para>
            The <see cref="T:log4net.DateFormatter.IDateFormatter"/> used to render the date to a string
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions">
            <summary>
            Initialize the converter pattern based on the <see cref="P:log4net.Util.PatternConverter.Option"/> property.
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.DatePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Convert the pattern into the rendered message
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Pass the <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/> to the <see cref="T:log4net.DateFormatter.IDateFormatter"/>
            for it to render it to the writer.
            </para>
            <para>
            The <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/> passed is in the local time zone.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.Pattern.DatePatternConverter.declaringType">
            <summary>
            The fully qualified type of the DatePatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.ExceptionPatternConverter">
            <summary>
            Write the exception text to the output
            </summary>
            <remarks>
            <para>
            If an exception object is stored in the logging event
            it will be rendered into the pattern output with a
            trailing newline.
            </para>
            <para>
            If there is no exception then nothing will be output
            and no trailing newline will be appended.
            It is typical to put a newline before the exception
            and to have the exception as the last data in the pattern.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.ExceptionPatternConverter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Layout.Pattern.ExceptionPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the exception text to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            If an exception object is stored in the logging event
            it will be rendered into the pattern output with a
            trailing newline.
            </para>
            <para>
            If there is no exception or the exception property specified
            by the Option value does not exist then nothing will be output
            and no trailing newline will be appended.
            It is typical to put a newline before the exception
            and to have the exception as the last data in the pattern.
            </para>
            <para>
            Recognized values for the Option parameter are:
            </para>
            <list type="bullet">
            	<item>
            		<description>Message</description>
            	</item>
            	<item>
            		<description>Source</description>
            	</item>
            	<item>
            		<description>StackTrace</description>
            	</item>
            	<item>
            		<description>TargetSite</description>
            	</item>
            	<item>
            		<description>HelpLink</description>
            	</item>		
            </list>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.FileLocationPatternConverter">
            <summary>
            Writes the caller location file name to the output
            </summary>
            <remarks>
            <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.FileName"/> for
            the event to the output writer.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.FileLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the caller location file name to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.FileName"/> for
            the <paramref name="loggingEvent"/> to the output <paramref name="writer"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.FullLocationPatternConverter">
            <summary>
            Write the caller location info to the output
            </summary>
            <remarks>
            <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.FullInfo"/> to the output writer.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.FullLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the caller location info to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.FullInfo"/> to the output writer.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.IdentityPatternConverter">
            <summary>
            Writes the event identity to the output
            </summary>
            <remarks>
            <para>
            Writes the value of the <see cref="P:log4net.Core.LoggingEvent.Identity"/> to
            the output writer.
            </para>
            </remarks>
            <author>Daniel Cazzulino</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.IdentityPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Writes the event identity to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Writes the value of the <paramref name="loggingEvent"/> 
            <see cref="P:log4net.Core.LoggingEvent.Identity"/> to
            the output <paramref name="writer"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.LevelPatternConverter">
            <summary>
            Write the event level to the output
            </summary>
            <remarks>
            <para>
            Writes the display name of the event <see cref="P:log4net.Core.LoggingEvent.Level"/>
            to the writer.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.LevelPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the event level to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Writes the <see cref="P:log4net.Core.Level.DisplayName"/> of the <paramref name="loggingEvent"/> <see cref="P:log4net.Core.LoggingEvent.Level"/>
            to the <paramref name="writer"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.LineLocationPatternConverter">
            <summary>
            Write the caller location line number to the output
            </summary>
            <remarks>
            <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.LineNumber"/> for
            the event to the output writer.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.LineLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the caller location line number to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.LineNumber"/> for
            the <paramref name="loggingEvent"/> to the output <paramref name="writer"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.LoggerPatternConverter">
            <summary>
            Converter for logger name
            </summary>
            <remarks>
            <para>
            Outputs the <see cref="P:log4net.Core.LoggingEvent.LoggerName"/> of the event.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.LoggerPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)">
            <summary>
            Gets the fully qualified name of the logger
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>The fully qualified logger name</returns>
            <remarks>
            <para>
            Returns the <see cref="P:log4net.Core.LoggingEvent.LoggerName"/> of the <paramref name="loggingEvent"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.MessagePatternConverter">
            <summary>
            Writes the event message to the output
            </summary>
            <remarks>
            <para>
            Uses the <see cref="M:log4net.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)"/> method
            to write out the event message.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.MessagePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Writes the event message to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Uses the <see cref="M:log4net.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)"/> method
            to write out the event message.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.MethodLocationPatternConverter">
            <summary>
            Write the method name to the output
            </summary>
            <remarks>
            <para>
            Writes the caller location <see cref="P:log4net.Core.LocationInfo.MethodName"/> to
            the output.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.MethodLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the method name to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Writes the caller location <see cref="P:log4net.Core.LocationInfo.MethodName"/> to
            the output.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.NamedPatternConverter">
            <summary>
            Converter to output and truncate <c>'.'</c> separated strings
            </summary>
            <remarks>
            <para>
            This abstract class supports truncating a <c>'.'</c> separated string
            to show a specified number of elements from the right hand side.
            This is used to truncate class names that are fully qualified.
            </para>
            <para>
            Subclasses should override the <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)"/> method to
            return the fully qualified string.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions">
            <summary>
            Initialize the converter 
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)">
            <summary>
            Get the fully qualified string data
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the fully qualified name</returns>
            <remarks>
            <para>
            Overridden by subclasses to get the fully qualified name before the
            precision is applied to it.
            </para>
            <para>
            Return the fully qualified <c>'.'</c> (dot/period) separated string.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.NamedPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Convert the pattern to the rendered message
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            Render the <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)"/> to the precision
            specified by the <see cref="P:log4net.Util.PatternConverter.Option"/> property.
            </remarks>
        </member>
        <member name="F:log4net.Layout.Pattern.NamedPatternConverter.declaringType">
            <summary>
            The fully qualified type of the NamedPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.NdcPatternConverter">
            <summary>
            Converter to include event NDC
            </summary>
            <remarks>
            <para>
            Outputs the value of the event property named <c>NDC</c>.
            </para>
            <para>
            The <see cref="T:log4net.Layout.Pattern.PropertyPatternConverter"/> should be used instead.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.NdcPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the event NDC to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            As the thread context stacks are now stored in named event properties
            this converter simply looks up the value of the <c>NDC</c> property.
            </para>
            <para>
            The <see cref="T:log4net.Layout.Pattern.PropertyPatternConverter"/> should be used instead.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.PatternLayoutConverter">
            <summary>
            Abstract class that provides the formatting functionality that 
            derived classes need.
            </summary>
            <remarks>
            Conversion specifiers in a conversion patterns are parsed to
            individual PatternConverters. Each of which is responsible for
            converting a logging event in a converter specific manner.
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.PatternLayoutConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Layout.Pattern.PatternLayoutConverter" /> class.
            </summary>
        </member>
        <member name="P:log4net.Layout.Pattern.PatternLayoutConverter.IgnoresException">
            <summary>
            Flag indicating if this converter handles the logging event exception
            </summary>
            <value><c>false</c> if this converter handles the logging event exception</value>
            <remarks>
            <para>
            If this converter handles the exception object contained within
            <see cref="T:log4net.Core.LoggingEvent"/>, then this property should be set to
            <c>false</c>. Otherwise, if the layout ignores the exception
            object, then the property should be set to <c>true</c>.
            </para>
            <para>
            Set this value to override a this default setting. The default
            value is <c>true</c>, this converter does not handle the exception.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.PatternLayoutConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the correct way.
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent" /> on which the pattern converter should be executed.</param>
        </member>
        <member name="M:log4net.Layout.Pattern.PatternLayoutConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the correct way.
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">The state object on which the pattern converter should be executed.</param>
        </member>
        <member name="F:log4net.Layout.Pattern.PatternLayoutConverter.m_ignoresException">
            <summary>
            Flag indicating if this converter handles exceptions
            </summary>
            <remarks>
            <c>false</c> if this converter handles exceptions
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.PropertyPatternConverter">
            <summary>
            Property pattern converter
            </summary>
            <remarks>
            <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option"/>
            property.
            </para>
            <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option"/> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.PropertyPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the property value to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option"/>
            property.
            </para>
            <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option"/> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.RelativeTimePatternConverter">
            <summary>
            Converter to output the relative time of the event
            </summary>
            <remarks>
            <para>
            Converter to output the time of the event relative to the start of the program.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.RelativeTimePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the relative time to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Writes out the relative time of the event in milliseconds.
            That is the number of milliseconds between the event <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/>
            and the <see cref="P:log4net.Core.LoggingEvent.StartTime"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.RelativeTimePatternConverter.TimeDifferenceInMillis(System.DateTime,System.DateTime)">
            <summary>
            Helper method to get the time difference between two DateTime objects
            </summary>
            <param name="start">start time (in the current local time zone)</param>
            <param name="end">end time (in the current local time zone)</param>
            <returns>the time difference in milliseconds</returns>
        </member>
        <member name="T:log4net.Layout.Pattern.StackTraceDetailPatternConverter">
            <summary>
            Write the caller stack frames to the output
            </summary>
            <remarks>
            <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.StackFrames"/> to the output writer, using format:
            type3.MethodCall3(type param,...) > type2.MethodCall2(type param,...) > type1.MethodCall1(type param,...)
            </para>
            </remarks>
            <author>Adam Davies</author>
        </member>
        <member name="F:log4net.Layout.Pattern.StackTraceDetailPatternConverter.declaringType">
            <summary>
            The fully qualified type of the StackTraceDetailPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.StackTracePatternConverter">
            <summary>
            Write the caller stack frames to the output
            </summary>
            <remarks>
            <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.StackFrames"/> to the output writer, using format:
            type3.MethodCall3 > type2.MethodCall2 > type1.MethodCall1
            </para>
            </remarks>
            <author>Michael Cromwell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.StackTracePatternConverter.ActivateOptions">
            <summary>
            Initialize the converter
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Layout.Pattern.StackTracePatternConverter.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.Pattern.StackTracePatternConverter.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.Pattern.StackTracePatternConverter.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.StackTracePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the strack frames to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.StackFrames"/> to the output writer.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.StackTracePatternConverter.GetMethodInformation(log4net.Core.MethodItem)">
            <summary>
            Returns the Name of the method
            </summary>
            <param name="method"></param>
            <remarks>This method was created, so this class could be used as a base class for StackTraceDetailPatternConverter</remarks>
            <returns>string</returns>
        </member>
        <member name="F:log4net.Layout.Pattern.StackTracePatternConverter.declaringType">
            <summary>
            The fully qualified type of the StackTracePatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.ThreadPatternConverter">
            <summary>
            Converter to include event thread name
            </summary>
            <remarks>
            <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.ThreadName"/> to the output.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.ThreadPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the ThreadName to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.ThreadName"/> to the <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.TypeNamePatternConverter">
            <summary>
            Pattern converter for the class name
            </summary>
            <remarks>
            <para>
            Outputs the <see cref="P:log4net.Core.LocationInfo.ClassName"/> of the event.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.TypeNamePatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)">
            <summary>
            Gets the fully qualified name of the class
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>The fully qualified type name for the caller location</returns>
            <remarks>
            <para>
            Returns the <see cref="P:log4net.Core.LocationInfo.ClassName"/> of the <paramref name="loggingEvent"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.UserNamePatternConverter">
            <summary>
            Converter to include event user name
            </summary>
            <author>Douglas de la Torre</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.UserNamePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Convert the pattern to the rendered message
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
        </member>
        <member name="T:log4net.Layout.Pattern.UtcDatePatternConverter">
            <summary>
            Write the TimeStamp to the output
            </summary>
            <remarks>
            <para>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter"/> to format 
            the date of a <see cref="T:log4net.Core.LoggingEvent"/>.
            </para>
            <para>
            Uses a <see cref="T:log4net.DateFormatter.IDateFormatter"/> to format the <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/> 
            in Universal time.
            </para>
            <para>
            See the <see cref="T:log4net.Layout.Pattern.DatePatternConverter"/> for details on the date pattern syntax.
            </para>
            </remarks>
            <seealso cref="T:log4net.Layout.Pattern.DatePatternConverter"/>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.UtcDatePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the TimeStamp to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            <para>
            Pass the <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/> to the <see cref="T:log4net.DateFormatter.IDateFormatter"/>
            for it to render it to the writer.
            </para>
            <para>
            The <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/> passed is in the local time zone, this is converted
            to Universal time before it is rendered.
            </para>
            </remarks>
            <seealso cref="T:log4net.Layout.Pattern.DatePatternConverter"/>
        </member>
        <member name="F:log4net.Layout.Pattern.UtcDatePatternConverter.declaringType">
            <summary>
            The fully qualified type of the UtcDatePatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Layout.RawLayoutConverter">
            <summary>
            Type converter for the <see cref="T:log4net.Layout.IRawLayout"/> interface
            </summary>
            <remarks>
            <para>
            Used to convert objects to the <see cref="T:log4net.Layout.IRawLayout"/> interface.
            Supports converting from the <see cref="T:log4net.Layout.ILayout"/> interface to
            the <see cref="T:log4net.Layout.IRawLayout"/> interface using the <see cref="T:log4net.Layout.Layout2RawLayoutAdapter"/>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.RawLayoutConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the sourceType be converted to an <see cref="T:log4net.Layout.IRawLayout"/>
            </summary>
            <param name="sourceType">the source to be to be converted</param>
            <returns><c>true</c> if the source type can be converted to <see cref="T:log4net.Layout.IRawLayout"/></returns>
            <remarks>
            <para>
            Test if the <paramref name="sourceType"/> can be converted to a
            <see cref="T:log4net.Layout.IRawLayout"/>. Only <see cref="T:log4net.Layout.ILayout"/> is supported
            as the <paramref name="sourceType"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.RawLayoutConverter.ConvertFrom(System.Object)">
            <summary>
            Convert the value to a <see cref="T:log4net.Layout.IRawLayout"/> object
            </summary>
            <param name="source">the value to convert</param>
            <returns>the <see cref="T:log4net.Layout.IRawLayout"/> object</returns>
            <remarks>
            <para>
            Convert the <paramref name="source"/> object to a 
            <see cref="T:log4net.Layout.IRawLayout"/> object. If the <paramref name="source"/> object
            is a <see cref="T:log4net.Layout.ILayout"/> then the <see cref="T:log4net.Layout.Layout2RawLayoutAdapter"/>
            is used to adapt between the two interfaces, otherwise an
            exception is thrown.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.RawPropertyLayout">
            <summary>
            Extract the value of a property from the <see cref="T:log4net.Core.LoggingEvent"/>
            </summary>
            <remarks>
            <para>
            Extract the value of a property from the <see cref="T:log4net.Core.LoggingEvent"/>
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.RawPropertyLayout.#ctor">
            <summary>
            Constructs a RawPropertyLayout
            </summary>
        </member>
        <member name="P:log4net.Layout.RawPropertyLayout.Key">
            <summary>
            The name of the value to lookup in the LoggingEvent Properties collection.
            </summary>
            <value>
            Value to lookup in the LoggingEvent Properties collection
            </value>
            <remarks>
            <para>
            String name of the property to lookup in the <see cref="T:log4net.Core.LoggingEvent"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.RawPropertyLayout.Format(log4net.Core.LoggingEvent)">
            <summary>
            Lookup the property for <see cref="P:log4net.Layout.RawPropertyLayout.Key"/>
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns property value</returns>
            <remarks>
            <para>
            Looks up and returns the object value of the property
            named <see cref="P:log4net.Layout.RawPropertyLayout.Key"/>. If there is no property defined
            with than name then <c>null</c> will be returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.RawTimeStampLayout">
            <summary>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent"/>
            </summary>
            <remarks>
            <para>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent"/>
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.RawTimeStampLayout.#ctor">
            <summary>
            Constructs a RawTimeStampLayout
            </summary>
        </member>
        <member name="M:log4net.Layout.RawTimeStampLayout.Format(log4net.Core.LoggingEvent)">
            <summary>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/> as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns the time stamp</returns>
            <remarks>
            <para>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/> as a <see cref="T:System.DateTime"/>.
            </para>
            <para>
            The time stamp is in local time. To format the time stamp
            in universal time use <see cref="T:log4net.Layout.RawUtcTimeStampLayout"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.RawUtcTimeStampLayout">
            <summary>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent"/>
            </summary>
            <remarks>
            <para>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent"/>
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.RawUtcTimeStampLayout.#ctor">
            <summary>
            Constructs a RawUtcTimeStampLayout
            </summary>
        </member>
        <member name="M:log4net.Layout.RawUtcTimeStampLayout.Format(log4net.Core.LoggingEvent)">
            <summary>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/> as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns the time stamp</returns>
            <remarks>
            <para>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp"/> as a <see cref="T:System.DateTime"/>.
            </para>
            <para>
            The time stamp is in universal time. To format the time stamp
            in local time use <see cref="T:log4net.Layout.RawTimeStampLayout"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.SimpleLayout">
            <summary>
            A very simple layout
            </summary>
            <remarks>
            <para>
            SimpleLayout consists of the level of the log statement,
            followed by " - " and then the log message itself. For example,
            <code>
            DEBUG - Hello world
            </code>
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.SimpleLayout.#ctor">
            <summary>
            Constructs a SimpleLayout
            </summary>
        </member>
        <member name="M:log4net.Layout.SimpleLayout.ActivateOptions">
            <summary>
            Initialize layout options
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Layout.SimpleLayout.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.SimpleLayout.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.SimpleLayout.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.SimpleLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Produces a simple formatted output.
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <remarks>
            <para>
            Formats the event as the level of the even,
            followed by " - " and then the log message itself. The
            output is terminated by a newline.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.XmlLayout">
             <summary>
             Layout that formats the log events as XML elements.
             </summary>
             <remarks>
             <para>
             The output of the <see cref="T:log4net.Layout.XmlLayout" /> consists of a series of 
             log4net:event elements. It does not output a complete well-formed XML 
             file. The output is designed to be included as an <em>external entity</em>
             in a separate file to form a correct XML file.
             </para>
             <para>
             For example, if <c>abc</c> is the name of the file where
             the <see cref="T:log4net.Layout.XmlLayout" /> output goes, then a well-formed XML file would 
             be:
             </para>
             <code lang="XML">
             &lt;?xml version="1.0" ?&gt;
             
             &lt;!DOCTYPE log4net:events SYSTEM "log4net-events.dtd" [&lt;!ENTITY data SYSTEM "abc"&gt;]&gt;
            
             &lt;log4net:events version="1.2" xmlns:log4net="http://logging.apache.org/log4net/schemas/log4net-events-1.2&gt;
                 &amp;data;
             &lt;/log4net:events&gt;
             </code>
             <para>
             This approach enforces the independence of the <see cref="T:log4net.Layout.XmlLayout" /> 
             and the appender where it is embedded.
             </para>
             <para>
             The <c>version</c> attribute helps components to correctly
             interpret output generated by <see cref="T:log4net.Layout.XmlLayout" />. The value of 
             this attribute should be "1.2" for release 1.2 and later.
             </para>
             <para>
             Alternatively the <c>Header</c> and <c>Footer</c> properties can be
             configured to output the correct XML header, open tag and close tag.
             When setting the <c>Header</c> and <c>Footer</c> properties it is essential
             that the underlying data store not be appendable otherwise the data
             will become invalid XML.
             </para>
             </remarks>
             <author>Nicko Cadell</author>
             <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.XmlLayout.#ctor">
            <summary>
            Constructs an XmlLayout
            </summary>
        </member>
        <member name="M:log4net.Layout.XmlLayout.#ctor(System.Boolean)">
            <summary>
            Constructs an XmlLayout.
            </summary>
            <remarks>
            <para>
            The <b>LocationInfo</b> option takes a boolean value. By
            default, it is set to false which means there will be no location
            information output by this layout. If the the option is set to
            true, then the file name and line number of the statement
            at the origin of the log statement will be output. 
            </para>
            <para>
            If you are embedding this layout within an SmtpAppender
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayout.Prefix">
            <summary>
            The prefix to use for all element names
            </summary>
            <remarks>
            <para>
            The default prefix is <b>log4net</b>. Set this property
            to change the prefix. If the prefix is set to an empty string
            then no prefix will be written.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayout.Base64EncodeMessage">
            <summary>
            Set whether or not to base64 encode the message.
            </summary>
            <remarks>
            <para>
            By default the log message will be written as text to the xml
            output. This can cause problems when the message contains binary
            data. By setting this to true the contents of the message will be
            base64 encoded. If this is set then invalid character replacement
            (see <see cref="P:log4net.Layout.XmlLayoutBase.InvalidCharReplacement"/>) will not be performed
            on the log message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayout.Base64EncodeProperties">
            <summary>
            Set whether or not to base64 encode the property values.
            </summary>
            <remarks>
            <para>
            By default the properties will be written as text to the xml
            output. This can cause problems when one or more properties contain
            binary data. By setting this to true the values of the properties
            will be base64 encoded. If this is set then invalid character replacement
            (see <see cref="P:log4net.Layout.XmlLayoutBase.InvalidCharReplacement"/>) will not be performed
            on the property values.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.XmlLayout.ActivateOptions">
            <summary>
            Initialize layout options
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Layout.XmlLayout.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.XmlLayout.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.XmlLayout.ActivateOptions"/> must be called again.
            </para>
            <para>
            Builds a cache of the element names
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.XmlLayout.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)">
            <summary>
            Does the actual writing of the XML.
            </summary>
            <param name="writer">The writer to use to output the event to.</param>
            <param name="loggingEvent">The event to write.</param>
            <remarks>
            <para>
            Override the base class <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)"/> method
            to write the <see cref="T:log4net.Core.LoggingEvent"/> to the <see cref="T:System.Xml.XmlWriter"/>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.XmlLayout.m_prefix">
            <summary>
            The prefix to use for all generated element names
            </summary>
        </member>
        <member name="T:log4net.Layout.XmlLayoutBase">
            <summary>
            Layout that formats the log events as XML elements.
            </summary>
            <remarks>
            <para>
            This is an abstract class that must be subclassed by an implementation 
            to conform to a specific schema.
            </para>
            <para>
            Deriving classes must implement the <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)"/> method.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.XmlLayoutBase.#ctor">
            <summary>
            Protected constructor to support subclasses
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Layout.XmlLayoutBase" /> class
            with no location info.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.XmlLayoutBase.#ctor(System.Boolean)">
            <summary>
            Protected constructor to support subclasses
            </summary>
            <remarks>
            <para>
            The <paramref name="locationInfo" /> parameter determines whether 
            location information will be output by the layout. If 
            <paramref name="locationInfo" /> is set to <c>true</c>, then the 
            file name and line number of the statement at the origin of the log 
            statement will be output. 
            </para>
            <para>
            If you are embedding this layout within an SMTPAppender
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayoutBase.LocationInfo">
            <summary>
            Gets a value indicating whether to include location information in 
            the XML events.
            </summary>
            <value>
            <c>true</c> if location information should be included in the XML 
            events; otherwise, <c>false</c>.
            </value>
            <remarks>
            <para>
            If <see cref="P:log4net.Layout.XmlLayoutBase.LocationInfo" /> is set to <c>true</c>, then the file 
            name and line number of the statement at the origin of the log 
            statement will be output. 
            </para>
            <para>
            If you are embedding this layout within an <c>SMTPAppender</c>
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayoutBase.InvalidCharReplacement">
            <summary>
            The string to replace characters that can not be expressed in XML with.
            <remarks>
            <para>
            Not all characters may be expressed in XML. This property contains the
            string to replace those that can not with. This defaults to a ?. Set it
            to the empty string to simply remove offending characters. For more
            details on the allowed character ranges see http://www.w3.org/TR/REC-xml/#charsets
            Character replacement will occur in  the log message, the property names 
            and the property values.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:log4net.Layout.XmlLayoutBase.ActivateOptions">
            <summary>
            Initialize layout options
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Layout.XmlLayoutBase.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.XmlLayoutBase.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.XmlLayoutBase.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayoutBase.ContentType">
            <summary>
            Gets the content type output by this layout. 
            </summary>
            <value>
            As this is the XML layout, the value is always <c>"text/xml"</c>.
            </value>
            <remarks>
            <para>
            As this is the XML layout, the value is always <c>"text/xml"</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.XmlLayoutBase.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Produces a formatted string.
            </summary>
            <param name="loggingEvent">The event being logged.</param>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <remarks>
            <para>
            Format the <see cref="T:log4net.Core.LoggingEvent"/> and write it to the <see cref="T:System.IO.TextWriter"/>.
            </para>
            <para>
            This method creates an <see cref="T:System.Xml.XmlTextWriter"/> that writes to the
            <paramref name="writer"/>. The <see cref="T:System.Xml.XmlTextWriter"/> is passed 
            to the <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)"/> method. Subclasses should override the
            <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)"/> method rather than this method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)">
            <summary>
            Does the actual writing of the XML.
            </summary>
            <param name="writer">The writer to use to output the event to.</param>
            <param name="loggingEvent">The event to write.</param>
            <remarks>
            <para>
            Subclasses should override this method to format
            the <see cref="T:log4net.Core.LoggingEvent"/> as XML.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.XmlLayoutBase.m_locationInfo">
            <summary>
            Flag to indicate if location information should be included in
            the XML events.
            </summary>
        </member>
        <member name="F:log4net.Layout.XmlLayoutBase.m_invalidCharReplacement">
            <summary>
            The string to replace invalid chars with
            </summary>
        </member>
        <member name="T:log4net.Layout.XmlLayoutSchemaLog4j">
            <summary>
            Layout that formats the log events as XML elements compatible with the log4j schema
            </summary>
            <remarks>
            <para>
            Formats the log events according to the http://logging.apache.org/log4j schema.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Layout.XmlLayoutSchemaLog4j.s_date1970">
            <summary>
            The 1st of January 1970 in UTC
            </summary>
        </member>
        <member name="M:log4net.Layout.XmlLayoutSchemaLog4j.#ctor">
            <summary>
            Constructs an XMLLayoutSchemaLog4j
            </summary>
        </member>
        <member name="M:log4net.Layout.XmlLayoutSchemaLog4j.#ctor(System.Boolean)">
            <summary>
            Constructs an XMLLayoutSchemaLog4j.
            </summary>
            <remarks>
            <para>
            The <b>LocationInfo</b> option takes a boolean value. By
            default, it is set to false which means there will be no location
            information output by this layout. If the the option is set to
            true, then the file name and line number of the statement
            at the origin of the log statement will be output. 
            </para>
            <para>
            If you are embedding this layout within an SMTPAppender
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayoutSchemaLog4j.Version">
            <summary>
            The version of the log4j schema to use.
            </summary>
            <remarks>
            <para>
            Only version 1.2 of the log4j schema is supported.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.XmlLayoutSchemaLog4j.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)">
            <summary>
            Actually do the writing of the xml
            </summary>
            <param name="writer">the writer to use</param>
            <param name="loggingEvent">the event to write</param>
            <remarks>
            <para>
            Generate XML that is compatible with the log4j schema.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.LogicalThreadContext">
            <summary>
            The log4net Logical Thread Context.
            </summary>
            <remarks>
            <para>
            The <c>LogicalThreadContext</c> provides a location for <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> specific debugging 
            information to be stored.
            The <c>LogicalThreadContext</c> properties override any <see cref="T:log4net.ThreadContext"/> or <see cref="T:log4net.GlobalContext"/>
            properties with the same name.
            </para>
            <para>
            For .NET Standard 1.3 this class uses
            System.Threading.AsyncLocal rather than <see
            cref="T:System.Runtime.Remoting.Messaging.CallContext"/>.
            </para>
            <para>
            The Logical Thread Context has a properties map and a stack.
            The properties and stack can 
            be included in the output of log messages. The <see cref="T:log4net.Layout.PatternLayout"/>
            supports selecting and outputting these properties.
            </para>
            <para>
            The Logical Thread Context provides a diagnostic context for the current call context. 
            This is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.
            </para>
            <para>
            The Logical Thread Context is managed on a per <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> basis.
            </para>
            <para>
            The <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> requires a link time 
            <see cref="T:System.Security.Permissions.SecurityPermission"/> for the
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure"/>.
            If the calling code does not have this permission then this context will be disabled.
            It will not store any property values set on it.
            </para>
            </remarks>
            <example>Example of using the thread context properties to store a username.
            <code lang="C#">
            LogicalThreadContext.Properties["user"] = userName;
            log.Info("This log message has a LogicalThreadContext Property called 'user'");
            </code>
            </example>
            <example>Example of how to push a message into the context stack
            <code lang="C#">
            using(LogicalThreadContext.Stacks["LDC"].Push("my context message"))
            {
            	log.Info("This log message has a LogicalThreadContext Stack message that includes 'my context message'");
            
            } // at the end of the using block the message is automatically popped 
            </code>
            </example>
            <threadsafety static="true" instance="true" />
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.LogicalThreadContext.#ctor">
            <summary>
            Private Constructor. 
            </summary>
            <remarks>
            <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.LogicalThreadContext.Properties">
            <summary>
            The thread properties map
            </summary>
            <value>
            The thread properties map
            </value>
            <remarks>
            <para>
            The <c>LogicalThreadContext</c> properties override any <see cref="T:log4net.ThreadContext"/> 
            or <see cref="T:log4net.GlobalContext"/> properties with the same name.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.LogicalThreadContext.Stacks">
            <summary>
            The thread stacks
            </summary>
            <value>
            stack map
            </value>
            <remarks>
            <para>
            The logical thread stacks.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.LogicalThreadContext.s_properties">
            <summary>
            The thread context properties instance
            </summary>
        </member>
        <member name="F:log4net.LogicalThreadContext.s_stacks">
            <summary>
            The thread context stacks instance
            </summary>
        </member>
        <member name="T:log4net.LogManager">
            <summary>
            This class is used by client applications to request logger instances.
            </summary>
            <remarks>
            <para>
            This class has static methods that are used by a client to request
            a logger instance. The <see cref="M:GetLogger(string)"/> method is 
            used to retrieve a logger.
            </para>
            <para>
            See the <see cref="T:log4net.ILog"/> interface for more details.
            </para>
            </remarks>
            <example>Simple example of logging messages
            <code lang="C#">
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code>
            </example>
            <threadsafety static="true" instance="true" />
            <seealso cref="T:log4net.ILog"/>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.LogManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.LogManager" /> class. 
            </summary>
            <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
        </member>
        <member name="M:log4net.LogManager.Exists(System.String)">
            <overloads>Returns the named logger if it exists.</overloads>
            <summary>
            Returns the named logger if it exists.
            </summary>
            <remarks>
            <para>
            If the named logger exists (in the default repository) then it
            returns a reference to the logger, otherwise it returns <c>null</c>.
            </para>
            </remarks>
            <param name="name">The fully qualified logger name to look for.</param>
            <returns>The logger found, or <c>null</c> if no logger could be found.</returns>
        </member>
        <member name="M:log4net.LogManager.GetCurrentLoggers">
            <overloads>Get the currently defined loggers.</overloads>
            <summary>
            Returns all the currently defined loggers in the default repository.
            </summary>
            <remarks>
            <para>The root logger is <b>not</b> included in the returned array.</para>
            </remarks>
            <returns>All the defined loggers.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.String)">
            <overloads>Get or create a logger.</overloads>
            <summary>
            Retrieves or creates a named logger.
            </summary>
            <remarks>
            <para>
            Retrieves a logger named as the <paramref name="name"/>
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
            <para>By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
            </remarks>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
        </member>
        <member name="M:log4net.LogManager.Exists(System.String,System.String)">
            <summary>
            Returns the named logger if it exists.
            </summary>
            <remarks>
            <para>
            If the named logger exists (in the specified repository) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
            </remarks>
            <param name="repository">The repository to lookup in.</param>
            <param name="name">The fully qualified logger name to look for.</param>
            <returns>
            The logger found, or <c>null</c> if the logger doesn't exist in the specified 
            repository.
            </returns>
        </member>
        <member name="M:log4net.LogManager.Exists(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the named logger if it exists.
            </summary>
            <remarks>
            <para>
            If the named logger exists (in the repository for the specified assembly) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <param name="name">The fully qualified logger name to look for.</param>
            <returns>
            The logger, or <c>null</c> if the logger doesn't exist in the specified
            assembly's repository.
            </returns>
        </member>
        <member name="M:log4net.LogManager.GetCurrentLoggers(System.String)">
            <summary>
            Returns all the currently defined loggers in the specified repository.
            </summary>
            <param name="repository">The repository to lookup in.</param>
            <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
            <returns>All the defined loggers.</returns>
        </member>
        <member name="M:log4net.LogManager.GetCurrentLoggers(System.Reflection.Assembly)">
            <summary>
            Returns all the currently defined loggers in the specified assembly's repository.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
            <returns>All the defined loggers.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.String,System.String)">
            <summary>
            Retrieves or creates a named logger.
            </summary>
            <remarks>
            <para>
            Retrieve a logger named as the <paramref name="name"/>
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
            <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
            </remarks>
            <param name="repository">The repository to lookup in.</param>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.Reflection.Assembly,System.String)">
            <summary>
            Retrieves or creates a named logger.
            </summary>
            <remarks>
            <para>
            Retrieve a logger named as the <paramref name="name"/>
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
            <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.Type)">
            <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)"/>.
            </summary>
            <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="type">The full name of <paramref name="type"/> will be used as the name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.String,System.Type)">
            <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)"/>.
            </summary>
            <remarks>
            Gets the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="repository">The repository to lookup in.</param>
            <param name="type">The full name of <paramref name="type"/> will be used as the name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.Reflection.Assembly,System.Type)">
            <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)"/>.
            </summary>
            <remarks>
            Gets the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <param name="type">The full name of <paramref name="type"/> will be used as the name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
        </member>
        <member name="M:log4net.LogManager.Shutdown">
            <summary>
            Shuts down the log4net system.
            </summary>
            <remarks>
            <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in all the
            default repositories.
            </para>
            <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
            <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.LogManager.ShutdownRepository">
            <overloads>Shutdown a logger repository.</overloads>
            <summary>
            Shuts down the default repository.
            </summary>
            <remarks>
            <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            default repository.
            </para>
            <para>Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
            <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.LogManager.ShutdownRepository(System.String)">
            <summary>
            Shuts down the repository for the repository specified.
            </summary>
            <remarks>
            <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            <paramref name="repository"/> specified.
            </para>
            <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
            <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
            <param name="repository">The repository to shutdown.</param>
        </member>
        <member name="M:log4net.LogManager.ShutdownRepository(System.Reflection.Assembly)">
            <summary>
            Shuts down the repository specified.
            </summary>
            <remarks>
            <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            repository. The repository is looked up using
            the <paramref name="repositoryAssembly"/> specified.
            </para>
            <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
            <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
        </member>
        <member name="M:log4net.LogManager.ResetConfiguration">
            <overloads>Reset the configuration of a repository</overloads>
            <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
            <remarks>
            <para>
            Resets all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug"/>. Moreover,
            message disabling is set to its default "off" value.
            </para>		
            </remarks>
        </member>
        <member name="M:log4net.LogManager.ResetConfiguration(System.String)">
            <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
            <remarks>
            <para>
            Reset all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug"/>. Moreover,
            message disabling is set to its default "off" value.
            </para>		
            </remarks>
            <param name="repository">The repository to reset.</param>
        </member>
        <member name="M:log4net.LogManager.ResetConfiguration(System.Reflection.Assembly)">
            <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
            <remarks>
            <para>
            Reset all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug"/>. Moreover,
            message disabling is set to its default "off" value.
            </para>		
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository to reset.</param>
        </member>
        <member name="M:log4net.LogManager.GetLoggerRepository">
            <overloads>Get the logger repository.</overloads>
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.
            </summary>
            <remarks>
            <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified
            by the callers assembly (<see cref="M:Assembly.GetCallingAssembly()"/>).
            </para>
            </remarks>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> instance for the default repository.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLoggerRepository(System.String)">
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.
            </summary>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.</returns>
            <remarks>
            <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified
            by the <paramref name="repository"/> argument.
            </para>
            </remarks>
            <param name="repository">The repository to lookup in.</param>
        </member>
        <member name="M:log4net.LogManager.GetLoggerRepository(System.Reflection.Assembly)">
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.
            </summary>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.</returns>
            <remarks>
            <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified
            by the <paramref name="repositoryAssembly"/> argument.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
        </member>
        <member name="M:log4net.LogManager.GetRepository">
            <overloads>Get a logger repository.</overloads>
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.
            </summary>
            <remarks>
            <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified
            by the callers assembly (<see cref="M:Assembly.GetCallingAssembly()"/>).
            </para>
            </remarks>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> instance for the default repository.</returns>
        </member>
        <member name="M:log4net.LogManager.GetRepository(System.String)">
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.
            </summary>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.</returns>
            <remarks>
            <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified
            by the <paramref name="repository"/> argument.
            </para>
            </remarks>
            <param name="repository">The repository to lookup in.</param>
        </member>
        <member name="M:log4net.LogManager.GetRepository(System.Reflection.Assembly)">
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.
            </summary>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository"/> instance.</returns>
            <remarks>
            <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified
            by the <paramref name="repositoryAssembly"/> argument.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
        </member>
        <member name="M:log4net.LogManager.CreateDomain(System.Type)">
            <overloads>Create a domain</overloads>
            <summary>
            Creates a repository with the specified repository type.
            </summary>
            <remarks>
            <para>
            <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
            </para>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository()"/> will return 
            the same repository instance.
            </para>
            </remarks>
            <param name="repositoryType">A <see cref="T:System.Type"/> that implements <see cref="T:log4net.Repository.ILoggerRepository"/>
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
        </member>
        <member name="M:log4net.LogManager.CreateRepository(System.Type)">
            <overloads>Create a logger repository.</overloads>
            <summary>
            Creates a repository with the specified repository type.
            </summary>
            <param name="repositoryType">A <see cref="T:System.Type"/> that implements <see cref="T:log4net.Repository.ILoggerRepository"/>
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository()"/> will return 
            the same repository instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.LogManager.CreateDomain(System.String)">
            <summary>
            Creates a repository with the specified name.
            </summary>
            <remarks>
            <para>
            <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
            </para>
            <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository"/> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/> object.
            </para>
            <para>
            The <paramref name="repository"/> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception"/> will be thrown if the repository already exists.
            </para>
            </remarks>
            <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.LogManager.CreateRepository(System.String)">
            <summary>
            Creates a repository with the specified name.
            </summary>
            <remarks>
            <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository"/> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/> object.
            </para>
            <para>
            The <paramref name="repository"/> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception"/> will be thrown if the repository already exists.
            </para>
            </remarks>
            <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.LogManager.CreateDomain(System.String,System.Type)">
            <summary>
            Creates a repository with the specified name and repository type.
            </summary>
            <remarks>
            <para>
            <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
            </para>
            <para>
            The <paramref name="repository"/> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception"/> will be thrown if the repository already exists.
            </para>
            </remarks>
            <param name="repository">The name of the repository, this must be unique to the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type"/> that implements <see cref="T:log4net.Repository.ILoggerRepository"/>
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.LogManager.CreateRepository(System.String,System.Type)">
            <summary>
            Creates a repository with the specified name and repository type.
            </summary>
            <remarks>
            <para>
            The <paramref name="repository"/> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception"/> will be thrown if the repository already exists.
            </para>
            </remarks>
            <param name="repository">The name of the repository, this must be unique to the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type"/> that implements <see cref="T:log4net.Repository.ILoggerRepository"/>
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.LogManager.CreateDomain(System.Reflection.Assembly,System.Type)">
            <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
            <remarks>
            <para>
            <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
            </para>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)"/> with the
            same assembly specified will return the same repository instance.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type"/> that implements <see cref="T:log4net.Repository.ILoggerRepository"/>
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
        </member>
        <member name="M:log4net.LogManager.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)"/> with the
            same assembly specified will return the same repository instance.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type"/> that implements <see cref="T:log4net.Repository.ILoggerRepository"/>
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository"/> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> created for the repository.</returns>
        </member>
        <member name="M:log4net.LogManager.GetAllRepositories">
            <summary>
            Gets the list of currently defined repositories.
            </summary>
            <remarks>
            <para>
            Get an array of all the <see cref="T:log4net.Repository.ILoggerRepository"/> objects that have been created.
            </para>
            </remarks>
            <returns>An array of all the known <see cref="T:log4net.Repository.ILoggerRepository"/> objects.</returns>
        </member>
        <member name="M:log4net.LogManager.Flush(System.Int32)">
            <summary>
            Flushes logging events buffered in all configured appenders in the default repository.
            </summary>
            <param name="millisecondsTimeout">The maximum time in milliseconds to wait for logging events from asycnhronous appenders to be flushed.</param>
            <returns><c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="M:log4net.LogManager.WrapLogger(log4net.Core.ILogger)">
            <summary>
            Looks up the wrapper object for the logger specified.
            </summary>
            <param name="logger">The logger to get the wrapper for.</param>
            <returns>The wrapper for the logger specified.</returns>
        </member>
        <member name="M:log4net.LogManager.WrapLoggers(log4net.Core.ILogger[])">
            <summary>
            Looks up the wrapper objects for the loggers specified.
            </summary>
            <param name="loggers">The loggers to get the wrappers for.</param>
            <returns>The wrapper objects for the loggers specified.</returns>
        </member>
        <member name="M:log4net.LogManager.WrapperCreationHandler(log4net.Core.ILogger)">
            <summary>
            Create the <see cref="T:log4net.Core.ILoggerWrapper"/> objects used by
            this manager.
            </summary>
            <param name="logger">The logger to wrap.</param>
            <returns>The wrapper for the logger specified.</returns>
        </member>
        <member name="F:log4net.LogManager.s_wrapperMap">
            <summary>
            The wrapper map to use to hold the <see cref="T:log4net.Core.LogImpl"/> objects.
            </summary>
        </member>
        <member name="T:log4net.MDC">
            <summary>
            Implementation of Mapped Diagnostic Contexts.
            </summary>
            <remarks>
            <note>
            <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties"/>.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
            </note>
            <para>
            The MDC class is similar to the <see cref="T:log4net.NDC"/> class except that it is
            based on a map instead of a stack. It provides <i>mapped
            diagnostic contexts</i>. A <i>Mapped Diagnostic Context</i>, or
            MDC in short, is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.
            </para>
            <para>
            The MDC is managed on a per thread basis.
            </para>
            </remarks>
            <threadsafety static="true" instance="true" />
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.MDC.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.MDC" /> class. 
            </summary>
            <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
        </member>
        <member name="M:log4net.MDC.Get(System.String)">
            <summary>
            Gets the context value identified by the <paramref name="key" /> parameter.
            </summary>
            <param name="key">The key to lookup in the MDC.</param>
            <returns>The string value held for the key, or a <c>null</c> reference if no corresponding value is found.</returns>
            <remarks>
            <note>
            <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties"/>.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
            </note>
            <para>
            If the <paramref name="key" /> parameter does not look up to a
            previously defined context then <c>null</c> will be returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.MDC.Set(System.String,System.String)">
            <summary>
            Add an entry to the MDC
            </summary>
            <param name="key">The key to store the value under.</param>
            <param name="value">The value to store.</param>
            <remarks>
            <note>
            <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties"/>.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
            </note>
            <para>
            Puts a context value (the <paramref name="value" /> parameter) as identified
            with the <paramref name="key" /> parameter into the current thread's
            context map.
            </para>
            <para>
            If a value is already defined for the <paramref name="key" />
            specified then the value will be replaced. If the <paramref name="value" /> 
            is specified as <c>null</c> then the key value mapping will be removed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.MDC.Remove(System.String)">
            <summary>
            Removes the key value mapping for the key specified.
            </summary>
            <param name="key">The key to remove.</param>
            <remarks>
            <note>
            <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties"/>.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
            </note>
            <para>
            Remove the specified entry from this thread's MDC
            </para>
            </remarks>
        </member>
        <member name="M:log4net.MDC.Clear">
            <summary>
            Clear all entries in the MDC
            </summary>
            <remarks>
            <note>
            <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties"/>.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
            </note>
            <para>
            Remove all the entries from this thread's MDC
            </para>
            </remarks>
        </member>
        <member name="T:log4net.NDC">
            <summary>
            Implementation of Nested Diagnostic Contexts.
            </summary>
            <remarks>
            <note>
            <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks"/>.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
            </note>
            <para>
            A Nested Diagnostic Context, or NDC in short, is an instrument
            to distinguish interleaved log output from different sources. Log
            output is typically interleaved when a server handles multiple
            clients near-simultaneously.
            </para>
            <para>
            Interleaved log output can still be meaningful if each log entry
            from different contexts had a distinctive stamp. This is where NDCs
            come into play.
            </para>
            <para>
            Note that NDCs are managed on a per thread basis. The NDC class
            is made up of static methods that operate on the context of the
            calling thread.
            </para>
            </remarks>
            <example>How to push a message into the context
            <code lang="C#">
            using(NDC.Push("my context message"))
            {
            	... all log calls will have 'my context message' included ...
            
            } // at the end of the using block the message is automatically removed 
            </code>
            </example>
            <threadsafety static="true" instance="true" />
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.NDC.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.NDC" /> class. 
            </summary>
            <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
        </member>
        <member name="P:log4net.NDC.Depth">
            <summary>
            Gets the current context depth.
            </summary>
            <value>The current context depth.</value>
            <remarks>
            <note>
            <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks"/>.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
            </note>
            <para>
            The number of context values pushed onto the context stack.
            </para>
            <para>
            Used to record the current depth of the context. This can then 
            be restored using the <see cref="M:log4net.NDC.SetMaxDepth(System.Int32)"/> method.
            </para>
            </remarks>
            <seealso cref="M:log4net.NDC.SetMaxDepth(System.Int32)"/>
        </member>
        <member name="M:log4net.NDC.Clear">
            <summary>
            Clears all the contextual information held on the current thread.
            </summary>
            <remarks>
            <note>
            <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks"/>.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
            </note>
            <para>
            Clears the stack of NDC data held on the current thread.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.NDC.CloneStack">
            <summary>
            Creates a clone of the stack of context information.
            </summary>
            <returns>A clone of the context info for this thread.</returns>
            <remarks>
            <note>
            <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks"/>.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
            </note>
            <para>
            The results of this method can be passed to the <see cref="M:log4net.NDC.Inherit(System.Collections.Stack)"/> 
            method to allow child threads to inherit the context of their 
            parent thread.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.NDC.Inherit(System.Collections.Stack)">
            <summary>
            Inherits the contextual information from another thread.
            </summary>
            <param name="stack">The context stack to inherit.</param>
            <remarks>
            <note>
            <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks"/>.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
            </note>
            <para>
            This thread will use the context information from the stack
            supplied. This can be used to initialize child threads with
            the same contextual information as their parent threads. These
            contexts will <b>NOT</b> be shared. Any further contexts that
            are pushed onto the stack will not be visible to the other.
            Call <see cref="M:log4net.NDC.CloneStack"/> to obtain a stack to pass to
            this method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.NDC.Pop">
            <summary>
            Removes the top context from the stack.
            </summary>
            <returns>
            The message in the context that was removed from the top 
            of the stack.
            </returns>
            <remarks>
            <note>
            <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks"/>.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
            </note>
            <para>
            Remove the top context from the stack, and return
            it to the caller. If the stack is empty then an
            empty string (not <c>null</c>) is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.NDC.Push(System.String)">
            <summary>
            Pushes a new context message.
            </summary>
            <param name="message">The new context message.</param>
            <returns>
            An <see cref="T:System.IDisposable"/> that can be used to clean up 
            the context stack.
            </returns>
            <remarks>
            <note>
            <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks"/>.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
            </note>
            <para>
            Pushes a new context onto the context stack. An <see cref="T:System.IDisposable"/>
            is returned that can be used to clean up the context stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            context.
            </para>
            </remarks>
            <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code lang="C#">
            using(log4net.NDC.Push("NDC_Message"))
            {
            	log.Warn("This should have an NDC message");
            }
            </code>
            </example>
        </member>
        <member name="M:log4net.NDC.PushFormat(System.String,System.Object[])">
            <summary>
            Pushes a new context message.
            </summary>
            <param name="messageFormat">The new context message string format.</param>
            <param name="args">Arguments to be passed into messageFormat.</param>
            <returns>
            An <see cref="T:System.IDisposable"/> that can be used to clean up 
            the context stack.
            </returns>
            <remarks>
            <note>
            <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks"/>.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
            </note>
            <para>
            Pushes a new context onto the context stack. An <see cref="T:System.IDisposable"/>
            is returned that can be used to clean up the context stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            context.
            </para>
            </remarks>
            <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code lang="C#">
            var someValue = "ExampleContext"
            using(log4net.NDC.PushFormat("NDC_Message {0}", someValue))
            {
            	log.Warn("This should have an NDC message");
            }
            </code>
            </example>
        </member>
        <member name="M:log4net.NDC.Remove">
            <summary>
            Removes the context information for this thread. It is
            not required to call this method.
            </summary>
            <remarks>
            <note>
            <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks"/>.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
            </note>
            <para>
            This method is not implemented.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.NDC.SetMaxDepth(System.Int32)">
            <summary>
            Forces the stack depth to be at most <paramref name="maxDepth"/>.
            </summary>
            <param name="maxDepth">The maximum depth of the stack</param>
            <remarks>
            <note>
            <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks"/>.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
            </note>
            <para>
            Forces the stack depth to be at most <paramref name="maxDepth"/>.
            This may truncate the head of the stack. This only affects the 
            stack in the current thread. Also it does not prevent it from
            growing, it only sets the maximum depth at the time of the
            call. This can be used to return to a known context depth.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.ObjectRenderer.DefaultRenderer">
            <summary>
            The default object Renderer.
            </summary>
            <remarks>
            <para>
            The default renderer supports rendering objects and collections to strings.
            </para>
            <para>
            See the <see cref="M:log4net.ObjectRenderer.DefaultRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)"/> method for details of the output.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
            <summary>
            Render the object <paramref name="obj"/> to a string
            </summary>
            <param name="rendererMap">The map used to lookup renderers</param>
            <param name="obj">The object to render</param>
            <param name="writer">The writer to render to</param>
            <remarks>
            <para>
            Render the object <paramref name="obj"/> to a string.
            </para>
            <para>
            The <paramref name="rendererMap"/> parameter is
            provided to lookup and render other objects. This is
            very useful where <paramref name="obj"/> contains
            nested objects of unknown type. The <see cref="M:RendererMap.FindAndRender(object)"/>
            method can be used to render these objects.
            </para>
            <para>
            The default renderer supports rendering objects to strings as follows:
            </para>
            <list type="table">
            	<listheader>
            		<term>Value</term>
            		<description>Rendered String</description>
            	</listheader>
            	<item>
            		<term><c>null</c></term>
            		<description>
            		<para>"(null)"</para>
            		</description>
            	</item>
            	<item>
            		<term><see cref="T:System.Array"/></term>
            		<description>
            		<para>
            		For a one dimensional array this is the
            		array type name, an open brace, followed by a comma
            		separated list of the elements (using the appropriate
            		renderer), followed by a close brace. 
            		</para>
            		<para>
            		For example: <c>int[] {1, 2, 3}</c>.
            		</para>
            		<para>
            		If the array is not one dimensional the 
            		<c>Array.ToString()</c> is returned.
            		</para>
            		</description>
            	</item>
            	<item>
            		<term><see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> &amp; <see cref="T:System.Collections.IEnumerator"/></term>
            		<description>
            		<para>
            		Rendered as an open brace, followed by a comma
            		separated list of the elements (using the appropriate
            		renderer), followed by a close brace.
            		</para>
            		<para>
            		For example: <c>{a, b, c}</c>.
            		</para>
            		<para>
            		All collection classes that implement <see cref="T:System.Collections.ICollection"/> its subclasses, 
            		or generic equivalents all implement the <see cref="T:System.Collections.IEnumerable"/> interface.
            		</para>
            		</description>
            	</item>		
            	<item>
            		<term><see cref="T:System.Collections.DictionaryEntry"/></term>
            		<description>
            		<para>
            		Rendered as the key, an equals sign ('='), and the value (using the appropriate
            		renderer). 
            		</para>
            		<para>
            		For example: <c>key=value</c>.
            		</para>
            		</description>
            	</item>		
            	<item>
            		<term>other</term>
            		<description>
            		<para><c>Object.ToString()</c></para>
            		</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderArray(log4net.ObjectRenderer.RendererMap,System.Array,System.IO.TextWriter)">
            <summary>
            Render the array argument into a string
            </summary>
            <param name="rendererMap">The map used to lookup renderers</param>
            <param name="array">the array to render</param>
            <param name="writer">The writer to render to</param>
            <remarks>
            <para>
            For a one dimensional array this is the
            array type name, an open brace, followed by a comma
            separated list of the elements (using the appropriate
            renderer), followed by a close brace. For example:
            <c>int[] {1, 2, 3}</c>.
            </para>
            <para>
            If the array is not one dimensional the 
            <c>Array.ToString()</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderEnumerator(log4net.ObjectRenderer.RendererMap,System.Collections.IEnumerator,System.IO.TextWriter)">
            <summary>
            Render the enumerator argument into a string
            </summary>
            <param name="rendererMap">The map used to lookup renderers</param>
            <param name="enumerator">the enumerator to render</param>
            <param name="writer">The writer to render to</param>
            <remarks>
            <para>
            Rendered as an open brace, followed by a comma
            separated list of the elements (using the appropriate
            renderer), followed by a close brace. For example:
            <c>{a, b, c}</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderDictionaryEntry(log4net.ObjectRenderer.RendererMap,System.Collections.DictionaryEntry,System.IO.TextWriter)">
            <summary>
            Render the DictionaryEntry argument into a string
            </summary>
            <param name="rendererMap">The map used to lookup renderers</param>
            <param name="entry">the DictionaryEntry to render</param>
            <param name="writer">The writer to render to</param>
            <remarks>
            <para>
            Render the key, an equals sign ('='), and the value (using the appropriate
            renderer). For example: <c>key=value</c>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.ObjectRenderer.IObjectRenderer">
            <summary>
            Implement this interface in order to render objects as strings
            </summary>
            <remarks>
            <para>
            Certain types require special case conversion to
            string form. This conversion is done by an object renderer.
            Object renderers implement the <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>
            interface.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.ObjectRenderer.IObjectRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
            <summary>
            Render the object <paramref name="obj"/> to a string
            </summary>
            <param name="rendererMap">The map used to lookup renderers</param>
            <param name="obj">The object to render</param>
            <param name="writer">The writer to render to</param>
            <remarks>
            <para>
            Render the object <paramref name="obj"/> to a 
            string.
            </para>
            <para>
            The <paramref name="rendererMap"/> parameter is
            provided to lookup and render other objects. This is
            very useful where <paramref name="obj"/> contains
            nested objects of unknown type. The <see cref="M:RendererMap.FindAndRender(object, TextWriter)"/>
            method can be used to render these objects.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.ObjectRenderer.RendererMap">
            <summary>
            Map class objects to an <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>.
            </summary>
            <remarks>
            <para>
            Maintains a mapping between types that require special
            rendering and the <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/> that
            is used to render them.
            </para>
            <para>
            The <see cref="M:FindAndRender(object)"/> method is used to render an
            <c>object</c> using the appropriate renderers defined in this map.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.#ctor">
            <summary>
            Default Constructor
            </summary>
            <remarks>
            <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object)">
            <summary>
            Render <paramref name="obj"/> using the appropriate renderer.
            </summary>
            <param name="obj">the object to render to a string</param>
            <returns>the object rendered as a string</returns>
            <remarks>
            <para>
            This is a convenience method used to render an object to a string.
            The alternative method <see cref="M:FindAndRender(object,TextWriter)"/>
            should be used when streaming output to a <see cref="T:System.IO.TextWriter"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object,System.IO.TextWriter)">
            <summary>
            Render <paramref name="obj"/> using the appropriate renderer.
            </summary>
            <param name="obj">the object to render to a string</param>
            <param name="writer">The writer to render to</param>
            <remarks>
            <para>
            Find the appropriate renderer for the type of the
            <paramref name="obj"/> parameter. This is accomplished by calling the
            <see cref="M:Get(Type)"/> method. Once a renderer is found, it is
            applied on the object <paramref name="obj"/> and the result is returned
            as a <see cref="T:System.String"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Get(System.Object)">
            <summary>
            Gets the renderer for the specified object type
            </summary>
            <param name="obj">the object to lookup the renderer for</param>
            <returns>the renderer for <paramref name="obj"/></returns>
            <remarks>
            <param>
            Gets the renderer for the specified object type.
            </param>
            <param>
            Syntactic sugar method that calls <see cref="M:Get(Type)"/> 
            with the type of the object parameter.
            </param>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Get(System.Type)">
            <summary>
            Gets the renderer for the specified type
            </summary>
            <param name="type">the type to lookup the renderer for</param>
            <returns>the renderer for the specified type</returns>
            <remarks>
            <para>
            Returns the renderer for the specified type.
            If no specific renderer has been defined the
            <see cref="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer"/> will be returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.SearchTypeAndInterfaces(System.Type)">
            <summary>
            Internal function to recursively search interfaces
            </summary>
            <param name="type">the type to lookup the renderer for</param>
            <returns>the renderer for the specified type</returns>
        </member>
        <member name="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer">
            <summary>
            Get the default renderer instance
            </summary>
            <value>the default renderer</value>
            <remarks>
            <para>
            Get the default renderer
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Clear">
            <summary>
            Clear the map of renderers
            </summary>
            <remarks>
            <para>
            Clear the custom renderers defined by using
            <see cref="M:log4net.ObjectRenderer.RendererMap.Put(System.Type,log4net.ObjectRenderer.IObjectRenderer)"/>. The <see cref="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer"/>
            cannot be removed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Put(System.Type,log4net.ObjectRenderer.IObjectRenderer)">
            <summary>
            Register an <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/> for <paramref name="typeToRender"/>. 
            </summary>
            <param name="typeToRender">the type that will be rendered by <paramref name="renderer"/></param>
            <param name="renderer">the renderer for <paramref name="typeToRender"/></param>
            <remarks>
            <para>
            Register an object renderer for a specific source type.
            This renderer will be returned from a call to <see cref="M:Get(Type)"/>
            specifying the same <paramref name="typeToRender"/> as an argument.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Plugin.IPlugin">
            <summary>
            Interface implemented by logger repository plugins.
            </summary>
            <remarks>
            <para>
            Plugins define additional behavior that can be associated
            with a <see cref="T:log4net.Repository.ILoggerRepository"/>.
            The <see cref="T:log4net.Plugin.PluginMap"/> held by the <see cref="P:log4net.Repository.ILoggerRepository.PluginMap"/>
            property is used to store the plugins for a repository.
            </para>
            <para>
            The <c>log4net.Config.PluginAttribute</c> can be used to
            attach plugins to repositories created using configuration
            attributes.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="P:log4net.Plugin.IPlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
            <value>
            The name of the plugin.
            </value>
            <remarks>
            <para>
            Plugins are stored in the <see cref="T:log4net.Plugin.PluginMap"/>
            keyed by name. Each plugin instance attached to a
            repository must be a unique name.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.IPlugin.Attach(log4net.Repository.ILoggerRepository)">
            <summary>
            Attaches the plugin to the specified <see cref="T:log4net.Repository.ILoggerRepository"/>.
            </summary>
            <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository"/> that this plugin should be attached to.</param>
            <remarks>
            <para>
            A plugin may only be attached to a single repository.
            </para>
            <para>
            This method is called when the plugin is attached to the repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.IPlugin.Shutdown">
            <summary>
            Is called when the plugin is to shutdown.
            </summary>
            <remarks>
            <para>
            This method is called to notify the plugin that 
            it should stop operating and should detach from
            the repository.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Plugin.IPluginFactory">
            <summary>
            Interface used to create plugins.
            </summary>
            <remarks>
            <para>
            Interface used to create  a plugin.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Plugin.IPluginFactory.CreatePlugin">
            <summary>
            Creates the plugin object.
            </summary>
            <returns>the new plugin instance</returns>
            <remarks>
            <para>
            Create and return a new plugin instance.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Plugin.PluginCollection">
            <summary>
            A strongly-typed collection of <see cref="T:log4net.Plugin.IPlugin"/> objects.
            </summary>
            <author>Nicko Cadell</author>
        </member>
        <member name="T:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator">
            <summary>
            Supports type-safe iteration over a <see cref="T:log4net.Plugin.PluginCollection"/>.
            </summary>
            <exclude/>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.ReadOnly(log4net.Plugin.PluginCollection)">
            <summary>
            Creates a read-only wrapper for a <c>PluginCollection</c> instance.
            </summary>
            <param name="list">list to create a readonly wrapper arround</param>
            <returns>
            A <c>PluginCollection</c> wrapper that is read-only.
            </returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.#ctor">
            <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that has the specified initial capacity.
            </summary>
            <param name="capacity">
            The number of elements that the new <c>PluginCollection</c> is initially capable of storing.
            </param>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.#ctor(log4net.Plugin.PluginCollection)">
            <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that contains elements copied from the specified <c>PluginCollection</c>.
            </summary>
            <param name="c">The <c>PluginCollection</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.#ctor(log4net.Plugin.IPlugin[])">
            <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Plugin.IPlugin"/> array.
            </summary>
            <param name="a">The <see cref="T:log4net.Plugin.IPlugin"/> array whose elements are copied to the new list.</param>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Plugin.IPlugin"/> collection.
            </summary>
            <param name="col">The <see cref="T:log4net.Plugin.IPlugin"/> collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:log4net.Plugin.PluginCollection.Tag">
            <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
            <exclude/>
        </member>
        <member name="F:log4net.Plugin.PluginCollection.Tag.Default">
            <summary>
            A value
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.#ctor(log4net.Plugin.PluginCollection.Tag)">
            <summary>
            Allow subclasses to avoid our default constructors
            </summary>
            <param name="tag"></param>
            <exclude/>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.Count">
            <summary>
            Gets the number of elements actually contained in the <c>PluginCollection</c>.
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.CopyTo(log4net.Plugin.IPlugin[])">
            <summary>
            Copies the entire <c>PluginCollection</c> to a one-dimensional
            <see cref="T:log4net.Plugin.IPlugin"/> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:log4net.Plugin.IPlugin"/> array to copy to.</param>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.CopyTo(log4net.Plugin.IPlugin[],System.Int32)">
            <summary>
            Copies the entire <c>PluginCollection</c> to a one-dimensional
            <see cref="T:log4net.Plugin.IPlugin"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:log4net.Plugin.IPlugin"/> array to copy to.</param>
            <param name="start">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <returns>false, because the backing type is an array, which is never thread-safe.</returns>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <value>
            An object that can be used to synchronize access to the collection.
            </value>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:log4net.Plugin.IPlugin"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:log4net.Plugin.IPlugin"/> at the specified index.
            </value>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Add(log4net.Plugin.IPlugin)">
            <summary>
            Adds a <see cref="T:log4net.Plugin.IPlugin"/> to the end of the <c>PluginCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Plugin.IPlugin"/> to be added to the end of the <c>PluginCollection</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Clear">
            <summary>
            Removes all elements from the <c>PluginCollection</c>.
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:log4net.Plugin.PluginCollection"/>.
            </summary>
            <returns>A new <see cref="T:log4net.Plugin.PluginCollection"/> with a shallow copy of the collection data.</returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Contains(log4net.Plugin.IPlugin)">
            <summary>
            Determines whether a given <see cref="T:log4net.Plugin.IPlugin"/> is in the <c>PluginCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Plugin.IPlugin"/> to check for.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the <c>PluginCollection</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.IndexOf(log4net.Plugin.IPlugin)">
            <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:log4net.Plugin.IPlugin"/>
            in the <c>PluginCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Plugin.IPlugin"/> to locate in the <c>PluginCollection</c>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item"/> 
            in the entire <c>PluginCollection</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Insert(System.Int32,log4net.Plugin.IPlugin)">
            <summary>
            Inserts an element into the <c>PluginCollection</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:log4net.Plugin.IPlugin"/> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Remove(log4net.Plugin.IPlugin)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:log4net.Plugin.IPlugin"/> from the <c>PluginCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Plugin.IPlugin"/> to remove from the <c>PluginCollection</c>.</param>
            <exception cref="T:System.ArgumentException">
            The specified <see cref="T:log4net.Plugin.IPlugin"/> was not found in the <c>PluginCollection</c>.
            </exception>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <c>PluginCollection</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value><c>true</c> if the collection has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
            <value><c>true</c> if the collection is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <c>PluginCollection</c>.
            </summary>
            <returns>An <see cref="T:log4net.Plugin.PluginCollection.Enumerator"/> for the entire <c>PluginCollection</c>.</returns>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.Capacity">
            <summary>
            Gets or sets the number of elements the <c>PluginCollection</c> can contain.
            </summary>
            <value>
            The number of elements the <c>PluginCollection</c> can contain.
            </value>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.AddRange(log4net.Plugin.PluginCollection)">
            <summary>
            Adds the elements of another <c>PluginCollection</c> to the current <c>PluginCollection</c>.
            </summary>
            <param name="x">The <c>PluginCollection</c> whose elements should be added to the end of the current <c>PluginCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Plugin.PluginCollection.Count"/> of the <c>PluginCollection</c>.</returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.AddRange(log4net.Plugin.IPlugin[])">
            <summary>
            Adds the elements of a <see cref="T:log4net.Plugin.IPlugin"/> array to the current <c>PluginCollection</c>.
            </summary>
            <param name="x">The <see cref="T:log4net.Plugin.IPlugin"/> array whose elements should be added to the end of the <c>PluginCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Plugin.PluginCollection.Count"/> of the <c>PluginCollection</c>.</returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of a <see cref="T:log4net.Plugin.IPlugin"/> collection to the current <c>PluginCollection</c>.
            </summary>
            <param name="col">The <see cref="T:log4net.Plugin.IPlugin"/> collection whose elements should be added to the end of the <c>PluginCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Plugin.PluginCollection.Count"/> of the <c>PluginCollection</c>.</returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="i"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="i"/> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="i"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="i"/> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="T:log4net.Plugin.PluginCollection.Enumerator">
            <summary>
            Supports simple iteration over a <see cref="T:log4net.Plugin.PluginCollection"/>.
            </summary>
            <exclude/>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Enumerator.#ctor(log4net.Plugin.PluginCollection)">
            <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value>
            The current element in the collection.
            </value>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="T:log4net.Plugin.PluginCollection.ReadOnlyPluginCollection">
            <exclude/>
        </member>
        <member name="T:log4net.Plugin.PluginMap">
            <summary>
            Map of repository plugins.
            </summary>
            <remarks>
            <para>
            This class is a name keyed map of the plugins that are
            attached to a repository.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Plugin.PluginMap.#ctor(log4net.Repository.ILoggerRepository)">
            <summary>
            Constructor
            </summary>
            <param name="repository">The repository that the plugins should be attached to.</param>
            <remarks>
            <para>
            Initialize a new instance of the <see cref="T:log4net.Plugin.PluginMap" /> class with a 
            repository that the plugins should be attached to.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Plugin.PluginMap.Item(System.String)">
            <summary>
            Gets a <see cref="T:log4net.Plugin.IPlugin" /> by name.
            </summary>
            <param name="name">The name of the <see cref="T:log4net.Plugin.IPlugin" /> to lookup.</param>
            <returns>
            The <see cref="T:log4net.Plugin.IPlugin" /> from the map with the name specified, or 
            <c>null</c> if no plugin is found.
            </returns>
            <remarks>
            <para>
            Lookup a plugin by name. If the plugin is not found <c>null</c>
            will be returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Plugin.PluginMap.AllPlugins">
            <summary>
            Gets all possible plugins as a list of <see cref="T:log4net.Plugin.IPlugin" /> objects.
            </summary>
            <value>All possible plugins as a list of <see cref="T:log4net.Plugin.IPlugin" /> objects.</value>
            <remarks>
            <para>
            Get a collection of all the plugins defined in this map.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.PluginMap.Add(log4net.Plugin.IPlugin)">
            <summary>
            Adds a <see cref="T:log4net.Plugin.IPlugin" /> to the map.
            </summary>
            <param name="plugin">The <see cref="T:log4net.Plugin.IPlugin" /> to add to the map.</param>
            <remarks>
            <para>
            The <see cref="T:log4net.Plugin.IPlugin" /> will be attached to the repository when added.
            </para>
            <para>
            If there already exists a plugin with the same name 
            attached to the repository then the old plugin will
            be <see cref="M:log4net.Plugin.IPlugin.Shutdown"/> and replaced with
            the new plugin.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.PluginMap.Remove(log4net.Plugin.IPlugin)">
            <summary>
            Removes a <see cref="T:log4net.Plugin.IPlugin" /> from the map.
            </summary>
            <param name="plugin">The <see cref="T:log4net.Plugin.IPlugin" /> to remove from the map.</param>
            <remarks>
            <para>
            Remove a specific plugin from this map.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Plugin.PluginSkeleton">
            <summary>
            Base implementation of <see cref="T:log4net.Plugin.IPlugin"/>
            </summary>
            <remarks>
            <para>
            Default abstract implementation of the <see cref="T:log4net.Plugin.IPlugin"/>
            interface. This base class can be used by implementors
            of the <see cref="T:log4net.Plugin.IPlugin"/> interface.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Plugin.PluginSkeleton.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">the name of the plugin</param>
            <remarks>
            Initializes a new Plugin with the specified name.
            </remarks>
        </member>
        <member name="P:log4net.Plugin.PluginSkeleton.Name">
            <summary>
            Gets or sets the name of the plugin.
            </summary>
            <value>
            The name of the plugin.
            </value>
            <remarks>
            <para>
            Plugins are stored in the <see cref="T:log4net.Plugin.PluginMap"/>
            keyed by name. Each plugin instance attached to a
            repository must be a unique name.
            </para>
            <para>
            The name of the plugin must not change one the 
            plugin has been attached to a repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.PluginSkeleton.Attach(log4net.Repository.ILoggerRepository)">
            <summary>
            Attaches this plugin to a <see cref="T:log4net.Repository.ILoggerRepository"/>.
            </summary>
            <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository"/> that this plugin should be attached to.</param>
            <remarks>
            <para>
            A plugin may only be attached to a single repository.
            </para>
            <para>
            This method is called when the plugin is attached to the repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.PluginSkeleton.Shutdown">
            <summary>
            Is called when the plugin is to shutdown.
            </summary>
            <remarks>
            <para>
            This method is called to notify the plugin that 
            it should stop operating and should detach from
            the repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Plugin.PluginSkeleton.LoggerRepository">
            <summary>
            The repository for this plugin
            </summary>
            <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin is attached to.
            </value>
            <remarks>
            <para>
            Gets or sets the <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin is 
            attached to.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Plugin.PluginSkeleton.m_name">
            <summary>
            The name of this plugin.
            </summary>
        </member>
        <member name="F:log4net.Plugin.PluginSkeleton.m_repository">
            <summary>
            The repository this plugin is attached to.
            </summary>
        </member>
        <member name="T:log4net.Plugin.RemoteLoggingServerPlugin">
            <summary>
            Plugin that listens for events from the <see cref="T:log4net.Appender.RemotingAppender"/>
            </summary>
            <remarks>
            <para>
            This plugin publishes an instance of <see cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink"/> 
            on a specified <see cref="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri"/>. This listens for logging events delivered from
            a remote <see cref="T:log4net.Appender.RemotingAppender"/>.
            </para>
            <para>
            When an event is received it is relogged within the attached repository
            as if it had been raised locally.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Plugin.RemoteLoggingServerPlugin" /> class.
            </para>
            <para>
            The <see cref="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri"/> property must be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.#ctor(System.String)">
            <summary>
            Construct with sink Uri.
            </summary>
            <param name="sinkUri">The name to publish the sink under in the remoting infrastructure. 
            See <see cref="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri"/> for more details.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Plugin.RemoteLoggingServerPlugin" /> class
            with specified name.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri">
            <summary>
            Gets or sets the URI of this sink.
            </summary>
            <value>
            The URI of this sink.
            </value>
            <remarks>
            <para>
            This is the name under which the object is marshaled.
            <see cref="M:RemotingServices.Marshal(MarshalByRefObject,String,Type)"/>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.Attach(log4net.Repository.ILoggerRepository)">
            <summary>
            Attaches this plugin to a <see cref="T:log4net.Repository.ILoggerRepository"/>.
            </summary>
            <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository"/> that this plugin should be attached to.</param>
            <remarks>
            <para>
            A plugin may only be attached to a single repository.
            </para>
            <para>
            This method is called when the plugin is attached to the repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.Shutdown">
            <summary>
            Is called when the plugin is to shutdown.
            </summary>
            <remarks>
            <para>
            When the plugin is shutdown the remote logging
            sink is disconnected.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Plugin.RemoteLoggingServerPlugin.declaringType">
            <summary>
            The fully qualified type of the RemoteLoggingServerPlugin class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl">
            <summary>
            Delivers <see cref="T:log4net.Core.LoggingEvent"/> objects to a remote sink.
            </summary>
            <remarks>
            <para>
            Internal class used to listen for logging events
            and deliver them to the local repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.#ctor(log4net.Repository.ILoggerRepository)">
            <summary>
            Constructor
            </summary>
            <param name="repository">The repository to log to.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl"/> for the
            specified <see cref="T:log4net.Repository.ILoggerRepository"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.LogEvents(log4net.Core.LoggingEvent[])">
            <summary>
            Logs the events to the repository.
            </summary>
            <param name="events">The events to log.</param>
            <remarks>
            <para>
            The events passed are logged to the <see cref="T:log4net.Repository.ILoggerRepository"/>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime 
            policy for this instance.
            </summary>
            <returns><c>null</c> to indicate that this instance should live forever.</returns>
            <remarks>
            <para>
            Obtains a lifetime service object to control the lifetime 
            policy for this instance. This object should live forever
            therefore this implementation returns <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.m_repository">
            <summary>
            The underlying <see cref="T:log4net.Repository.ILoggerRepository" /> that events should
            be logged to.
            </summary>
        </member>
        <member name="T:log4net.Repository.ConfigurationChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:log4net.Repository.ConfigurationChangedEventArgs.#ctor(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="configurationMessages"></param>
        </member>
        <member name="P:log4net.Repository.ConfigurationChangedEventArgs.ConfigurationMessages">
            <summary>
            
            </summary>
        </member>
        <member name="T:log4net.Repository.Hierarchy.DefaultLoggerFactory">
            <summary>
            Default implementation of <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory"/>
            </summary>
            <remarks>
            <para>
            This default implementation of the <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory"/>
            interface is used to create the default subclass
            of the <see cref="T:log4net.Repository.Hierarchy.Logger"/> object.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.DefaultLoggerFactory.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.DefaultLoggerFactory" /> class. 
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.DefaultLoggerFactory.CreateLogger(log4net.Repository.ILoggerRepository,System.String)">
            <summary>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance
            </summary>
            <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that will own the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
            <param name="name">The name of the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
            <returns>The <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance for the specified name.</returns>
            <remarks>
            <para>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance with the 
            specified name.
            </para>
            <para>
            Called by the <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/> to create
            new named <see cref="T:log4net.Repository.Hierarchy.Logger"/> instances.
            </para>
            <para>
            If the <paramref name="name"/> is <c>null</c> then the root logger
            must be returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl">
            <summary>
            Default internal subclass of <see cref="T:log4net.Repository.Hierarchy.Logger"/>
            </summary>
            <remarks>
            <para>
            This subclass has no additional behavior over the
            <see cref="T:log4net.Repository.Hierarchy.Logger"/> class but does allow instances
            to be created.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl.#ctor(System.String)">
            <summary>
            Construct a new Logger
            </summary>
            <param name="name">the name of the logger</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl" /> class
            with the specified name. 
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.LoggerCreationEventHandler">
            <summary>
            Delegate used to handle logger creation event notifications.
            </summary>
            <param name="sender">The <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/> in which the <see cref="T:log4net.Repository.Hierarchy.Logger"/> has been created.</param>
            <param name="e">The <see cref="T:log4net.Repository.Hierarchy.LoggerCreationEventArgs"/> event args that hold the <see cref="T:log4net.Repository.Hierarchy.Logger"/> instance that has been created.</param>
            <remarks>
            <para>
            Delegate used to handle logger creation event notifications.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.LoggerCreationEventArgs">
            <summary>
            Provides data for the <see cref="E:log4net.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent"/> event.
            </summary>
            <remarks>
            <para>
            A <see cref="E:log4net.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent"/> event is raised every time a
            <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger"/> is created.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.LoggerCreationEventArgs.m_log">
            <summary>
            The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger"/> created
            </summary>
        </member>
        <member name="M:log4net.Repository.Hierarchy.LoggerCreationEventArgs.#ctor(log4net.Repository.Hierarchy.Logger)">
            <summary>
            Constructor
            </summary>
            <param name="log">The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger"/> that has been created.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.LoggerCreationEventArgs" /> event argument 
            class,with the specified <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger">
            <summary>
            Gets the <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger"/> that has been created.
            </summary>
            <value>
            The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger"/> that has been created.
            </value>
            <remarks>
            <para>
            The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger"/> that has been created.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.Hierarchy">
            <summary>
            Hierarchical organization of loggers
            </summary>
            <remarks>
            <para>
            <i>The casual user should not have to deal with this class
            directly.</i>
            </para>
            <para>
            This class is specialized in retrieving loggers by name and
            also maintaining the logger hierarchy. Implements the 
            <see cref="T:log4net.Repository.ILoggerRepository"/> interface.
            </para>
            <para>
            The structure of the logger hierarchy is maintained by the
            <see cref="M:GetLogger(string)"/> method. The hierarchy is such that children
            link to their parent but parents do not have any references to their
            children. Moreover, loggers can be instantiated in any order, in
            particular descendant before ancestor.
            </para>
            <para>
            In case a descendant is created before a particular ancestor,
            then it creates a provision node for the ancestor and adds itself
            to the provision node. Other descendants of the same ancestor add
            themselves to the previously created provision node.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="E:log4net.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent">
            <summary>
            Event used to notify that a logger has been created.
            </summary>
            <remarks>
            <para>
            Event raised when a logger is created.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor(log4net.Util.PropertiesDictionary)">
            <summary>
            Construct with properties
            </summary>
            <param name="properties">The properties to pass to this repository.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor(log4net.Repository.Hierarchy.ILoggerFactory)">
            <summary>
            Construct with a logger factory
            </summary>
            <param name="loggerFactory">The factory to use to create new logger instances.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class with 
            the specified <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor(log4net.Util.PropertiesDictionary,log4net.Repository.Hierarchy.ILoggerFactory)">
            <summary>
            Construct with properties and a logger factory
            </summary>
            <param name="properties">The properties to pass to this repository.</param>
            <param name="loggerFactory">The factory to use to create new logger instances.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class with 
            the specified <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Hierarchy.EmittedNoAppenderWarning">
            <summary>
            Has no appender warning been emitted
            </summary>
            <remarks>
            <para>
            Flag to indicate if we have already issued a warning
            about not having an appender warning.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Hierarchy.Root">
            <summary>
            Get the root of this hierarchy
            </summary>
            <remarks>
            <para>
            Get the root of this hierarchy.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Hierarchy.LoggerFactory">
            <summary>
            Gets or sets the default <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /> instance.
            </summary>
            <value>The default <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /></value>
            <remarks>
            <para>
            The logger factory is used to create logger instances.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.Exists(System.String)">
            <summary>
            Test if a logger exists
            </summary>
            <param name="name">The name of the logger to lookup</param>
            <returns>The Logger object with the name specified</returns>
            <remarks>
            <para>
            Check if the named logger exists in the hierarchy. If so return
            its reference, otherwise returns <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetCurrentLoggers">
            <summary>
            Returns all the currently defined loggers in the hierarchy as an Array
            </summary>
            <returns>All the defined loggers</returns>
            <remarks>
            <para>
            Returns all the currently defined loggers in the hierarchy as an Array.
            The root logger is <b>not</b> included in the returned
            enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetLogger(System.String)">
            <summary>
            Return a new logger instance named as the first parameter using
            the default factory.
            </summary>
            <remarks>
            <para>
            Return a new logger instance named as the first parameter using
            the default factory.
            </para>
            <para>
            If a logger of that name already exists, then it will be
            returned.  Otherwise, a new logger will be instantiated and
            then linked with its existing ancestors as well as children.
            </para>
            </remarks>
            <param name="name">The name of the logger to retrieve</param>
            <returns>The logger object with the name specified</returns>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.Shutdown">
            <summary>
            Shutting down a hierarchy will <i>safely</i> close and remove
            all appenders in all loggers including the root logger.
            </summary>
            <remarks>
            <para>
            Shutting down a hierarchy will <i>safely</i> close and remove
            all appenders in all loggers including the root logger.
            </para>
            <para>
            Some appenders need to be closed before the
            application exists. Otherwise, pending logging events might be
            lost.
            </para>
            <para>
            The <c>Shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.ResetConfiguration">
            <summary>
            Reset all values contained in this hierarchy instance to their default.
            </summary>
            <remarks>
            <para>
            Reset all values contained in this hierarchy instance to their
            default.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug"/>. Moreover,
            message disabling is set its default "off" value.
            </para>
            <para>
            Existing loggers are not removed. They are just reset.
            </para>
            <para>
            This method should be used sparingly and with care as it will
            block all logging until it is completed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.Log(log4net.Core.LoggingEvent)">
            <summary>
            Log the logEvent through this hierarchy.
            </summary>
            <param name="logEvent">the event to log</param>
            <remarks>
            <para>
            This method should not normally be used to log.
            The <see cref="T:log4net.ILog"/> interface should be used 
            for routine logging. This interface can be obtained
            using the <see cref="M:log4net.LogManager.GetLogger(string)"/> method.
            </para>
            <para>
            The <c>logEvent</c> is delivered to the appropriate logger and
            that logger is then responsible for logging the event.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetAppenders">
            <summary>
            Returns all the Appenders that are currently configured
            </summary>
            <returns>An array containing all the currently configured appenders</returns>
            <remarks>
            <para>
            Returns all the <see cref="T:log4net.Appender.IAppender"/> instances that are currently configured.
            All the loggers are searched for appenders. The appenders may also be containers
            for appenders and these are also searched for additional loggers.
            </para>
            <para>
            The list returned is unordered but does not contain duplicates.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.CollectAppender(System.Collections.ArrayList,log4net.Appender.IAppender)">
            <summary>
            Collect the appenders from an <see cref="T:log4net.Core.IAppenderAttachable"/>.
            The appender may also be a container.
            </summary>
            <param name="appenderList"></param>
            <param name="appender"></param>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.CollectAppenders(System.Collections.ArrayList,log4net.Core.IAppenderAttachable)">
            <summary>
            Collect the appenders from an <see cref="T:log4net.Core.IAppenderAttachable"/> container
            </summary>
            <param name="appenderList"></param>
            <param name="container"></param>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.log4net#Repository#IBasicRepositoryConfigurator#Configure(log4net.Appender.IAppender)">
            <summary>
            Initialize the log4net system using the specified appender
            </summary>
            <param name="appender">the appender to use to log all logging events</param>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.log4net#Repository#IBasicRepositoryConfigurator#Configure(log4net.Appender.IAppender[])">
            <summary>
            Initialize the log4net system using the specified appenders
            </summary>
            <param name="appenders">the appenders to use to log all logging events</param>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.BasicRepositoryConfigure(log4net.Appender.IAppender[])">
            <summary>
            Initialize the log4net system using the specified appenders
            </summary>
            <param name="appenders">the appenders to use to log all logging events</param>
            <remarks>
            <para>
            This method provides the same functionality as the 
            <see cref="M:IBasicRepositoryConfigurator.Configure(IAppender)"/> method implemented
            on this object, but it is protected and therefore can be called by subclasses.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.log4net#Repository#IXmlRepositoryConfigurator#Configure(System.Xml.XmlElement)">
            <summary>
            Initialize the log4net system using the specified config
            </summary>
            <param name="element">the element containing the root of the config</param>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.XmlRepositoryConfigure(System.Xml.XmlElement)">
            <summary>
            Initialize the log4net system using the specified config
            </summary>
            <param name="element">the element containing the root of the config</param>
            <remarks>
            <para>
            This method provides the same functionality as the 
            <see cref="M:IBasicRepositoryConfigurator.Configure(IAppender)"/> method implemented
            on this object, but it is protected and therefore can be called by subclasses.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.IsDisabled(log4net.Core.Level)">
            <summary>
            Test if this hierarchy is disabled for the specified <see cref="T:log4net.Core.Level"/>.
            </summary>
            <param name="level">The level to check against.</param>
            <returns>
            <c>true</c> if the repository is disabled for the level argument, <c>false</c> otherwise.
            </returns>
            <remarks>
            <para>
            If this hierarchy has not been configured then this method will
            always return <c>true</c>.
            </para>
            <para>
            This method will return <c>true</c> if this repository is
            disabled for <c>level</c> object passed as parameter and
            <c>false</c> otherwise.
            </para>
            <para>
            See also the <see cref="P:log4net.Repository.ILoggerRepository.Threshold"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.Clear">
            <summary>
            Clear all logger definitions from the internal hashtable
            </summary>
            <remarks>
            <para>
            This call will clear all logger definitions from the internal
            hashtable. Invoking this method will irrevocably mess up the
            logger hierarchy.
            </para>
            <para>
            You should <b>really</b> know what you are doing before
            invoking this method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetLogger(System.String,log4net.Repository.Hierarchy.ILoggerFactory)">
            <summary>
            Return a new logger instance named as the first parameter using
            <paramref name="factory"/>.
            </summary>
            <param name="name">The name of the logger to retrieve</param>
            <param name="factory">The factory that will make the new logger instance</param>
            <returns>The logger object with the name specified</returns>
            <remarks>
            <para>
            If a logger of that name already exists, then it will be
            returned. Otherwise, a new logger will be instantiated by the
            <paramref name="factory"/> parameter and linked with its existing
            ancestors as well as children.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.OnLoggerCreationEvent(log4net.Repository.Hierarchy.Logger)">
            <summary>
            Sends a logger creation event to all registered listeners
            </summary>
            <param name="logger">The newly created logger</param>
            <remarks>
            Raises the logger creation event.
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.UpdateParents(log4net.Repository.Hierarchy.Logger)">
            <summary>
            Updates all the parents of the specified logger
            </summary>
            <param name="log">The logger to update the parents for</param>
            <remarks>
            <para>
            This method loops through all the <i>potential</i> parents of
            <paramref name="log"/>. There 3 possible cases:
            </para>
            <list type="number">
            	<item>
            		<term>No entry for the potential parent of <paramref name="log"/> exists</term>
            		<description>
            		We create a ProvisionNode for this potential 
            		parent and insert <paramref name="log"/> in that provision node.
            		</description>
            	</item>
            	<item>
            		<term>The entry is of type Logger for the potential parent.</term>
            		<description>
            		The entry is <paramref name="log"/>'s nearest existing parent. We 
            		update <paramref name="log"/>'s parent field with this entry. We also break from 
            		he loop because updating our parent's parent is our parent's 
            		responsibility.
            		</description>
            	</item>
            	<item>
            		<term>The entry is of type ProvisionNode for this potential parent.</term>
            		<description>
            		We add <paramref name="log"/> to the list of children for this 
            		potential parent.
            		</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.UpdateChildren(log4net.Repository.Hierarchy.ProvisionNode,log4net.Repository.Hierarchy.Logger)">
            <summary>
            Replace a <see cref="T:log4net.Repository.Hierarchy.ProvisionNode"/> with a <see cref="T:log4net.Repository.Hierarchy.Logger"/> in the hierarchy.
            </summary>
            <param name="pn"></param>
            <param name="log"></param>
            <remarks>
            <para>
            We update the links for all the children that placed themselves
            in the provision node 'pn'. The second argument 'log' is a
            reference for the newly created Logger, parent of all the
            children in 'pn'.
            </para>
            <para>
            We loop on all the children 'c' in 'pn'.
            </para>
            <para>
            If the child 'c' has been already linked to a child of
            'log' then there is no need to update 'c'.
            </para>
            <para>
            Otherwise, we set log's parent field to c's parent and set
            c's parent field to log.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.AddLevel(log4net.Repository.Hierarchy.Hierarchy.LevelEntry)">
            <summary>
            Define or redefine a Level using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry"/> argument
            </summary>
            <param name="levelEntry">the level values</param>
            <remarks>
            <para>
            Define or redefine a Level using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry"/> argument
            </para>
            <para>
            Supports setting levels via the configuration file.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry">
            <summary>
            A class to hold the value, name and display name for a level
            </summary>
            <remarks>
            <para>
            A class to hold the value, name and display name for a level
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.Value">
            <summary>
            Value of the level
            </summary>
            <remarks>
            <para>
            If the value is not set (defaults to -1) the value will be looked
            up for the current level with the same name.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.Name">
            <summary>
            Name of the level
            </summary>
            <value>
            The name of the level
            </value>
            <remarks>
            <para>
            The name of the level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.DisplayName">
            <summary>
            Display name for the level
            </summary>
            <value>
            The display name of the level
            </value>
            <remarks>
            <para>
            The display name of the level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.ToString">
            <summary>
            Override <c>Object.ToString</c> to return sensible debug info
            </summary>
            <returns>string info about this object</returns>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.AddProperty(log4net.Util.PropertyEntry)">
            <summary>
            Set a Property using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry"/> argument
            </summary>
            <param name="propertyEntry">the property value</param>
            <remarks>
            <para>
            Set a Property using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry"/> argument.
            </para>
            <para>
            Supports setting property values via the configuration file.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Hierarchy.declaringType">
            <summary>
            The fully qualified type of the Hierarchy class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.ILoggerFactory">
            <summary>
            Interface abstracts creation of <see cref="T:log4net.Repository.Hierarchy.Logger"/> instances
            </summary>
            <remarks>
            <para>
            This interface is used by the <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/> to 
            create new <see cref="T:log4net.Repository.Hierarchy.Logger"/> objects.
            </para>
            <para>
            The <see cref="M:log4net.Repository.Hierarchy.ILoggerFactory.CreateLogger(log4net.Repository.ILoggerRepository,System.String)"/> method is called
            to create a named <see cref="T:log4net.Repository.Hierarchy.Logger" />.
            </para>
            <para>
            Implement this interface to create new subclasses of <see cref="T:log4net.Repository.Hierarchy.Logger" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.ILoggerFactory.CreateLogger(log4net.Repository.ILoggerRepository,System.String)">
            <summary>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance
            </summary>
            <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that will own the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
            <param name="name">The name of the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
            <returns>The <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance for the specified name.</returns>
            <remarks>
            <para>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance with the 
            specified name.
            </para>
            <para>
            Called by the <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/> to create
            new named <see cref="T:log4net.Repository.Hierarchy.Logger"/> instances.
            </para>
            <para>
            If the <paramref name="name"/> is <c>null</c> then the root logger
            must be returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.Logger">
            <summary>
            Implementation of <see cref="T:log4net.Core.ILogger"/> used by <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy"/>
            </summary>
            <remarks>
            <para>
            Internal class used to provide implementation of <see cref="T:log4net.Core.ILogger"/>
            interface. Applications should use <see cref="T:log4net.LogManager"/> to get
            logger instances.
            </para>
            <para>
            This is one of the central classes in the log4net implementation. One of the
            distinctive features of log4net are hierarchical loggers and their
            evaluation. The <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy"/> organizes the <see cref="T:log4net.Repository.Hierarchy.Logger"/>
            instances into a rooted tree hierarchy.
            </para>
            <para>
            The <see cref="T:log4net.Repository.Hierarchy.Logger"/> class is abstract. Only concrete subclasses of
            <see cref="T:log4net.Repository.Hierarchy.Logger"/> can be created. The <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory"/>
            is used to create instances of this type for the <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy"/>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Aspi Havewala</author>
            <author>Douglas de la Torre</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.#ctor(System.String)">
            <summary>
            This constructor created a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance and
            sets its name.
            </summary>
            <param name="name">The name of the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
            <remarks>
            <para>
            This constructor is protected and designed to be used by
            a subclass that is not abstract.
            </para>
            <para>
            Loggers are constructed by <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory"/> 
            objects. See <see cref="T:log4net.Repository.Hierarchy.DefaultLoggerFactory"/> for the default
            logger creator.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Parent">
            <summary>
            Gets or sets the parent logger in the hierarchy.
            </summary>
            <value>
            The parent logger in the hierarchy.
            </value>
            <remarks>
            <para>
            Part of the Composite pattern that makes the hierarchy.
            The hierarchy is parent linked rather than child linked.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Additivity">
            <summary>
            Gets or sets a value indicating if child loggers inherit their parent's appenders.
            </summary>
            <value>
            <c>true</c> if child loggers inherit their parent's appenders.
            </value>
            <remarks>
            <para>
            Additivity is set to <c>true</c> by default, that is children inherit
            the appenders of their ancestors by default. If this variable is
            set to <c>false</c> then the appenders found in the
            ancestors of this logger are not used. However, the children
            of this logger will inherit its appenders, unless the children
            have their additivity flag set to <c>false</c> too. See
            the user manual for more details.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.EffectiveLevel">
            <summary>
            Gets the effective level for this logger.
            </summary>
            <returns>The nearest level in the logger hierarchy.</returns>
            <remarks>
            <para>
            Starting from this logger, searches the logger hierarchy for a
            non-null level and returns it. Otherwise, returns the level of the
            root logger.
            </para>
            <para>The Logger class is designed so that this method executes as
            quickly as possible.</para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Hierarchy">
            <summary>
            Gets or sets the <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy"/> where this 
            <c>Logger</c> instance is attached to.
            </summary>
            <value>The hierarchy that this logger belongs to.</value>
            <remarks>
            <para>
            This logger must be attached to a single <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Level">
            <summary>
            Gets or sets the assigned <see cref="P:log4net.Repository.Hierarchy.Logger.Level"/>, if any, for this Logger.  
            </summary>
            <value>
            The <see cref="P:log4net.Repository.Hierarchy.Logger.Level"/> of this logger.
            </value>
            <remarks>
            <para>
            The assigned <see cref="P:log4net.Repository.Hierarchy.Logger.Level"/> can be <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Add <paramref name="newAppender"/> to the list of appenders of this
            Logger instance.
            </summary>
            <param name="newAppender">An appender to add to this logger</param>
            <remarks>
            <para>
            Add <paramref name="newAppender"/> to the list of appenders of this
            Logger instance.
            </para>
            <para>
            If <paramref name="newAppender"/> is already in the list of
            appenders, then it won't be added again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Appenders">
            <summary>
            Get the appenders contained in this logger as an 
            <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>A collection of the appenders in this logger</returns>
            <remarks>
            <para>
            Get the appenders contained in this logger as an 
            <see cref="T:System.Collections.ICollection"/>. If no appenders 
            can be found, then a <see cref="T:log4net.Util.EmptyCollection"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.GetAppender(System.String)">
            <summary>
            Look for the appender named as <c>name</c>
            </summary>
            <param name="name">The name of the appender to lookup</param>
            <returns>The appender with the name specified, or <c>null</c>.</returns>
            <remarks>
            <para>
            Returns the named appender, or null if the appender is not found.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.RemoveAllAppenders">
            <summary>
            Remove all previously added appenders from this Logger instance.
            </summary>
            <remarks>
            <para>
            Remove all previously added appenders from this Logger instance.
            </para>
            <para>
            This is useful when re-reading configuration information.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Remove the appender passed as parameter form the list of appenders.
            </summary>
            <param name="appender">The appender to remove</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            <para>
            Remove the appender passed as parameter form the list of appenders.
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close"/> on the appender removed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.RemoveAppender(System.String)">
            <summary>
            Remove the appender passed as parameter form the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            <para>
            Remove the named appender passed as parameter form the list of appenders.
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close"/> on the appender removed.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Name">
            <summary>
            Gets the logger name.
            </summary>
            <value>
            The name of the logger.
            </value>
            <remarks>
            <para>
            The name of this logger
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.Log(System.Type,log4net.Core.Level,System.Object,System.Exception)">
            <summary>
            This generic form is intended to be used by wrappers.
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <param name="level">The level of the message to be logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            Generate a logging event for the specified <paramref name="level"/> using
            the <paramref name="message"/> and <paramref name="exception"/>.
            </para>
            <para>
            This method must not throw any exception to the caller.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.Log(log4net.Core.LoggingEvent)">
            <summary>
            This is the most generic printing method that is intended to be used 
            by wrappers.
            </summary>
            <param name="logEvent">The event being logged.</param>
            <remarks>
            <para>
            Logs the specified logging event through this logger.
            </para>
            <para>
            This method must not throw any exception to the caller.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.IsEnabledFor(log4net.Core.Level)">
            <summary>
            Checks if this logger is enabled for a given <see cref="P:log4net.Repository.Hierarchy.Logger.Level"/> passed as parameter.
            </summary>
            <param name="level">The level to check.</param>
            <returns>
            <c>true</c> if this logger is enabled for <c>level</c>, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            Test if this logger is going to log events of the specified <paramref name="level"/>.
            </para>
            <para>
            This method must not throw any exception to the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Repository">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> where this 
            <c>Logger</c> instance is attached to.
            </summary>
            <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this logger belongs to.
            </value>
            <remarks>
            <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> where this 
            <c>Logger</c> instance is attached to.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.CallAppenders(log4net.Core.LoggingEvent)">
            <summary>
            Deliver the <see cref="T:log4net.Core.LoggingEvent"/> to the attached appenders.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Call the appenders in the hierarchy starting at
            <c>this</c>. If no appenders could be found, emit a
            warning.
            </para>
            <para>
            This method calls all the appenders inherited from the
            hierarchy circumventing any evaluation of whether to log or not
            to log the particular log request.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.CloseNestedAppenders">
            <summary>
            Closes all attached appenders implementing the <see cref="T:log4net.Core.IAppenderAttachable"/> interface.
            </summary>
            <remarks>
            <para>
            Used to ensure that the appenders are correctly shutdown.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.Log(log4net.Core.Level,System.Object,System.Exception)">
            <summary>
            This is the most generic printing method. This generic form is intended to be used by wrappers
            </summary>
            <param name="level">The level of the message to be logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            Generate a logging event for the specified <paramref name="level"/> using
            the <paramref name="message"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.ForcedLog(System.Type,log4net.Core.Level,System.Object,System.Exception)">
            <summary>
            Creates a new logging event and logs the event without further checks.
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <param name="level">The level of the message to be logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            Generates a logging event and delivers it to the attached
            appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.ForcedLog(log4net.Core.LoggingEvent)">
            <summary>
            Creates a new logging event and logs the event without further checks.
            </summary>
            <param name="logEvent">The event being logged.</param>
            <remarks>
            <para>
            Delivers the logging event to the attached appenders.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.declaringType">
            <summary>
            The fully qualified type of the Logger class.
            </summary>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_name">
            <summary>
            The name of this logger.
            </summary>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_level">
            <summary>
            The assigned level of this logger. 
            </summary>
            <remarks>
            <para>
            The <c>level</c> variable need not be 
            assigned a value in which case it is inherited 
            form the hierarchy.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_parent">
            <summary>
            The parent of this logger.
            </summary>
            <remarks>
            <para>
            The parent of this logger. 
            All loggers have at least one ancestor which is the root logger.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_hierarchy">
            <summary>
            Loggers need to know what Hierarchy they are in.
            </summary>
            <remarks>
            <para>
            Loggers need to know what Hierarchy they are in.
            The hierarchy that this logger is a member of is stored
            here.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_appenderAttachedImpl">
            <summary>
            Helper implementation of the <see cref="T:log4net.Core.IAppenderAttachable"/> interface
            </summary>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_additive">
            <summary>
            Flag indicating if child loggers inherit their parents appenders
            </summary>
            <remarks>
            <para>
            Additivity is set to true by default, that is children inherit
            the appenders of their ancestors by default. If this variable is
            set to <c>false</c> then the appenders found in the
            ancestors of this logger are not used. However, the children
            of this logger will inherit its appenders, unless the children
            have their additivity flag set to <c>false</c> too. See
            the user manual for more details.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_appenderLock">
            <summary>
            Lock to protect AppenderAttachedImpl variable m_appenderAttachedImpl
            </summary>
        </member>
        <member name="T:log4net.Repository.Hierarchy.LoggerKey">
            <summary>
            Used internally to accelerate hash table searches.
            </summary>
            <remarks>
            <para>
            Internal class used to improve performance of 
            string keyed hashtables.
            </para>
            <para>
            The hashcode of the string is cached for reuse.
            The string is stored as an interned value.
            When comparing two <see cref="T:log4net.Repository.Hierarchy.LoggerKey"/> objects for equality 
            the reference equality of the interned strings is compared.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.LoggerKey.#ctor(System.String)">
            <summary>
            Construct key with string name
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.LoggerKey" /> class 
            with the specified name.
            </para>
            <para>
            Stores the hashcode of the string and interns
            the string key to optimize comparisons.
            </para>
            <note>
            The Compact Framework 1.0 the <see cref="M:System.String.Intern(System.String)"/>
            method does not work. On the Compact Framework
            the string keys are not interned nor are they
            compared by reference.
            </note>
            </remarks>
            <param name="name">The name of the logger.</param>
        </member>
        <member name="M:log4net.Repository.Hierarchy.LoggerKey.GetHashCode">
            <summary>
            Returns a hash code for the current instance.
            </summary>
            <returns>A hash code for the current instance.</returns>
            <remarks>
            <para>
            Returns the cached hashcode.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.LoggerKey.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:log4net.Repository.Hierarchy.LoggerKey" /> instances 
            are equal.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:log4net.Repository.Hierarchy.LoggerKey" />.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:log4net.Repository.Hierarchy.LoggerKey" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>
            Compares the references of the interned strings.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.ProvisionNode">
            <summary>
            Provision nodes are used where no logger instance has been specified
            </summary>
            <remarks>
            <para>
            <see cref="T:log4net.Repository.Hierarchy.ProvisionNode"/> instances are used in the 
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> when there is no specified 
            <see cref="T:log4net.Repository.Hierarchy.Logger" /> for that node.
            </para>
            <para>
            A provision node holds a list of child loggers on behalf of
            a logger that does not exist.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.ProvisionNode.#ctor(log4net.Repository.Hierarchy.Logger)">
            <summary>
            Create a new provision node with child node
            </summary>
            <param name="log">A child logger to add to this node.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.ProvisionNode" /> class 
            with the specified child logger.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.RootLogger">
            <summary>
            The <see cref="T:log4net.Repository.Hierarchy.RootLogger" /> sits at the root of the logger hierarchy tree. 
            </summary>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.Hierarchy.RootLogger" /> is a regular <see cref="T:log4net.Repository.Hierarchy.Logger" /> except 
            that it provides several guarantees.
            </para>
            <para>
            First, it cannot be assigned a <c>null</c>
            level. Second, since the root logger cannot have a parent, the
            <see cref="P:log4net.Repository.Hierarchy.RootLogger.EffectiveLevel"/> property always returns the value of the
            level field without walking the hierarchy.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.RootLogger.#ctor(log4net.Core.Level)">
            <summary>
            Construct a <see cref="T:log4net.Repository.Hierarchy.RootLogger"/>
            </summary>
            <param name="level">The level to assign to the root logger.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.RootLogger" /> class with
            the specified logging level.
            </para>
            <para>
            The root logger names itself as "root". However, the root
            logger cannot be retrieved by name.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.RootLogger.EffectiveLevel">
            <summary>
            Gets the assigned level value without walking the logger hierarchy.
            </summary>
            <value>The assigned level value without walking the logger hierarchy.</value>
            <remarks>
            <para>
            Because the root logger cannot have a parent and its level
            must not be <c>null</c> this property just returns the
            value of <see cref="P:log4net.Repository.Hierarchy.Logger.Level"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.RootLogger.Level">
            <summary>
            Gets or sets the assigned <see cref="P:log4net.Repository.Hierarchy.RootLogger.Level"/> for the root logger.  
            </summary>
            <value>
            The <see cref="P:log4net.Repository.Hierarchy.RootLogger.Level"/> of the root logger.
            </value>
            <remarks>
            <para>
            Setting the level of the root logger to a <c>null</c> reference
            may have catastrophic results. We prevent this here.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.RootLogger.declaringType">
            <summary>
            The fully qualified type of the RootLogger class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.XmlHierarchyConfigurator">
            <summary>
            Initializes the log4net environment using an XML DOM.
            </summary>
            <remarks>
            <para>
            Configures a <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/> using an XML DOM.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.#ctor(log4net.Repository.Hierarchy.Hierarchy)">
            <summary>
            Construct the configurator for a hierarchy
            </summary>
            <param name="hierarchy">The hierarchy to build.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.XmlHierarchyConfigurator" /> class
            with the specified <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            Configure the hierarchy by parsing a DOM tree of XML elements.
            </summary>
            <param name="element">The root element to parse.</param>
            <remarks>
            <para>
            Configure the hierarchy by parsing a DOM tree of XML elements.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.FindAppenderByReference(System.Xml.XmlElement)">
            <summary>
            Parse appenders by IDREF.
            </summary>
            <param name="appenderRef">The appender ref element.</param>
            <returns>The instance of the appender that the ref refers to.</returns>
            <remarks>
            <para>
            Parse an XML element that represents an appender and return 
            the appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseAppender(System.Xml.XmlElement)">
            <summary>
            Parses an appender element.
            </summary>
            <param name="appenderElement">The appender element.</param>
            <returns>The appender instance or <c>null</c> when parsing failed.</returns>
            <remarks>
            <para>
            Parse an XML element that represents an appender and return
            the appender instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseLogger(System.Xml.XmlElement)">
            <summary>
            Parses a logger element.
            </summary>
            <param name="loggerElement">The logger element.</param>
            <remarks>
            <para>
            Parse an XML element that represents a logger.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseRoot(System.Xml.XmlElement)">
            <summary>
            Parses the root logger element.
            </summary>
            <param name="rootElement">The root element.</param>
            <remarks>
            <para>
            Parse an XML element that represents the root logger.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseChildrenOfLoggerElement(System.Xml.XmlElement,log4net.Repository.Hierarchy.Logger,System.Boolean)">
            <summary>
            Parses the children of a logger element.
            </summary>
            <param name="catElement">The category element.</param>
            <param name="log">The logger instance.</param>
            <param name="isRoot">Flag to indicate if the logger is the root logger.</param>
            <remarks>
            <para>
            Parse the child elements of a &lt;logger&gt; element.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseRenderer(System.Xml.XmlElement)">
            <summary>
            Parses an object renderer.
            </summary>
            <param name="element">The renderer element.</param>
            <remarks>
            <para>
            Parse an XML element that represents a renderer.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseLevel(System.Xml.XmlElement,log4net.Repository.Hierarchy.Logger,System.Boolean)">
            <summary>
            Parses a level element.
            </summary>
            <param name="element">The level element.</param>
            <param name="log">The logger object to set the level on.</param>
            <param name="isRoot">Flag to indicate if the logger is the root logger.</param>
            <remarks>
            <para>
            Parse an XML element that represents a level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.SetParameter(System.Xml.XmlElement,System.Object)">
            <summary>
            Sets a parameter on an object.
            </summary>
            <param name="element">The parameter element.</param>
            <param name="target">The object to set the parameter on.</param>
            <remarks>
            The parameter name must correspond to a writable property
            on the object. The value of the parameter is a string,
            therefore this function will attempt to set a string
            property first. If unable to set a string property it
            will inspect the property and its argument type. It will
            attempt to call a static method called <c>Parse</c> on the
            type of the property. This method will take a single
            string argument and return a value that can be used to
            set the property.
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.HasAttributesOrElements(System.Xml.XmlElement)">
            <summary>
            Test if an element has no attributes or child elements
            </summary>
            <param name="element">the element to inspect</param>
            <returns><c>true</c> if the element has any attributes or child elements, <c>false</c> otherwise</returns>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.IsTypeConstructible(System.Type)">
            <summary>
            Test if a <see cref="T:System.Type"/> is constructible with <c>Activator.CreateInstance</c>.
            </summary>
            <param name="type">the type to inspect</param>
            <returns><c>true</c> if the type is creatable using a default constructor, <c>false</c> otherwise</returns>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.FindMethodInfo(System.Type,System.String)">
            <summary>
            Look for a method on the <paramref name="targetType"/> that matches the <paramref name="name"/> supplied
            </summary>
            <param name="targetType">the type that has the method</param>
            <param name="name">the name of the method</param>
            <returns>the method info found</returns>
            <remarks>
            <para>
            The method must be a public instance method on the <paramref name="targetType"/>.
            The method must be named <paramref name="name"/> or "Add" followed by <paramref name="name"/>.
            The method must take a single parameter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ConvertStringTo(System.Type,System.String)">
            <summary>
            Converts a string value to a target type.
            </summary>
            <param name="type">The type of object to convert the string to.</param>
            <param name="value">The string value to use as the value of the object.</param>
            <returns>
            <para>
            An object of type <paramref name="type"/> with value <paramref name="value"/> or 
            <c>null</c> when the conversion could not be performed.
            </para>
            </returns>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.CreateObjectFromXml(System.Xml.XmlElement,System.Type,System.Type)">
            <summary>
            Creates an object as specified in XML.
            </summary>
            <param name="element">The XML element that contains the definition of the object.</param>
            <param name="defaultTargetType">The object type to use if not explicitly specified.</param>
            <param name="typeConstraint">The type that the returned object must be or must inherit from.</param>
            <returns>The object or <c>null</c></returns>
            <remarks>
            <para>
            Parse an XML element and create an object instance based on the configuration
            data.
            </para>
            <para>
            The type of the instance may be specified in the XML. If not
            specified then the <paramref name="defaultTargetType"/> is used
            as the type. However the type is specified it must support the
            <paramref name="typeConstraint"/> type.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.m_appenderBag">
            <summary>
            key: appenderName, value: appender.
            </summary>
        </member>
        <member name="F:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.m_hierarchy">
            <summary>
            The Hierarchy being configured.
            </summary>
        </member>
        <member name="F:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.declaringType">
            <summary>
            The fully qualified type of the XmlHierarchyConfigurator class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Repository.IBasicRepositoryConfigurator">
            <summary>
            Basic Configurator interface for repositories
            </summary>
            <remarks>
            <para>
            Interface used by basic configurator to configure a <see cref="T:log4net.Repository.ILoggerRepository"/>
            with a default <see cref="T:log4net.Appender.IAppender"/>.
            </para>
            <para>
            A <see cref="T:log4net.Repository.ILoggerRepository"/> should implement this interface to support
            configuration by the <see cref="T:log4net.Config.BasicConfigurator"/>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.IBasicRepositoryConfigurator.Configure(log4net.Appender.IAppender)">
            <summary>
            Initialize the repository using the specified appender
            </summary>
            <param name="appender">the appender to use to log all logging events</param>
            <remarks>
            <para>
            Configure the repository to route all logging events to the
            specified appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.IBasicRepositoryConfigurator.Configure(log4net.Appender.IAppender[])">
            <summary>
            Initialize the repository using the specified appenders
            </summary>
            <param name="appenders">the appenders to use to log all logging events</param>
            <remarks>
            <para>
            Configure the repository to route all logging events to the
            specified appenders.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.LoggerRepositoryShutdownEventHandler">
            <summary>
            Delegate used to handle logger repository shutdown event notifications
            </summary>
            <param name="sender">The <see cref="T:log4net.Repository.ILoggerRepository"/> that is shutting down.</param>
            <param name="e">Empty event args</param>
            <remarks>
            <para>
            Delegate used to handle logger repository shutdown event notifications.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.LoggerRepositoryConfigurationResetEventHandler">
            <summary>
            Delegate used to handle logger repository configuration reset event notifications
            </summary>
            <param name="sender">The <see cref="T:log4net.Repository.ILoggerRepository"/> that has had its configuration reset.</param>
            <param name="e">Empty event args</param>
            <remarks>
            <para>
            Delegate used to handle logger repository configuration reset event notifications.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler">
            <summary>
            Delegate used to handle event notifications for logger repository configuration changes.
            </summary>
            <param name="sender">The <see cref="T:log4net.Repository.ILoggerRepository"/> that has had its configuration changed.</param>
            <param name="e">Empty event arguments.</param>
            <remarks>
            <para>
            Delegate used to handle event notifications for logger repository configuration changes.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.ILoggerRepository">
            <summary>
            Interface implemented by logger repositories.
            </summary>
            <remarks>
            <para>
            This interface is implemented by logger repositories. e.g. 
            <see cref="N:log4net.Repository.Hierarchy"/>.
            </para>
            <para>
            This interface is used by the <see cref="T:log4net.LogManager"/>
            to obtain <see cref="T:log4net.ILog"/> interfaces.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.Name">
            <summary>
            The name of the repository
            </summary>
            <value>
            The name of the repository
            </value>
            <remarks>
            <para>
            The name of the repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.RendererMap">
            <summary>
            RendererMap accesses the object renderer map for this repository.
            </summary>
            <value>
            RendererMap accesses the object renderer map for this repository.
            </value>
            <remarks>
            <para>
            RendererMap accesses the object renderer map for this repository.
            </para>
            <para>
            The RendererMap holds a mapping between types and
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/> objects.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.PluginMap">
            <summary>
            The plugin map for this repository.
            </summary>
            <value>
            The plugin map for this repository.
            </value>
            <remarks>
            <para>
            The plugin map holds the <see cref="T:log4net.Plugin.IPlugin"/> instances
            that have been attached to this repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.LevelMap">
            <summary>
            Get the level map for the Repository.
            </summary>
            <remarks>
            <para>
            Get the level map for the Repository.
            </para>
            <para>
            The level map defines the mappings between
            level names and <see cref="T:log4net.Core.Level"/> objects in
            this repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.Threshold">
            <summary>
            The threshold for all events in this repository
            </summary>
            <value>
            The threshold for all events in this repository
            </value>
            <remarks>
            <para>
            The threshold for all events in this repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.Exists(System.String)">
            <summary>
            Check if the named logger exists in the repository. If so return
            its reference, otherwise returns <c>null</c>.
            </summary>
            <param name="name">The name of the logger to lookup</param>
            <returns>The Logger object with the name specified</returns>
            <remarks>
            <para>
            If the names logger exists it is returned, otherwise
            <c>null</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.GetCurrentLoggers">
            <summary>
            Returns all the currently defined loggers as an Array.
            </summary>
            <returns>All the defined loggers</returns>
            <remarks>
            <para>
            Returns all the currently defined loggers as an Array.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.GetLogger(System.String)">
            <summary>
            Returns a named logger instance
            </summary>
            <param name="name">The name of the logger to retrieve</param>
            <returns>The logger object with the name specified</returns>
            <remarks>
            <para>
            Returns a named logger instance.
            </para>
            <para>
            If a logger of that name already exists, then it will be
            returned.  Otherwise, a new logger will be instantiated and
            then linked with its existing ancestors as well as children.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.Shutdown">
            <summary>Shutdown the repository</summary>
            <remarks>
            <para>
            Shutting down a repository will <i>safely</i> close and remove
            all appenders in all loggers including the root logger.
            </para>
            <para>
            Some appenders need to be closed before the
            application exists. Otherwise, pending logging events might be
            lost.
            </para>
            <para>
            The <see cref="M:Shutdown()"/> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.ResetConfiguration">
            <summary>
            Reset the repositories configuration to a default state
            </summary>
            <remarks>
            <para>
            Reset all values contained in this instance to their
            default state.
            </para>
            <para>
            Existing loggers are not removed. They are just reset.
            </para>
            <para>
            This method should be used sparingly and with care as it will
            block all logging until it is completed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.Log(log4net.Core.LoggingEvent)">
            <summary>
            Log the <see cref="T:log4net.Core.LoggingEvent"/> through this repository.
            </summary>
            <param name="logEvent">the event to log</param>
            <remarks>
            <para>
            This method should not normally be used to log.
            The <see cref="T:log4net.ILog"/> interface should be used 
            for routine logging. This interface can be obtained
            using the <see cref="M:log4net.LogManager.GetLogger(string)"/> method.
            </para>
            <para>
            The <c>logEvent</c> is delivered to the appropriate logger and
            that logger is then responsible for logging the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.Configured">
            <summary>
            Flag indicates if this repository has been configured.
            </summary>
            <value>
            Flag indicates if this repository has been configured.
            </value>
            <remarks>
            <para>
            Flag indicates if this repository has been configured.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.ConfigurationMessages">
            <summary>
            Collection of internal messages captured during the most 
            recent configuration process.
            </summary>
        </member>
        <member name="E:log4net.Repository.ILoggerRepository.ShutdownEvent">
            <summary>
            Event to notify that the repository has been shutdown.
            </summary>
            <value>
            Event to notify that the repository has been shutdown.
            </value>
            <remarks>
            <para>
            Event raised when the repository has been shutdown.
            </para>
            </remarks>
        </member>
        <member name="E:log4net.Repository.ILoggerRepository.ConfigurationReset">
            <summary>
            Event to notify that the repository has had its configuration reset.
            </summary>
            <value>
            Event to notify that the repository has had its configuration reset.
            </value>
            <remarks>
            <para>
            Event raised when the repository's configuration has been
            reset to default.
            </para>
            </remarks>
        </member>
        <member name="E:log4net.Repository.ILoggerRepository.ConfigurationChanged">
            <summary>
            Event to notify that the repository has had its configuration changed.
            </summary>
            <value>
            Event to notify that the repository has had its configuration changed.
            </value>
            <remarks>
            <para>
            Event raised when the repository's configuration has been changed.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.Properties">
            <summary>
            Repository specific properties
            </summary>
            <value>
            Repository specific properties
            </value>
            <remarks>
            <para>
            These properties can be specified on a repository specific basis.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.GetAppenders">
            <summary>
            Returns all the Appenders that are configured as an Array.
            </summary>
            <returns>All the Appenders</returns>
            <remarks>
            <para>
            Returns all the Appenders that are configured as an Array.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.IXmlRepositoryConfigurator">
            <summary>
            Configure repository using XML
            </summary>
            <remarks>
            <para>
            Interface used by Xml configurator to configure a <see cref="T:log4net.Repository.ILoggerRepository"/>.
            </para>
            <para>
            A <see cref="T:log4net.Repository.ILoggerRepository"/> should implement this interface to support
            configuration by the <see cref="T:log4net.Config.XmlConfigurator"/>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.IXmlRepositoryConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            Initialize the repository using the specified config
            </summary>
            <param name="element">the element containing the root of the config</param>
            <remarks>
            <para>
            The schema for the XML configuration data is defined by
            the implementation.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.LoggerRepositorySkeleton">
            <summary>
            Base implementation of <see cref="T:log4net.Repository.ILoggerRepository"/>
            </summary>
            <remarks>
            <para>
            Default abstract implementation of the <see cref="T:log4net.Repository.ILoggerRepository"/> interface.
            </para>
            <para>
            Skeleton implementation of the <see cref="T:log4net.Repository.ILoggerRepository"/> interface.
            All <see cref="T:log4net.Repository.ILoggerRepository"/> types can extend this type.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.#ctor">
            <summary>
            Default Constructor
            </summary>
            <remarks>
            <para>
            Initializes the repository with default (empty) properties.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.#ctor(log4net.Util.PropertiesDictionary)">
            <summary>
            Construct the repository using specific properties
            </summary>
            <param name="properties">the properties to set for this repository</param>
            <remarks>
            <para>
            Initializes the repository with specified properties.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.Name">
            <summary>
            The name of the repository
            </summary>
            <value>
            The string name of the repository
            </value>
            <remarks>
            <para>
            The name of this repository. The name is
            used to store and lookup the repositories 
            stored by the <see cref="T:log4net.Core.IRepositorySelector"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.Threshold">
            <summary>
            The threshold for all events in this repository
            </summary>
            <value>
            The threshold for all events in this repository
            </value>
            <remarks>
            <para>
            The threshold for all events in this repository
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.RendererMap">
            <summary>
            RendererMap accesses the object renderer map for this repository.
            </summary>
            <value>
            RendererMap accesses the object renderer map for this repository.
            </value>
            <remarks>
            <para>
            RendererMap accesses the object renderer map for this repository.
            </para>
            <para>
            The RendererMap holds a mapping between types and
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/> objects.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.PluginMap">
            <summary>
            The plugin map for this repository.
            </summary>
            <value>
            The plugin map for this repository.
            </value>
            <remarks>
            <para>
            The plugin map holds the <see cref="T:log4net.Plugin.IPlugin"/> instances
            that have been attached to this repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.LevelMap">
            <summary>
            Get the level map for the Repository.
            </summary>
            <remarks>
            <para>
            Get the level map for the Repository.
            </para>
            <para>
            The level map defines the mappings between
            level names and <see cref="T:log4net.Core.Level"/> objects in
            this repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.Exists(System.String)">
            <summary>
            Test if logger exists
            </summary>
            <param name="name">The name of the logger to lookup</param>
            <returns>The Logger object with the name specified</returns>
            <remarks>
            <para>
            Check if the named logger exists in the repository. If so return
            its reference, otherwise returns <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.GetCurrentLoggers">
            <summary>
            Returns all the currently defined loggers in the repository
            </summary>
            <returns>All the defined loggers</returns>
            <remarks>
            <para>
            Returns all the currently defined loggers in the repository as an Array.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.GetLogger(System.String)">
            <summary>
            Return a new logger instance
            </summary>
            <param name="name">The name of the logger to retrieve</param>
            <returns>The logger object with the name specified</returns>
            <remarks>
            <para>
            Return a new logger instance.
            </para>
            <para>
            If a logger of that name already exists, then it will be
            returned. Otherwise, a new logger will be instantiated and
            then linked with its existing ancestors as well as children.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.Shutdown">
            <summary>
            Shutdown the repository
            </summary>
            <remarks>
            <para>
            Shutdown the repository. Can be overridden in a subclass.
            This base class implementation notifies the <see cref="E:log4net.Repository.LoggerRepositorySkeleton.ShutdownEvent"/>
            listeners and all attached plugins of the shutdown event.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.ResetConfiguration">
            <summary>
            Reset the repositories configuration to a default state
            </summary>
            <remarks>
            <para>
            Reset all values contained in this instance to their
            default state.
            </para>
            <para>
            Existing loggers are not removed. They are just reset.
            </para>
            <para>
            This method should be used sparingly and with care as it will
            block all logging until it is completed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.Log(log4net.Core.LoggingEvent)">
            <summary>
            Log the logEvent through this repository.
            </summary>
            <param name="logEvent">the event to log</param>
            <remarks>
            <para>
            This method should not normally be used to log.
            The <see cref="T:log4net.ILog"/> interface should be used 
            for routine logging. This interface can be obtained
            using the <see cref="M:log4net.LogManager.GetLogger(string)"/> method.
            </para>
            <para>
            The <c>logEvent</c> is delivered to the appropriate logger and
            that logger is then responsible for logging the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.Configured">
            <summary>
            Flag indicates if this repository has been configured.
            </summary>
            <value>
            Flag indicates if this repository has been configured.
            </value>
            <remarks>
            <para>
            Flag indicates if this repository has been configured.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.ConfigurationMessages">
            <summary>
            Contains a list of internal messages captures during the 
            last configuration.
            </summary>
        </member>
        <member name="E:log4net.Repository.LoggerRepositorySkeleton.ShutdownEvent">
            <summary>
            Event to notify that the repository has been shutdown.
            </summary>
            <value>
            Event to notify that the repository has been shutdown.
            </value>
            <remarks>
            <para>
            Event raised when the repository has been shutdown.
            </para>
            </remarks>
        </member>
        <member name="E:log4net.Repository.LoggerRepositorySkeleton.ConfigurationReset">
            <summary>
            Event to notify that the repository has had its configuration reset.
            </summary>
            <value>
            Event to notify that the repository has had its configuration reset.
            </value>
            <remarks>
            <para>
            Event raised when the repository's configuration has been
            reset to default.
            </para>
            </remarks>
        </member>
        <member name="E:log4net.Repository.LoggerRepositorySkeleton.ConfigurationChanged">
            <summary>
            Event to notify that the repository has had its configuration changed.
            </summary>
            <value>
            Event to notify that the repository has had its configuration changed.
            </value>
            <remarks>
            <para>
            Event raised when the repository's configuration has been changed.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.Properties">
            <summary>
            Repository specific properties
            </summary>
            <value>
            Repository specific properties
            </value>
            <remarks>
            These properties can be specified on a repository specific basis
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.GetAppenders">
            <summary>
            Returns all the Appenders that are configured as an Array.
            </summary>
            <returns>All the Appenders</returns>
            <remarks>
            <para>
            Returns all the Appenders that are configured as an Array.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.LoggerRepositorySkeleton.declaringType">
            <summary>
            The fully qualified type of the LoggerRepositorySkeleton class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.AddRenderer(System.Type,log4net.ObjectRenderer.IObjectRenderer)">
            <summary>
            Adds an object renderer for a specific class. 
            </summary>
            <param name="typeToRender">The type that will be rendered by the renderer supplied.</param>
            <param name="rendererInstance">The object renderer used to render the object.</param>
            <remarks>
            <para>
            Adds an object renderer for a specific class. 
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.OnShutdown(System.EventArgs)">
            <summary>
            Notify the registered listeners that the repository is shutting down
            </summary>
            <param name="e">Empty EventArgs</param>
            <remarks>
            <para>
            Notify any listeners that this repository is shutting down.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.OnConfigurationReset(System.EventArgs)">
            <summary>
            Notify the registered listeners that the repository has had its configuration reset
            </summary>
            <param name="e">Empty EventArgs</param>
            <remarks>
            <para>
            Notify any listeners that this repository's configuration has been reset.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.OnConfigurationChanged(System.EventArgs)">
            <summary>
            Notify the registered listeners that the repository has had its configuration changed
            </summary>
            <param name="e">Empty EventArgs</param>
            <remarks>
            <para>
            Notify any listeners that this repository's configuration has changed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.RaiseConfigurationChanged(System.EventArgs)">
            <summary>
            Raise a configuration changed event on this repository
            </summary>
            <param name="e">EventArgs.Empty</param>
            <remarks>
            <para>
            Applications that programmatically change the configuration of the repository should
            raise this event notification to notify listeners.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.Flush(System.Int32)">
            <summary>
            Flushes all configured Appenders that implement <see cref="T:log4net.Appender.IFlushable"/>.
            </summary>
            <param name="millisecondsTimeout">The maximum time in milliseconds to wait for logging events from asycnhronous appenders to be flushed,
            or <see cref="F:System.Threading.Timeout.Infinite"/> to wait indefinitely.</param>
            <returns><c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="T:log4net.ThreadContext">
            <summary>
            The log4net Thread Context.
            </summary>
            <remarks>
            <para>
            The <c>ThreadContext</c> provides a location for thread specific debugging 
            information to be stored.
            The <c>ThreadContext</c> properties override any <see cref="T:log4net.GlobalContext"/>
            properties with the same name.
            </para>
            <para>
            The thread context has a properties map and a stack.
            The properties and stack can 
            be included in the output of log messages. The <see cref="T:log4net.Layout.PatternLayout"/>
            supports selecting and outputting these properties.
            </para>
            <para>
            The Thread Context provides a diagnostic context for the current thread. 
            This is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.
            </para>
            <para>
            The Thread Context is managed on a per thread basis.
            </para>
            </remarks>
            <example>Example of using the thread context properties to store a username.
            <code lang="C#">
            ThreadContext.Properties["user"] = userName;
            log.Info("This log message has a ThreadContext Property called 'user'");
            </code>
            </example>
            <example>Example of how to push a message into the context stack
            <code lang="C#">
            using(ThreadContext.Stacks["NDC"].Push("my context message"))
            {
            	log.Info("This log message has a ThreadContext Stack message that includes 'my context message'");
            
            } // at the end of the using block the message is automatically popped 
            </code>
            </example>
            <threadsafety static="true" instance="true" />
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.ThreadContext.#ctor">
            <summary>
            Private Constructor. 
            </summary>
            <remarks>
            <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.ThreadContext.Properties">
            <summary>
            The thread properties map
            </summary>
            <value>
            The thread properties map
            </value>
            <remarks>
            <para>
            The <c>ThreadContext</c> properties override any <see cref="T:log4net.GlobalContext"/>
            properties with the same name.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.ThreadContext.Stacks">
            <summary>
            The thread stacks
            </summary>
            <value>
            stack map
            </value>
            <remarks>
            <para>
            The thread local stacks.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.ThreadContext.s_properties">
            <summary>
            The thread context properties instance
            </summary>
        </member>
        <member name="F:log4net.ThreadContext.s_stacks">
            <summary>
            The thread context stacks instance
            </summary>
        </member>
        <member name="T:log4net.Util.AppenderAttachedImpl">
            <summary>
            A straightforward implementation of the <see cref="T:log4net.Core.IAppenderAttachable"/> interface.
            </summary>
            <remarks>
            <para>
            This is the default implementation of the <see cref="T:log4net.Core.IAppenderAttachable"/>
            interface. Implementors of the <see cref="T:log4net.Core.IAppenderAttachable"/> interface
            should aggregate an instance of this type.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.AppenderAttachedImpl"/> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.AppendLoopOnAppenders(log4net.Core.LoggingEvent)">
            <summary>
            Append on on all attached appenders.
            </summary>
            <param name="loggingEvent">The event being logged.</param>
            <returns>The number of appenders called.</returns>
            <remarks>
            <para>
            Calls the <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method on all 
            attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.AppendLoopOnAppenders(log4net.Core.LoggingEvent[])">
            <summary>
            Append on on all attached appenders.
            </summary>
            <param name="loggingEvents">The array of events being logged.</param>
            <returns>The number of appenders called.</returns>
            <remarks>
            <para>
            Calls the <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method on all 
            attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.CallAppend(log4net.Appender.IAppender,log4net.Core.LoggingEvent[])">
            <summary>
            Calls the DoAppende method on the <see cref="T:log4net.Appender.IAppender"/> with 
            the <see cref="T:log4net.Core.LoggingEvent"/> objects supplied.
            </summary>
            <param name="appender">The appender</param>
            <param name="loggingEvents">The events</param>
            <remarks>
            <para>
            If the <paramref name="appender" /> supports the <see cref="T:log4net.Appender.IBulkAppender"/>
            interface then the <paramref name="loggingEvents" /> will be passed 
            through using that interface. Otherwise the <see cref="T:log4net.Core.LoggingEvent"/>
            objects in the array will be passed one at a time.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Attaches an appender.
            </summary>
            <param name="newAppender">The appender to add.</param>
            <remarks>
            <para>
            If the appender is already in the list it won't be added again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.AppenderAttachedImpl.Appenders">
            <summary>
            Gets all attached appenders.
            </summary>
            <returns>
            A collection of attached appenders, or <c>null</c> if there
            are no attached appenders.
            </returns>
            <remarks>
            <para>
            The read only collection of all currently attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.GetAppender(System.String)">
            <summary>
            Gets an attached appender with the specified name.
            </summary>
            <param name="name">The name of the appender to get.</param>
            <returns>
            The appender with the name specified, or <c>null</c> if no appender with the
            specified name is found.
            </returns>
            <remarks>
            <para>
            Lookup an attached appender by name.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.RemoveAllAppenders">
            <summary>
            Removes all attached appenders.
            </summary>
            <remarks>
            <para>
            Removes and closes all attached appenders
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Removes the specified appender from the list of attached appenders.
            </summary>
            <param name="appender">The appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close"/> on the appender removed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.RemoveAppender(System.String)">
            <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close"/> on the appender removed.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.AppenderAttachedImpl.m_appenderList">
            <summary>
            List of appenders
            </summary>
        </member>
        <member name="F:log4net.Util.AppenderAttachedImpl.m_appenderArray">
            <summary>
            Array of appenders, used to cache the m_appenderList
            </summary>
        </member>
        <member name="F:log4net.Util.AppenderAttachedImpl.declaringType">
            <summary>
            The fully qualified type of the AppenderAttachedImpl class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.CompositeProperties">
            <summary>
            This class aggregates several PropertiesDictionary collections together.
            </summary>
            <remarks>
            <para>
            Provides a dictionary style lookup over an ordered list of
            <see cref="T:log4net.Util.PropertiesDictionary"/> collections.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.CompositeProperties.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.CompositeProperties" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.CompositeProperties.Item(System.String)">
            <summary>
            Gets the value of a property
            </summary>
            <value>
            The value for the property with the specified key
            </value>
            <remarks>
            <para>
            Looks up the value for the <paramref name="key" /> specified.
            The <see cref="T:log4net.Util.PropertiesDictionary"/> collections are searched
            in the order in which they were added to this collection. The value
            returned is the value held by the first collection that contains
            the specified key.
            </para>
            <para>
            If none of the collections contain the specified key then
            <c>null</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CompositeProperties.Add(log4net.Util.ReadOnlyPropertiesDictionary)">
            <summary>
            Add a Properties Dictionary to this composite collection
            </summary>
            <param name="properties">the properties to add</param>
            <remarks>
            <para>
            Properties dictionaries added first take precedence over dictionaries added
            later.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CompositeProperties.Flatten">
            <summary>
            Flatten this composite collection into a single properties dictionary
            </summary>
            <returns>the flattened dictionary</returns>
            <remarks>
            <para>
            Reduces the collection of ordered dictionaries to a single dictionary
            containing the resultant values for the keys.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ContextPropertiesBase">
            <summary>
            Base class for Context Properties implementations
            </summary>
            <remarks>
            <para>
            This class defines a basic property get set accessor
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="P:log4net.Util.ContextPropertiesBase.Item(System.String)">
            <summary>
            Gets or sets the value of a property
            </summary>
            <value>
            The value for the property with the specified key
            </value>
            <remarks>
            <para>
            Gets or sets the value of a property
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ConverterInfo">
            <summary>
            Wrapper class used to map converter names to converter types
            </summary>
            <remarks>
            <para>
            Pattern converter info class used during configuration by custom
            PatternString and PatternLayer converters.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ConverterInfo.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="P:log4net.Util.ConverterInfo.Name">
            <summary>
            Gets or sets the name of the conversion pattern
            </summary>
            <remarks>
            <para>
            The name of the pattern in the format string
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ConverterInfo.Type">
            <summary>
            Gets or sets the type of the converter
            </summary>
            <remarks>
            <para>
            The value specified must extend the 
            <see cref="T:log4net.Util.PatternConverter"/> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ConverterInfo.AddProperty(log4net.Util.PropertyEntry)">
            <summary>
            
            </summary>
            <param name="entry"></param>
        </member>
        <member name="P:log4net.Util.ConverterInfo.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="T:log4net.Util.CountingQuietTextWriter">
            <summary>
            Subclass of <see cref="T:log4net.Util.QuietTextWriter"/> that maintains a count of 
            the number of bytes written.
            </summary>
            <remarks>
            <para>
            This writer counts the number of bytes written.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.CountingQuietTextWriter.#ctor(System.IO.TextWriter,log4net.Core.IErrorHandler)">
            <summary>
            Constructor
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter" /> to actually write to.</param>
            <param name="errorHandler">The <see cref="T:log4net.Core.IErrorHandler" /> to report errors to.</param>
            <remarks>
            <para>
            Creates a new instance of the <see cref="T:log4net.Util.CountingQuietTextWriter" /> class 
            with the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:log4net.Core.IErrorHandler" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CountingQuietTextWriter.Write(System.Char)">
            <summary>
            Writes a character to the underlying writer and counts the number of bytes written.
            </summary>
            <param name="value">the char to write</param>
            <remarks>
            <para>
            Overrides implementation of <see cref="T:log4net.Util.QuietTextWriter"/>. Counts
            the number of bytes written.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CountingQuietTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a buffer to the underlying writer and counts the number of bytes written.
            </summary>
            <param name="buffer">the buffer to write</param>
            <param name="index">the start index to write from</param>
            <param name="count">the number of characters to write</param>
            <remarks>
            <para>
            Overrides implementation of <see cref="T:log4net.Util.QuietTextWriter"/>. Counts
            the number of bytes written.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CountingQuietTextWriter.Write(System.String)">
            <summary>
            Writes a string to the output and counts the number of bytes written.
            </summary>
            <param name="str">The string data to write to the output.</param>
            <remarks>
            <para>
            Overrides implementation of <see cref="T:log4net.Util.QuietTextWriter"/>. Counts
            the number of bytes written.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.CountingQuietTextWriter.Count">
            <summary>
            Gets or sets the total number of bytes written.
            </summary>
            <value>
            The total number of bytes written.
            </value>
            <remarks>
            <para>
            Gets or sets the total number of bytes written.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.CountingQuietTextWriter.m_countBytes">
            <summary>
            Total number of bytes written.
            </summary>
        </member>
        <member name="T:log4net.Util.CyclicBuffer">
            <summary>
            A fixed size rolling buffer of logging events.
            </summary>
            <remarks>
            <para>
            An array backed fixed size leaky bucket.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.CyclicBuffer.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize">The maximum number of logging events in the buffer.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.CyclicBuffer" /> class with 
            the specified maximum number of buffered logging events.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxSize"/> argument is not a positive integer.</exception>
        </member>
        <member name="M:log4net.Util.CyclicBuffer.Append(log4net.Core.LoggingEvent)">
            <summary>
            Appends a <paramref name="loggingEvent"/> to the buffer.
            </summary>
            <param name="loggingEvent">The event to append to the buffer.</param>
            <returns>The event discarded from the buffer, if the buffer is full, otherwise <c>null</c>.</returns>
            <remarks>
            <para>
            Append an event to the buffer. If the buffer still contains free space then
            <c>null</c> is returned. If the buffer is full then an event will be dropped
            to make space for the new event, the event dropped is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CyclicBuffer.PopOldest">
            <summary>
            Get and remove the oldest event in the buffer.
            </summary>
            <returns>The oldest logging event in the buffer</returns>
            <remarks>
            <para>
            Gets the oldest (first) logging event in the buffer and removes it 
            from the buffer.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CyclicBuffer.PopAll">
            <summary>
            Pops all the logging events from the buffer into an array.
            </summary>
            <returns>An array of all the logging events in the buffer.</returns>
            <remarks>
            <para>
            Get all the events in the buffer and clear the buffer.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CyclicBuffer.Clear">
            <summary>
            Clear the buffer
            </summary>
            <remarks>
            <para>
            Clear the buffer of all events. The events in the buffer are lost.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.CyclicBuffer.Item(System.Int32)">
            <summary>
            Gets the <paramref name="i"/>th oldest event currently in the buffer.
            </summary>
            <value>The <paramref name="i"/>th oldest event currently in the buffer.</value>
            <remarks>
            <para>
            If <paramref name="i"/> is outside the range 0 to the number of events
            currently in the buffer, then <c>null</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.CyclicBuffer.MaxSize">
            <summary>
            Gets the maximum size of the buffer.
            </summary>
            <value>The maximum size of the buffer.</value>
            <remarks>
            <para>
            Gets the maximum size of the buffer
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.CyclicBuffer.Length">
            <summary>
            Gets the number of logging events in the buffer.
            </summary>
            <value>The number of logging events in the buffer.</value>
            <remarks>
            <para>
            This number is guaranteed to be in the range 0 to <see cref="P:log4net.Util.CyclicBuffer.MaxSize"/>
            (inclusive).
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.EmptyCollection">
            <summary>
            An always empty <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <remarks>
            <para>
            A singleton implementation of the <see cref="T:System.Collections.ICollection"/>
            interface that always represents an empty collection.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.EmptyCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.EmptyCollection" /> class. 
            </summary>
            <remarks>
            <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyCollection.Instance">
            <summary>
            Gets the singleton instance of the empty collection.
            </summary>
            <returns>The singleton instance of the empty collection.</returns>
            <remarks>
            <para>
            Gets the singleton instance of the empty collection.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an 
            <see cref="T:System.Array"/>, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> 
            that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection"/>. The Array must have zero-based 
            indexing.</param>
            <param name="index">The zero-based index in array at which 
            copying begins.</param>
            <remarks>
            <para>
            As the collection is empty no values are copied into the array.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyCollection.IsSynchronized">
            <summary>
            Gets a value indicating if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary>
            <value>
            <b>true</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe); otherwise, <b>false</b>.
            </value>
            <remarks>
            <para>
            For the <see cref="T:log4net.Util.EmptyCollection"/> this property is always <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </value>
            <remarks>
            <para>
            As the collection is empty the <see cref="P:log4net.Util.EmptyCollection.Count"/> is always <c>0</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
            <remarks>
            <para>
            As the collection is empty and thread safe and synchronized this instance is also
            the <see cref="P:log4net.Util.EmptyCollection.SyncRoot"/> object.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can be used to 
            iterate through the collection.
            </returns>
            <remarks>
            <para>
            As the collection is empty a <see cref="T:log4net.Util.NullEnumerator"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.EmptyCollection.s_instance">
            <summary>
            The singleton instance of the empty collection.
            </summary>
        </member>
        <member name="T:log4net.Util.EmptyDictionary">
            <summary>
            An always empty <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <remarks>
            <para>
            A singleton implementation of the <see cref="T:System.Collections.IDictionary"/>
            interface that always represents an empty collection.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.EmptyDictionary" /> class. 
            </summary>
            <remarks>
            <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
            <returns>The singleton instance of the <see cref="T:log4net.Util.EmptyDictionary" />.</returns>
            <remarks>
            <para>
            Gets the singleton instance of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an 
            <see cref="T:System.Array"/>, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> 
            that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection"/>. The Array must have zero-based 
            indexing.</param>
            <param name="index">The zero-based index in array at which 
            copying begins.</param>
            <remarks>
            <para>
            As the collection is empty no values are copied into the array.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.IsSynchronized">
            <summary>
            Gets a value indicating if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary>
            <value>
            <b>true</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe); otherwise, <b>false</b>.
            </value>
            <remarks>
            <para>
            For the <see cref="T:log4net.Util.EmptyCollection"/> this property is always <b>true</b>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>
            </summary>
            <value>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </value>
            <remarks>
            <para>
            As the collection is empty the <see cref="P:log4net.Util.EmptyDictionary.Count"/> is always <c>0</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
            <remarks>
            <para>
            As the collection is empty and thread safe and synchronized this instance is also
            the <see cref="P:log4net.Util.EmptyDictionary.SyncRoot"/> object.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can be used to 
            iterate through the collection.
            </returns>
            <remarks>
            <para>
            As the collection is empty a <see cref="T:log4net.Util.NullEnumerator"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the 
            <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
            <remarks>
            <para>
            As the collection is empty no new values can be added. A <see cref="T:System.InvalidOperationException"/>
            is thrown if this method is called.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.Clear">
            <summary>
            Removes all elements from the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
            <remarks>
            <para>
            As the collection is empty no values can be removed. A <see cref="T:System.InvalidOperationException"/>
            is thrown if this method is called.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:log4net.Util.EmptyDictionary" /> contains an element 
            with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:log4net.Util.EmptyDictionary" />.</param>
            <returns><c>false</c></returns>
            <remarks>
            <para>
            As the collection is empty the <see cref="M:log4net.Util.EmptyDictionary.Contains(System.Object)"/> method always returns <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can be used to 
            iterate through the collection.
            </returns>
            <remarks>
            <para>
            As the collection is empty a <see cref="T:log4net.Util.NullEnumerator"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <remarks>
            <para>
            As the collection is empty no values can be removed. A <see cref="T:System.InvalidOperationException"/>
            is thrown if this method is called.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:log4net.Util.EmptyDictionary" /> has a fixed size.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            As the collection is empty <see cref="P:log4net.Util.EmptyDictionary.IsFixedSize"/> always returns <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:log4net.Util.EmptyDictionary" /> is read-only.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            As the collection is empty <see cref="P:log4net.Util.EmptyDictionary.IsReadOnly"/> always returns <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:log4net.Util.EmptyDictionary" />.</value>
            <remarks>
            <para>
            As the collection is empty a <see cref="T:log4net.Util.EmptyCollection"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> containing the values of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection" /> containing the values of the <see cref="T:log4net.Util.EmptyDictionary" />.</value>
            <remarks>
            <para>
            As the collection is empty a <see cref="T:log4net.Util.EmptyCollection"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <value><c>null</c></value>
            <remarks>
            <para>
            As the collection is empty no values can be looked up or stored. 
            If the index getter is called then <c>null</c> is returned.
            A <see cref="T:System.InvalidOperationException"/> is thrown if the setter is called.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
        </member>
        <member name="F:log4net.Util.EmptyDictionary.s_instance">
            <summary>
            The singleton instance of the empty dictionary.
            </summary>
        </member>
        <member name="T:log4net.Util.FormattingInfo">
            <summary>
            Contain the information obtained when parsing formatting modifiers 
            in conversion modifiers.
            </summary>
            <remarks>
            <para>
            Holds the formatting information extracted from the format string by
            the <see cref="T:log4net.Util.PatternParser"/>. This is used by the <see cref="T:log4net.Util.PatternConverter"/>
            objects when rendering the output.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.FormattingInfo.#ctor">
            <summary>
            Defaut Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.FormattingInfo" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.FormattingInfo.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.FormattingInfo" /> class
            with the specified parameters.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.FormattingInfo.Min">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
            <remarks>
            <para>
            Gets or sets the minimum value.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.FormattingInfo.Max">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
            <remarks>
            <para>
            Gets or sets the maximum value.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.FormattingInfo.LeftAlign">
            <summary>
            Gets or sets a flag indicating whether left align is enabled
            or not.
            </summary>
            <value>
            A flag indicating whether left align is enabled or not.
            </value>
            <remarks>
            <para>
            Gets or sets a flag indicating whether left align is enabled or not.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.GlobalContextProperties">
            <summary>
            Implementation of Properties collection for the <see cref="T:log4net.GlobalContext"/>
            </summary>
            <remarks>
            <para>
            This class implements a properties collection that is thread safe and supports both
            storing properties and capturing a read only copy of the current propertied.
            </para>
            <para>
            This class is optimized to the scenario where the properties are read frequently
            and are modified infrequently.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.GlobalContextProperties.m_readOnlyProperties">
            <summary>
            The read only copy of the properties.
            </summary>
            <remarks>
            <para>
            This variable is declared <c>volatile</c> to prevent the compiler and JIT from
            reordering reads and writes of this thread performed on different threads.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.GlobalContextProperties.m_syncRoot">
            <summary>
            Lock object used to synchronize updates within this instance
            </summary>
        </member>
        <member name="M:log4net.Util.GlobalContextProperties.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.GlobalContextProperties" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.GlobalContextProperties.Item(System.String)">
            <summary>
            Gets or sets the value of a property
            </summary>
            <value>
            The value for the property with the specified key
            </value>
            <remarks>
            <para>
            Reading the value for a key is faster than setting the value.
            When the value is written a new read only copy of 
            the properties is created.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.GlobalContextProperties.Remove(System.String)">
            <summary>
            Remove a property from the global context
            </summary>
            <param name="key">the key for the entry to remove</param>
            <remarks>
            <para>
            Removing an entry from the global context properties is relatively expensive compared
            with reading a value. 
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.GlobalContextProperties.Clear">
            <summary>
            Clear the global context properties
            </summary>
        </member>
        <member name="M:log4net.Util.GlobalContextProperties.GetReadOnlyProperties">
            <summary>
            Get a readonly immutable copy of the properties
            </summary>
            <returns>the current global context properties</returns>
            <remarks>
            <para>
            This implementation is fast because the GlobalContextProperties class
            stores a readonly copy of the properties.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ILogExtensions">
            <summary>
            The static class ILogExtensions contains a set of widely used
            methods that ease the interaction with the ILog interface implementations.
            </summary>
            <remarks>
            <para>
            This class contains methods for logging at different levels and checks the
            properties for determining if those logging levels are enabled in the current
            configuration.
            </para>
            </remarks>
            <example>Simple example of logging messages
            <code lang="C#">
            using log4net.Util;
            
            ILog log = LogManager.GetLogger("application-log");
            
            log.InfoExt("Application Start");
            log.DebugExt("This is a debug message");
            </code>
            </example>
        </member>
        <member name="F:log4net.Util.ILogExtensions.declaringType">
            <summary>
            The fully qualified type of the Logger class.
            </summary>
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Func{System.Object})">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsDebugEnabled"/> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog"/>
            implementation.  If this logger is <c>INFO</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Func{System.Object},System.Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Func{System.Object},System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Debug"/> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsDebugEnabled"/> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog"/>
            implementation. If this logger is <c>INFO</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsDebugEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Func{System.Object})">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsInfoEnabled"/> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog"/>
            implementation.  If this logger is <c>INFO</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Func{System.Object},System.Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Func{System.Object},System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Info"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Info"/> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsInfoEnabled"/> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog"/>
            implementation. If this logger is <c>INFO</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Info"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsInfoEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Func{System.Object})">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsWarnEnabled"/> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog"/>
            implementation.  If this logger is <c>WARN</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Func{System.Object},System.Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Func{System.Object},System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Warn"/> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsWarnEnabled"/> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog"/>
            implementation. If this logger is <c>WARN</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsWarnEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Func{System.Object})">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsErrorEnabled"/> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog"/>
            implementation.  If this logger is <c>ERROR</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Func{System.Object},System.Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Func{System.Object},System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Error"/> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsErrorEnabled"/> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog"/>
            implementation. If this logger is <c>ERROR</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsErrorEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Func{System.Object})">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsFatalEnabled"/> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog"/>
            implementation.  If this logger is <c>FATAL</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Func{System.Object},System.Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Func{System.Object},System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Fatal"/> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <remarks>
            <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsFatalEnabled"/> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog"/>
            implementation. If this logger is <c>FATAL</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer"/>. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
            <para><b>WARNING</b> Note that passing an <see cref="T:System.Exception"/> 
            to this method will print the name of the <see cref="T:System.Exception"/> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)"/> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
            <para>
            See the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object)"/> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information</param>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal"/> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])"/> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception"/> object to include in the
            log event. To pass an <see cref="T:System.Exception"/> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)"/>
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)"/>
            <seealso cref="P:log4net.ILog.IsFatalEnabled"/>
        </member>
        <member name="T:log4net.Util.LevelMapping">
            <summary>
            Manages a mapping from levels to <see cref="T:log4net.Util.LevelMappingEntry"/>
            </summary>
            <remarks>
            <para>
            Manages an ordered mapping from <see cref="T:log4net.Core.Level"/> instances 
            to <see cref="T:log4net.Util.LevelMappingEntry"/> subclasses.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.LevelMapping.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Initialise a new instance of <see cref="T:log4net.Util.LevelMapping"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LevelMapping.Add(log4net.Util.LevelMappingEntry)">
            <summary>
            Add a <see cref="T:log4net.Util.LevelMappingEntry"/> to this mapping
            </summary>
            <param name="entry">the entry to add</param>
            <remarks>
            <para>
            If a <see cref="T:log4net.Util.LevelMappingEntry"/> has previously been added
            for the same <see cref="T:log4net.Core.Level"/> then that entry will be 
            overwritten.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LevelMapping.Lookup(log4net.Core.Level)">
            <summary>
            Lookup the mapping for the specified level
            </summary>
            <param name="level">the level to lookup</param>
            <returns>the <see cref="T:log4net.Util.LevelMappingEntry"/> for the level or <c>null</c> if no mapping found</returns>
            <remarks>
            <para>
            Lookup the value for the specified level. Finds the nearest
            mapping value for the level that is equal to or less than the
            <paramref name="level"/> specified.
            </para>
            <para>
            If no mapping could be found then <c>null</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LevelMapping.ActivateOptions">
            <summary>
            Initialize options
            </summary>
            <remarks>
            <para>
            Caches the sorted list of <see cref="T:log4net.Util.LevelMappingEntry"/> in an array
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.LevelMappingEntry">
            <summary>
            An entry in the <see cref="T:log4net.Util.LevelMapping"/>
            </summary>
            <remarks>
            <para>
            This is an abstract base class for types that are stored in the
            <see cref="T:log4net.Util.LevelMapping"/> object.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.LevelMappingEntry.#ctor">
            <summary>
            Default protected constructor
            </summary>
            <remarks>
            <para>
            Default protected constructor
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LevelMappingEntry.Level">
            <summary>
            The level that is the key for this mapping 
            </summary>
            <value>
            The <see cref="P:log4net.Util.LevelMappingEntry.Level"/> that is the key for this mapping 
            </value>
            <remarks>
            <para>
            Get or set the <see cref="P:log4net.Util.LevelMappingEntry.Level"/> that is the key for this
            mapping subclass.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LevelMappingEntry.ActivateOptions">
            <summary>
            Initialize any options defined on this entry
            </summary>
            <remarks>
            <para>
            Should be overridden by any classes that need to initialise based on their options
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.LogicalThreadContextProperties">
            <summary>
            Implementation of Properties collection for the <see cref="T:log4net.LogicalThreadContext"/>
            </summary>
            <remarks>
            <para>
            Class implements a collection of properties that is specific to each thread.
            The class is not synchronized as each thread has its own <see cref="T:log4net.Util.PropertiesDictionary"/>.
            </para>
            <para>
            This class stores its properties in a slot on the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> named
            <c>log4net.Util.LogicalThreadContextProperties</c>.
            </para>
            <para>
            For .NET Standard 1.3 this class uses
            System.Threading.AsyncLocal rather than <see
            cref="T:System.Runtime.Remoting.Messaging.CallContext"/>.
            </para>
            <para>
            The <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> requires a link time 
            <see cref="T:System.Security.Permissions.SecurityPermission"/> for the
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure"/>.
            If the calling code does not have this permission then this context will be disabled.
            It will not store any property values set on it.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextProperties.m_disabled">
            <summary>
            Flag used to disable this context if we don't have permission to access the CallContext.
            </summary>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextProperties.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.LogicalThreadContextProperties" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogicalThreadContextProperties.Item(System.String)">
            <summary>
            Gets or sets the value of a property
            </summary>
            <value>
            The value for the property with the specified key
            </value>
            <remarks>
            <para>
            Get or set the property value for the <paramref name="key"/> specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextProperties.Remove(System.String)">
            <summary>
            Remove a property
            </summary>
            <param name="key">the key for the entry to remove</param>
            <remarks>
            <para>
            Remove the value for the specified <paramref name="key"/> from the context.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextProperties.Clear">
            <summary>
            Clear all the context properties
            </summary>
            <remarks>
            <para>
            Clear all the context properties
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextProperties.GetProperties(System.Boolean)">
            <summary>
            Get the PropertiesDictionary stored in the LocalDataStoreSlot for this thread.
            </summary>
            <param name="create">create the dictionary if it does not exist, otherwise return null if is does not exist</param>
            <returns>the properties for this thread</returns>
            <remarks>
            <para>
            The collection returned is only to be used on the calling thread. If the
            caller needs to share the collection between different threads then the 
            caller must clone the collection before doings so.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextProperties.GetLogicalProperties">
            <summary>
            Gets the call context get data.
            </summary>
            <returns>The peroperties dictionary stored in the call context</returns>
            <remarks>
            The <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> method <see cref="M:System.Runtime.Remoting.Messaging.CallContext.GetData(System.String)"/> has a
            security link demand, therfore we must put the method call in a seperate method
            that we can wrap in an exception handler.
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextProperties.SetLogicalProperties(log4net.Util.PropertiesDictionary)">
            <summary>
            Sets the call context data.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            The <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> method <see cref="M:System.Runtime.Remoting.Messaging.CallContext.SetData(System.String,System.Object)"/> has a
            security link demand, therfore we must put the method call in a seperate method
            that we can wrap in an exception handler.
            </remarks>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextProperties.declaringType">
            <summary>
            The fully qualified type of the LogicalThreadContextProperties class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.TwoArgAction`2">
            <summary>
            Delegate type used for LogicalThreadContextStack's callbacks.
            </summary>
        </member>
        <member name="T:log4net.Util.LogicalThreadContextStack">
            <summary>
            Implementation of Stack for the <see cref="T:log4net.LogicalThreadContext"/>
            </summary>
            <remarks>
            <para>
            Implementation of Stack for the <see cref="T:log4net.LogicalThreadContext"/>
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextStack.m_stack">
            <summary>
            The stack store.
            </summary>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextStack.m_propertyKey">
            <summary>
            The name of this <see cref="T:log4net.Util.LogicalThreadContextStack"/> within the
            <see cref="T:log4net.Util.LogicalThreadContextProperties"/>.
            </summary>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextStack.m_registerNew">
            <summary>
            The callback used to let the <see cref="T:log4net.Util.LogicalThreadContextStacks"/> register a
            new instance of a <see cref="T:log4net.Util.LogicalThreadContextStack"/>.
            </summary>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.#ctor(System.String,log4net.Util.TwoArgAction{System.String,log4net.Util.LogicalThreadContextStack})">
            <summary>
            Internal constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.LogicalThreadContextStack" /> class. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogicalThreadContextStack.Count">
            <summary>
            The number of messages in the stack
            </summary>
            <value>
            The current number of messages in the stack
            </value>
            <remarks>
            <para>
            The current number of messages in the stack. That is
            the number of times <see cref="M:log4net.Util.LogicalThreadContextStack.Push(System.String)"/> has been called
            minus the number of times <see cref="M:log4net.Util.LogicalThreadContextStack.Pop"/> has been called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.Clear">
            <summary>
            Clears all the contextual information held in this stack.
            </summary>
            <remarks>
            <para>
            Clears all the contextual information held in this stack.
            Only call this if you think that this thread is being reused after
            a previous call execution which may not have completed correctly.
            You do not need to use this method if you always guarantee to call
            the <see cref="M:System.IDisposable.Dispose"/> method of the <see cref="T:System.IDisposable"/>
            returned from <see cref="M:log4net.Util.LogicalThreadContextStack.Push(System.String)"/> even in exceptional circumstances,
            for example by using the <c>using(log4net.LogicalThreadContext.Stacks["NDC"].Push("Stack_Message"))</c> 
            syntax.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.Pop">
            <summary>
            Removes the top context from this stack.
            </summary>
            <returns>The message in the context that was removed from the top of this stack.</returns>
            <remarks>
            <para>
            Remove the top context from this stack, and return
            it to the caller. If this stack is empty then an
            empty string (not <see langword="null"/>) is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.Push(System.String)">
            <summary>
            Pushes a new context message into this stack.
            </summary>
            <param name="message">The new context message.</param>
            <returns>
            An <see cref="T:System.IDisposable"/> that can be used to clean up the context stack.
            </returns>
            <remarks>
            <para>
            Pushes a new context onto this stack. An <see cref="T:System.IDisposable"/>
            is returned that can be used to clean up this stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            context.
            </para>
            </remarks>
            <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code lang="C#">
            using(log4net.LogicalThreadContext.Stacks["NDC"].Push("Stack_Message"))
            {
            	log.Warn("This should have an ThreadContext Stack message");
            }
            </code>
            </example>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.GetFullMessage">
            <summary>
            Gets the current context information for this stack.
            </summary>
            <returns>The current context information.</returns>
        </member>
        <member name="P:log4net.Util.LogicalThreadContextStack.InternalStack">
            <summary>
            Gets and sets the internal stack used by this <see cref="T:log4net.Util.LogicalThreadContextStack"/>
            </summary>
            <value>The internal storage stack</value>
            <remarks>
            <para>
            This property is provided only to support backward compatability 
            of the <see cref="T:log4net.NDC"/>. Tytpically the internal stack should not
            be modified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.ToString">
            <summary>
            Gets the current context information for this stack.
            </summary>
            <returns>Gets the current context information</returns>
            <remarks>
            <para>
            Gets the current context information for this stack.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.log4net#Core#IFixingRequired#GetFixedObject">
            <summary>
            Get a portable version of this object
            </summary>
            <returns>the portable instance of this object</returns>
            <remarks>
            <para>
            Get a cross thread portable version of this object
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.LogicalThreadContextStack.StackFrame">
            <summary>
            Inner class used to represent a single context frame in the stack.
            </summary>
            <remarks>
            <para>
            Inner class used to represent a single context frame in the stack.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.StackFrame.#ctor(System.String,log4net.Util.LogicalThreadContextStack.StackFrame)">
            <summary>
            Constructor
            </summary>
            <param name="message">The message for this context.</param>
            <param name="parent">The parent context in the chain.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.LogicalThreadContextStack.StackFrame" /> class
            with the specified message and parent context.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogicalThreadContextStack.StackFrame.Message">
            <summary>
            Get the message.
            </summary>
            <value>The message.</value>
            <remarks>
            <para>
            Get the message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogicalThreadContextStack.StackFrame.FullMessage">
            <summary>
            Gets the full text of the context down to the root level.
            </summary>
            <value>
            The full text of the context down to the root level.
            </value>
            <remarks>
            <para>
            Gets the full text of the context down to the root level.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.LogicalThreadContextStack.AutoPopStackFrame">
            <summary>
            Struct returned from the <see cref="M:log4net.Util.LogicalThreadContextStack.Push(System.String)"/> method.
            </summary>
            <remarks>
            <para>
            This struct implements the <see cref="T:System.IDisposable"/> and is designed to be used
            with the <see langword="using"/> pattern to remove the stack frame at the end of the scope.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextStack.AutoPopStackFrame.m_frameDepth">
            <summary>
            The depth to trim the stack to when this instance is disposed
            </summary>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextStack.AutoPopStackFrame.m_logicalThreadContextStack">
            <summary>
            The outer LogicalThreadContextStack.
            </summary>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.AutoPopStackFrame.#ctor(log4net.Util.LogicalThreadContextStack,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="logicalThreadContextStack">The internal stack used by the ThreadContextStack.</param>
            <param name="frameDepth">The depth to return the stack to when this object is disposed.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.LogicalThreadContextStack.AutoPopStackFrame" /> class with
            the specified stack and return depth.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.AutoPopStackFrame.Dispose">
            <summary>
            Returns the stack to the correct depth.
            </summary>
            <remarks>
            <para>
            Returns the stack to the correct depth.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.LogicalThreadContextStacks">
            <summary>
            Implementation of Stacks collection for the <see cref="T:log4net.LogicalThreadContext"/>
            </summary>
            <remarks>
            <para>
            Implementation of Stacks collection for the <see cref="T:log4net.LogicalThreadContext"/>
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStacks.#ctor(log4net.Util.LogicalThreadContextProperties)">
            <summary>
            Internal constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStacks" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogicalThreadContextStacks.Item(System.String)">
            <summary>
            Gets the named thread context stack
            </summary>
            <value>
            The named stack
            </value>
            <remarks>
            <para>
            Gets the named thread context stack
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextStacks.declaringType">
            <summary>
            The fully qualified type of the ThreadContextStacks class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.LogReceivedEventHandler">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="T:log4net.Util.LogLog">
            <summary>
            Outputs log statements from within the log4net assembly.
            </summary>
            <remarks>
            <para>
            Log4net components cannot make log4net logging calls. However, it is
            sometimes useful for the user to learn about what log4net is
            doing.
            </para>
            <para>
            All log4net internal debug calls go to the standard output stream
            whereas internal error messages are sent to the standard error output 
            stream.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="E:log4net.Util.LogLog.LogReceived">
            <summary>
            The event raised when an internal message has been received.
            </summary>
        </member>
        <member name="P:log4net.Util.LogLog.Source">
            <summary>
            The Type that generated the internal message.
            </summary>
        </member>
        <member name="P:log4net.Util.LogLog.TimeStamp">
            <summary>
            The DateTime stamp of when the internal message was received.
            </summary>
        </member>
        <member name="P:log4net.Util.LogLog.TimeStampUtc">
            <summary>
            The UTC DateTime stamp of when the internal message was received.
            </summary>
        </member>
        <member name="P:log4net.Util.LogLog.Prefix">
            <summary>
            A string indicating the severity of the internal message.
            </summary>
            <remarks>
            "log4net: ", 
            "log4net:ERROR ", 
            "log4net:WARN "
            </remarks>
        </member>
        <member name="P:log4net.Util.LogLog.Message">
            <summary>
            The internal log message.
            </summary>
        </member>
        <member name="P:log4net.Util.LogLog.Exception">
            <summary>
            The Exception related to the message.
            </summary>
            <remarks>
            Optional. Will be null if no Exception was passed.
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.ToString">
            <summary>
            Formats Prefix, Source, and Message in the same format as the value
            sent to Console.Out and Trace.Write.
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.Util.LogLog.#ctor(System.Type,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.LogLog" /> class. 
            </summary>
            <param name="source"></param>
            <param name="prefix"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:log4net.Util.LogLog.#cctor">
            <summary>
            Static constructor that initializes logging by reading 
            settings from the application configuration file.
            </summary>
            <remarks>
            <para>
            The <c>log4net.Internal.Debug</c> application setting
            controls internal debugging. This setting should be set
            to <c>true</c> to enable debugging.
            </para>
            <para>
            The <c>log4net.Internal.Quiet</c> application setting
            suppresses all internal logging including error messages. 
            This setting should be set to <c>true</c> to enable message
            suppression.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogLog.InternalDebugging">
            <summary>
            Gets or sets a value indicating whether log4net internal logging
            is enabled or disabled.
            </summary>
            <value>
            <c>true</c> if log4net internal logging is enabled, otherwise 
            <c>false</c>.
            </value>
            <remarks>
            <para>
            When set to <c>true</c>, internal debug level logging will be 
            displayed.
            </para>
            <para>
            This value can be set by setting the application setting 
            <c>log4net.Internal.Debug</c> in the application configuration
            file.
            </para>
            <para>
            The default value is <c>false</c>, i.e. debugging is
            disabled.
            </para>
            </remarks>
            <example>
            <para>
            The following example enables internal debugging using the 
            application configuration file :
            </para>
            <code lang="XML" escaped="true">
            <configuration>
            	<appSettings>
            		<add key="log4net.Internal.Debug" value="true" />
            	</appSettings>
            </configuration>
            </code>
            </example>
        </member>
        <member name="P:log4net.Util.LogLog.QuietMode">
            <summary>
            Gets or sets a value indicating whether log4net should generate no output
            from internal logging, not even for errors. 
            </summary>
            <value>
            <c>true</c> if log4net should generate no output at all from internal 
            logging, otherwise <c>false</c>.
            </value>
            <remarks>
            <para>
            When set to <c>true</c> will cause internal logging at all levels to be 
            suppressed. This means that no warning or error reports will be logged. 
            This option overrides the <see cref="P:log4net.Util.LogLog.InternalDebugging"/> setting and 
            disables all debug also.
            </para>
            <para>This value can be set by setting the application setting
            <c>log4net.Internal.Quiet</c> in the application configuration file.
            </para>
            <para>
            The default value is <c>false</c>, i.e. internal logging is not
            disabled.
            </para>
            </remarks>
            <example>
            The following example disables internal logging using the 
            application configuration file :
            <code lang="XML" escaped="true">
            <configuration>
            	<appSettings>
            		<add key="log4net.Internal.Quiet" value="true" />
            	</appSettings>
            </configuration>
            </code>
            </example>
        </member>
        <member name="P:log4net.Util.LogLog.EmitInternalMessages">
            <summary>
            
            </summary>
        </member>
        <member name="M:log4net.Util.LogLog.OnLogReceived(System.Type,System.String,System.String,System.Exception)">
            <summary>
            Raises the LogReceived event when an internal messages is received.
            </summary>
            <param name="source"></param>
            <param name="prefix"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="P:log4net.Util.LogLog.IsDebugEnabled">
            <summary>
            Test if LogLog.Debug is enabled for output.
            </summary>
            <value>
            <c>true</c> if Debug is enabled
            </value>
            <remarks>
            <para>
            Test if LogLog.Debug is enabled for output.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.Debug(System.Type,System.String)">
            <summary>
            Writes log4net internal debug messages to the 
            standard output stream.
            </summary>
            <param name="source"></param>
            <param name="message">The message to log.</param>
            <remarks>
            <para>
            All internal debug messages are prepended with 
            the string "log4net: ".
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.Debug(System.Type,System.String,System.Exception)">
            <summary>
            Writes log4net internal debug messages to the 
            standard output stream.
            </summary>
            <param name="source">The Type that generated this message.</param>
            <param name="message">The message to log.</param>
            <param name="exception">An exception to log.</param>
            <remarks>
            <para>
            All internal debug messages are prepended with 
            the string "log4net: ".
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogLog.IsWarnEnabled">
            <summary>
            Test if LogLog.Warn is enabled for output.
            </summary>
            <value>
            <c>true</c> if Warn is enabled
            </value>
            <remarks>
            <para>
            Test if LogLog.Warn is enabled for output.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.Warn(System.Type,System.String)">
            <summary>
            Writes log4net internal warning messages to the 
            standard error stream.
            </summary>
            <param name="source">The Type that generated this message.</param>
            <param name="message">The message to log.</param>
            <remarks>
            <para>
            All internal warning messages are prepended with 
            the string "log4net:WARN ".
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.Warn(System.Type,System.String,System.Exception)">
            <summary>
            Writes log4net internal warning messages to the 
            standard error stream.
            </summary>
            <param name="source">The Type that generated this message.</param>
            <param name="message">The message to log.</param>
            <param name="exception">An exception to log.</param>
            <remarks>
            <para>
            All internal warning messages are prepended with 
            the string "log4net:WARN ".
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogLog.IsErrorEnabled">
            <summary>
            Test if LogLog.Error is enabled for output.
            </summary>
            <value>
            <c>true</c> if Error is enabled
            </value>
            <remarks>
            <para>
            Test if LogLog.Error is enabled for output.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.Error(System.Type,System.String)">
            <summary>
            Writes log4net internal error messages to the 
            standard error stream.
            </summary>
            <param name="source">The Type that generated this message.</param>
            <param name="message">The message to log.</param>
            <remarks>
            <para>
            All internal error messages are prepended with 
            the string "log4net:ERROR ".
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.Error(System.Type,System.String,System.Exception)">
            <summary>
            Writes log4net internal error messages to the 
            standard error stream.
            </summary>
            <param name="source">The Type that generated this message.</param>
            <param name="message">The message to log.</param>
            <param name="exception">An exception to log.</param>
            <remarks>
            <para>
            All internal debug messages are prepended with 
            the string "log4net:ERROR ".
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.EmitOutLine(System.String)">
            <summary>
            Writes output to the standard output stream.  
            </summary>
            <param name="message">The message to log.</param>
            <remarks>
            <para>
            Writes to both Console.Out and System.Diagnostics.Trace.
            Note that the System.Diagnostics.Trace is not supported
            on the Compact Framework.
            </para>
            <para>
            If the AppDomain is not configured with a config file then
            the call to System.Diagnostics.Trace may fail. This is only
            an issue if you are programmatically creating your own AppDomains.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.EmitErrorLine(System.String)">
            <summary>
            Writes output to the standard error stream.  
            </summary>
            <param name="message">The message to log.</param>
            <remarks>
            <para>
            Writes to both Console.Error and System.Diagnostics.Trace.
            Note that the System.Diagnostics.Trace is not supported
            on the Compact Framework.
            </para>
            <para>
            If the AppDomain is not configured with a config file then
            the call to System.Diagnostics.Trace may fail. This is only
            an issue if you are programmatically creating your own AppDomains.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.LogLog.s_debugEnabled">
            <summary>
             Default debug level
            </summary>
        </member>
        <member name="F:log4net.Util.LogLog.s_quietMode">
            <summary>
            In quietMode not even errors generate any output.
            </summary>
        </member>
        <member name="T:log4net.Util.LogLog.LogReceivedAdapter">
            <summary>
            Subscribes to the LogLog.LogReceived event and stores messages
            to the supplied IList instance.
            </summary>
        </member>
        <member name="M:log4net.Util.LogLog.LogReceivedAdapter.#ctor(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:log4net.Util.LogLog.LogReceivedAdapter.Items">
            <summary>
            
            </summary>
        </member>
        <member name="M:log4net.Util.LogLog.LogReceivedAdapter.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:log4net.Util.LogReceivedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:log4net.Util.LogReceivedEventArgs.#ctor(log4net.Util.LogLog)">
            <summary>
            
            </summary>
            <param name="loglog"></param>
        </member>
        <member name="P:log4net.Util.LogReceivedEventArgs.LogLog">
            <summary>
            
            </summary>
        </member>
        <member name="T:log4net.Util.NativeError">
            <summary>
            Represents a native error code and message.
            </summary>
            <remarks>
            <para>
            Represents a Win32 platform native error.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.NativeError.#ctor(System.Int32,System.String)">
            <summary>
            Create an instance of the <see cref="T:log4net.Util.NativeError" /> class with the specified 
            error number and message.
            </summary>
            <param name="number">The number of the native error.</param>
            <param name="message">The message of the native error.</param>
            <remarks>
            <para>
            Create an instance of the <see cref="T:log4net.Util.NativeError" /> class with the specified 
            error number and message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NativeError.Number">
            <summary>
            Gets the number of the native error.
            </summary>
            <value>
            The number of the native error.
            </value>
            <remarks>
            <para>
            Gets the number of the native error.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NativeError.Message">
            <summary>
            Gets the message of the native error.
            </summary>
            <value>
            The message of the native error.
            </value>
            <remarks>
            <para>
            </para>
            Gets the message of the native error.
            </remarks>
        </member>
        <member name="M:log4net.Util.NativeError.GetLastError">
            <summary>
            Create a new instance of the <see cref="T:log4net.Util.NativeError" /> class for the last Windows error.
            </summary>
            <returns>
            An instance of the <see cref="T:log4net.Util.NativeError" /> class for the last windows error.
            </returns>
            <remarks>
            <para>
            The message for the <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> error number is lookup up using the 
            native Win32 <c>FormatMessage</c> function.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NativeError.GetError(System.Int32)">
            <summary>
            Create a new instance of the <see cref="T:log4net.Util.NativeError" /> class.
            </summary>
            <param name="number">the error number for the native error</param>
            <returns>
            An instance of the <see cref="T:log4net.Util.NativeError" /> class for the specified 
            error number.
            </returns>
            <remarks>
            <para>
            The message for the specified error number is lookup up using the 
            native Win32 <c>FormatMessage</c> function.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NativeError.GetErrorMessage(System.Int32)">
            <summary>
            Retrieves the message corresponding with a Win32 message identifier.
            </summary>
            <param name="messageId">Message identifier for the requested message.</param>
            <returns>
            The message corresponding with the specified message identifier.
            </returns>
            <remarks>
            <para>
            The message will be searched for in system message-table resource(s)
            using the native <c>FormatMessage</c> function.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NativeError.ToString">
            <summary>
            Return error information string
            </summary>
            <returns>error information string</returns>
            <remarks>
            <para>
            Return error information string
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NativeError.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr)">
            <summary>
            Formats a message string.
            </summary>
            <param name="dwFlags">Formatting options, and how to interpret the <paramref name="lpSource" /> parameter.</param>
            <param name="lpSource">Location of the message definition.</param>
            <param name="dwMessageId">Message identifier for the requested message.</param>
            <param name="dwLanguageId">Language identifier for the requested message.</param>
            <param name="lpBuffer">If <paramref name="dwFlags" /> includes FORMAT_MESSAGE_ALLOCATE_BUFFER, the function allocates a buffer using the <c>LocalAlloc</c> function, and places the pointer to the buffer at the address specified in <paramref name="lpBuffer" />.</param>
            <param name="nSize">If the FORMAT_MESSAGE_ALLOCATE_BUFFER flag is not set, this parameter specifies the maximum number of TCHARs that can be stored in the output buffer. If FORMAT_MESSAGE_ALLOCATE_BUFFER is set, this parameter specifies the minimum number of TCHARs to allocate for an output buffer.</param>
            <param name="Arguments">Pointer to an array of values that are used as insert values in the formatted message.</param>
            <remarks>
            <para>
            The function requires a message definition as input. The message definition can come from a 
            buffer passed into the function. It can come from a message table resource in an 
            already-loaded module. Or the caller can ask the function to search the system's message 
            table resource(s) for the message definition. The function finds the message definition 
            in a message table resource based on a message identifier and a language identifier. 
            The function copies the formatted message text to an output buffer, processing any embedded 
            insert sequences if requested.
            </para>
            <para>
            To prevent the usage of unsafe code, this stub does not support inserting values in the formatted message.
            </para>
            </remarks>
            <returns>
            <para>
            If the function succeeds, the return value is the number of TCHARs stored in the output 
            buffer, excluding the terminating null character.
            </para>
            <para>
            If the function fails, the return value is zero. To get extended error information, 
            call <see cref="M:Marshal.GetLastWin32Error()" />.
            </para>
            </returns>
        </member>
        <member name="T:log4net.Util.NullDictionaryEnumerator">
            <summary>
            An always empty <see cref="T:System.Collections.IDictionaryEnumerator"/>.
            </summary>
            <remarks>
            <para>
            A singleton implementation of the <see cref="T:System.Collections.IDictionaryEnumerator"/> over a collection
            that is empty and not modifiable.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.NullDictionaryEnumerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" /> class. 
            </summary>
            <remarks>
            <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NullDictionaryEnumerator.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.
            </summary>
            <returns>The singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.</returns>
            <remarks>
            <para>
            Gets the singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NullDictionaryEnumerator.Current">
            <summary>
            Gets the current object from the enumerator.
            </summary>
            <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current value.
            </remarks>
            <remarks>
            <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current"/>
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Current"/>
            will throw an <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current"/> 
            cannot be positioned over a valid location.</exception>
        </member>
        <member name="M:log4net.Util.NullDictionaryEnumerator.MoveNext">
            <summary>
            Test if the enumerator can advance, if so advance.
            </summary>
            <returns><c>false</c> as the <see cref="T:log4net.Util.NullDictionaryEnumerator" /> cannot advance.</returns>
            <remarks>
            <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current"/>
            value cannot be moved over a valid position, therefore <see cref="M:log4net.Util.NullDictionaryEnumerator.MoveNext"/>
            will always return <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NullDictionaryEnumerator.Reset">
            <summary>
            Resets the enumerator back to the start.
            </summary>
            <remarks>
            <para>
            As the enumerator is over an empty collection <see cref="M:log4net.Util.NullDictionaryEnumerator.Reset"/> does nothing.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NullDictionaryEnumerator.Key">
            <summary>
            Gets the current key from the enumerator.
            </summary>
            <remarks>
            Throws an exception because the <see cref="T:log4net.Util.NullDictionaryEnumerator" />
            never has a current value.
            </remarks>
            <remarks>
            <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current"/>
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Key"/>
            will throw an <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current"/> 
            cannot be positioned over a valid location.</exception>
        </member>
        <member name="P:log4net.Util.NullDictionaryEnumerator.Value">
            <summary>
            Gets the current value from the enumerator.
            </summary>
            <value>The current value from the enumerator.</value>
            <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current value.
            </remarks>
            <remarks>
            <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current"/>
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Value"/>
            will throw an <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current"/> 
            cannot be positioned over a valid location.</exception>
        </member>
        <member name="P:log4net.Util.NullDictionaryEnumerator.Entry">
            <summary>
            Gets the current entry from the enumerator.
            </summary>
            <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current entry.
            </remarks>
            <remarks>
            <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current"/>
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Entry"/>
            will throw an <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current"/> 
            cannot be positioned over a valid location.</exception>
        </member>
        <member name="F:log4net.Util.NullDictionaryEnumerator.s_instance">
            <summary>
            The singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.
            </summary>
        </member>
        <member name="T:log4net.Util.NullEnumerator">
            <summary>
            An always empty <see cref="T:System.Collections.IEnumerator"/>.
            </summary>
            <remarks>
            <para>
            A singleton implementation of the <see cref="T:System.Collections.IEnumerator"/> over a collection
            that is empty and not modifiable.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.NullEnumerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.NullEnumerator" /> class. 
            </summary>
            <remarks>
            <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NullEnumerator.Instance">
            <summary>
            Get the singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.
            </summary>
            <returns>The singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.</returns>
            <remarks>
            <para>
            Gets the singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NullEnumerator.Current">
            <summary>
            Gets the current object from the enumerator.
            </summary>
            <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current value.
            </remarks>
            <remarks>
            <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullEnumerator.Current"/>
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullEnumerator.Current"/>
            will throw an <see cref="T:System.InvalidOperationException"/>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullEnumerator.Current"/> 
            cannot be positioned over a valid location.</exception>
        </member>
        <member name="M:log4net.Util.NullEnumerator.MoveNext">
            <summary>
            Test if the enumerator can advance, if so advance
            </summary>
            <returns><c>false</c> as the <see cref="T:log4net.Util.NullEnumerator" /> cannot advance.</returns>
            <remarks>
            <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullEnumerator.Current"/>
            value cannot be moved over a valid position, therefore <see cref="M:log4net.Util.NullEnumerator.MoveNext"/>
            will always return <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NullEnumerator.Reset">
            <summary>
            Resets the enumerator back to the start.
            </summary>
            <remarks>
            <para>
            As the enumerator is over an empty collection <see cref="M:log4net.Util.NullEnumerator.Reset"/> does nothing.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.NullEnumerator.s_instance">
            <summary>
            The singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.
            </summary>
        </member>
        <member name="T:log4net.Util.NullSecurityContext">
            <summary>
            A SecurityContext used when a SecurityContext is not required
            </summary>
            <remarks>
            <para>
            The <see cref="T:log4net.Util.NullSecurityContext"/> is a no-op implementation of the
            <see cref="T:log4net.Core.SecurityContext"/> base class. It is used where a <see cref="T:log4net.Core.SecurityContext"/>
            is required but one has not been provided.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.NullSecurityContext.Instance">
            <summary>
            Singleton instance of <see cref="T:log4net.Util.NullSecurityContext"/>
            </summary>
            <remarks>
            <para>
            Singleton instance of <see cref="T:log4net.Util.NullSecurityContext"/>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NullSecurityContext.#ctor">
            <summary>
            Private constructor
            </summary>
            <remarks>
            <para>
            Private constructor for singleton pattern.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NullSecurityContext.Impersonate(System.Object)">
            <summary>
            Impersonate this SecurityContext
            </summary>
            <param name="state">State supplied by the caller</param>
            <returns><c>null</c></returns>
            <remarks>
            <para>
            No impersonation is done and <c>null</c> is always returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.OnlyOnceErrorHandler">
            <summary>
            Implements log4net's default error handling policy which consists 
            of emitting a message for the first error in an appender and 
            ignoring all subsequent errors.
            </summary>
            <remarks>
            <para>
            The error message is processed using the LogLog sub-system by default.
            </para>
            <para>
            This policy aims at protecting an otherwise working application
            from being flooded with error messages when logging fails.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Ron Grabowski</author>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.#ctor">
            <summary>
            Default Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.OnlyOnceErrorHandler" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="prefix">The prefix to use for each message.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.OnlyOnceErrorHandler" /> class
            with the specified prefix.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.Reset">
            <summary>
            Reset the error handler back to its initial disabled state.
            </summary>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.Error(System.String,System.Exception,log4net.Core.ErrorCode)">
            <summary>
            Log an Error
            </summary>
            <param name="message">The error message.</param>
            <param name="e">The exception.</param>
            <param name="errorCode">The internal error code.</param>
            <remarks>
            <para>
            Invokes <see cref="M:log4net.Util.OnlyOnceErrorHandler.FirstError(System.String,System.Exception,log4net.Core.ErrorCode)"/> if and only if this is the first error or the first error after <see cref="M:log4net.Util.OnlyOnceErrorHandler.Reset"/> has been called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.FirstError(System.String,System.Exception,log4net.Core.ErrorCode)">
            <summary>
            Log the very first error
            </summary>
            <param name="message">The error message.</param>
            <param name="e">The exception.</param>
            <param name="errorCode">The internal error code.</param>
            <remarks>
            <para>
            Sends the error information to <see cref="T:log4net.Util.LogLog"/>'s Error method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.Error(System.String,System.Exception)">
            <summary>
            Log an Error
            </summary>
            <param name="message">The error message.</param>
            <param name="e">The exception.</param>
            <remarks>
            <para>
            Invokes <see cref="M:log4net.Util.OnlyOnceErrorHandler.FirstError(System.String,System.Exception,log4net.Core.ErrorCode)"/> if and only if this is the first error or the first error after <see cref="M:log4net.Util.OnlyOnceErrorHandler.Reset"/> has been called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.Error(System.String)">
            <summary>
            Log an error
            </summary>
            <param name="message">The error message.</param>
            <remarks>
            <para>
            Invokes <see cref="M:log4net.Util.OnlyOnceErrorHandler.FirstError(System.String,System.Exception,log4net.Core.ErrorCode)"/> if and only if this is the first error or the first error after <see cref="M:log4net.Util.OnlyOnceErrorHandler.Reset"/> has been called.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.OnlyOnceErrorHandler.IsEnabled">
            <summary>
            Is error logging enabled
            </summary>
            <remarks>
            <para>
            Is error logging enabled. Logging is only enabled for the
            first error delivered to the <see cref="T:log4net.Util.OnlyOnceErrorHandler"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.OnlyOnceErrorHandler.EnabledDate">
            <summary>
            The date the first error that trigged this error handler occurred, or <see cref="F:System.DateTime.MinValue"/> if it has not been triggered.
            </summary>
        </member>
        <member name="P:log4net.Util.OnlyOnceErrorHandler.EnabledDateUtc">
            <summary>
            The UTC date the first error that trigged this error handler occured, or <see cref="F:System.DateTime.MinValue"/> if it has not been triggered.
            </summary>
        </member>
        <member name="P:log4net.Util.OnlyOnceErrorHandler.ErrorMessage">
            <summary>
            The message from the first error that trigged this error handler.
            </summary>
        </member>
        <member name="P:log4net.Util.OnlyOnceErrorHandler.Exception">
            <summary>
            The exception from the first error that trigged this error handler.
            </summary>
            <remarks>
            May be <see langword="null" />.
            </remarks>
        </member>
        <member name="P:log4net.Util.OnlyOnceErrorHandler.ErrorCode">
            <summary>
            The error code from the first error that trigged this error handler.
            </summary>
            <remarks>
            Defaults to <see cref="F:log4net.Core.ErrorCode.GenericFailure"/>
            </remarks>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.m_enabledDateUtc">
            <summary>
            The UTC date the error was recorded.
            </summary>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.m_firstTime">
            <summary>
            Flag to indicate if it is the first error
            </summary>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.m_message">
            <summary>
            The message recorded during the first error.
            </summary>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.m_exception">
            <summary>
            The exception recorded during the first error.
            </summary>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.m_errorCode">
            <summary>
            The error code recorded during the first error.
            </summary>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.m_prefix">
            <summary>
            String to prefix each message with
            </summary>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.declaringType">
            <summary>
            The fully qualified type of the OnlyOnceErrorHandler class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.OptionConverter">
            <summary>
            A convenience class to convert property values to specific types.
            </summary>
            <remarks>
            <para>
            Utility functions for converting types and parsing values.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.OptionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.OptionConverter" /> class. 
            </summary>
            <remarks>
            <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.ToBoolean(System.String,System.Boolean)">
            <summary>
            Converts a string to a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="argValue">String to convert.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The <see cref="T:System.Boolean" /> value of <paramref name="argValue" />.</returns>
            <remarks>
            <para>
            If <paramref name="argValue"/> is "true", then <c>true</c> is returned. 
            If <paramref name="argValue"/> is "false", then <c>false</c> is returned. 
            Otherwise, <paramref name="defaultValue"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.ToFileSize(System.String,System.Int64)">
            <summary>
            Parses a file size into a number.
            </summary>
            <param name="argValue">String to parse.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The <see cref="T:System.Int64" /> value of <paramref name="argValue" />.</returns>
            <remarks>
            <para>
            Parses a file size of the form: number[KB|MB|GB] into a
            long value. It is scaled with the appropriate multiplier.
            </para>
            <para>
            <paramref name="defaultValue"/> is returned when <paramref name="argValue"/>
            cannot be converted to a <see cref="T:System.Int64" /> value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.ConvertStringTo(System.Type,System.String)">
            <summary>
            Converts a string to an object.
            </summary>
            <param name="target">The target type to convert to.</param>
            <param name="txt">The string to convert to an object.</param>
            <returns>
            The object converted from a string or <c>null</c> when the 
            conversion failed.
            </returns>
            <remarks>
            <para>
            Converts a string to an object. Uses the converter registry to try
            to convert the string value into the specified target type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.CanConvertTypeTo(System.Type,System.Type)">
            <summary>
            Checks if there is an appropriate type conversion from the source type to the target type.
            </summary>
            <param name="sourceType">The type to convert from.</param>
            <param name="targetType">The type to convert to.</param>
            <returns><c>true</c> if there is a conversion from the source type to the target type.</returns>
            <remarks>
            Checks if there is an appropriate type conversion from the source type to the target type.
            <para>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.ConvertTypeTo(System.Object,System.Type)">
            <summary>
            Converts an object to the target type.
            </summary>
            <param name="sourceInstance">The object to convert to the target type.</param>
            <param name="targetType">The type to convert to.</param>
            <returns>The converted object.</returns>
            <remarks>
            <para>
            Converts an object to the target type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.InstantiateByClassName(System.String,System.Type,System.Object)">
            <summary>
            Instantiates an object given a class name.
            </summary>
            <param name="className">The fully qualified class name of the object to instantiate.</param>
            <param name="superClass">The class to which the new object should belong.</param>
            <param name="defaultValue">The object to return in case of non-fulfillment.</param>
            <returns>
            An instance of the <paramref name="className"/> or <paramref name="defaultValue"/>
            if the object could not be instantiated.
            </returns>
            <remarks>
            <para>
            Checks that the <paramref name="className"/> is a subclass of
            <paramref name="superClass"/>. If that test fails or the object could
            not be instantiated, then <paramref name="defaultValue"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.SubstituteVariables(System.String,System.Collections.IDictionary)">
            <summary>
            Performs variable substitution in string <paramref name="value"/> from the 
            values of keys found in <paramref name="props"/>.
            </summary>
            <param name="value">The string on which variable substitution is performed.</param>
            <param name="props">The dictionary to use to lookup variables.</param>
            <returns>The result of the substitutions.</returns>
            <remarks>
            <para>
            The variable substitution delimiters are <b>${</b> and <b>}</b>.
            </para>
            <para>
            For example, if props contains <c>key=value</c>, then the call
            </para>
            <para>
            <code lang="C#">
            string s = OptionConverter.SubstituteVariables("Value of key is ${key}.");
            </code>
            </para>
            <para>
            will set the variable <c>s</c> to "Value of key is value.".
            </para>
            <para>
            If no value could be found for the specified key, then substitution 
            defaults to an empty string.
            </para>
            <para>
            For example, if system properties contains no value for the key
            "nonExistentKey", then the call
            </para>
            <para>
            <code lang="C#">
            string s = OptionConverter.SubstituteVariables("Value of nonExistentKey is [${nonExistentKey}]");
            </code>
            </para>
            <para>
            will set <s>s</s> to "Value of nonExistentKey is []".	 
            </para>
            <para>
            An Exception is thrown if <paramref name="value"/> contains a start 
            delimiter "${" which is not balanced by a stop delimiter "}". 
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.ParseEnum(System.Type,System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or 
            more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="enumType">The type to convert to.</param>
            <param name="value">The enum string value.</param>
            <param name="ignoreCase">If <c>true</c>, ignore case; otherwise, regard case.</param>
            <returns>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</returns>
        </member>
        <member name="F:log4net.Util.OptionConverter.declaringType">
            <summary>
            The fully qualified type of the OptionConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternConverter">
            <summary>
            Abstract class that provides the formatting functionality that 
            derived classes need.
            </summary>
            <remarks>
            <para>
            Conversion specifiers in a conversion patterns are parsed to
            individual PatternConverters. Each of which is responsible for
            converting a logging event in a converter specific manner.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.PatternConverter.#ctor">
            <summary>
            Protected constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PatternConverter" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PatternConverter.Next">
            <summary>
            Get the next pattern converter in the chain
            </summary>
            <value>
            the next pattern converter in the chain
            </value>
            <remarks>
            <para>
            Get the next pattern converter in the chain
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PatternConverter.FormattingInfo">
            <summary>
            Gets or sets the formatting info for this converter
            </summary>
            <value>
            The formatting info for this converter
            </value>
            <remarks>
            <para>
            Gets or sets the formatting info for this converter
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PatternConverter.Option">
            <summary>
            Gets or sets the option value for this converter
            </summary>
            <summary>
            The option for this converter
            </summary>
            <remarks>
            <para>
            Gets or sets the option value for this converter
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Evaluate this pattern converter and write the output to a writer.
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">The state object on which the pattern converter should be executed.</param>
            <remarks>
            <para>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the appropriate way.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternConverter.SetNext(log4net.Util.PatternConverter)">
            <summary>
            Set the next pattern converter in the chains
            </summary>
            <param name="patternConverter">the pattern converter that should follow this converter in the chain</param>
            <returns>the next converter</returns>
            <remarks>
            <para>
            The PatternConverter can merge with its neighbor during this method (or a sub class).
            Therefore the return value may or may not be the value of the argument passed in.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternConverter.Format(System.IO.TextWriter,System.Object)">
            <summary>
            Write the pattern converter to the writer with appropriate formatting
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">The state object on which the pattern converter should be executed.</param>
            <remarks>
            <para>
            This method calls <see cref="M:log4net.Util.PatternConverter.Convert(System.IO.TextWriter,System.Object)"/> to allow the subclass to perform
            appropriate conversion of the pattern converter. If formatting options have
            been specified via the <see cref="P:log4net.Util.PatternConverter.FormattingInfo"/> then this method will
            apply those formattings before writing the output.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternConverter.SpacePad(System.IO.TextWriter,System.Int32)">
            <summary>
            Fast space padding method.
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> to which the spaces will be appended.</param>
            <param name="length">The number of spaces to be padded.</param>
            <remarks>
            <para>
            Fast space padding method.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternConverter.m_option">
            <summary>
            The option string to the converter
            </summary>
        </member>
        <member name="F:log4net.Util.PatternConverter.c_renderBufferSize">
            <summary>
            Initial buffer size
            </summary>
        </member>
        <member name="F:log4net.Util.PatternConverter.c_renderBufferMaxCapacity">
            <summary>
            Maximum buffer size before it is recycled
            </summary>
        </member>
        <member name="M:log4net.Util.PatternConverter.WriteDictionary(System.IO.TextWriter,log4net.Repository.ILoggerRepository,System.Collections.IDictionary)">
            <summary>
            Write an dictionary to a <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="repository">a <see cref="T:log4net.Repository.ILoggerRepository"/> to use for object conversion</param>
            <param name="value">the value to write to the writer</param>
            <remarks>
            <para>
            Writes the <see cref="T:System.Collections.IDictionary"/> to a writer in the form:
            </para>
            <code>
            {key1=value1, key2=value2, key3=value3}
            </code>
            <para>
            If the <see cref="T:log4net.Repository.ILoggerRepository"/> specified
            is not null then it is used to render the key and value to text, otherwise
            the object's ToString method is called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternConverter.WriteDictionary(System.IO.TextWriter,log4net.Repository.ILoggerRepository,System.Collections.IDictionaryEnumerator)">
            <summary>
            Write an dictionary to a <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="repository">a <see cref="T:log4net.Repository.ILoggerRepository"/> to use for object conversion</param>
            <param name="value">the value to write to the writer</param>
            <remarks>
            <para>
            Writes the <see cref="T:System.Collections.IDictionaryEnumerator"/> to a writer in the form:
            </para>
            <code>
            {key1=value1, key2=value2, key3=value3}
            </code>
            <para>
            If the <see cref="T:log4net.Repository.ILoggerRepository"/> specified
            is not null then it is used to render the key and value to text, otherwise
            the object's ToString method is called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternConverter.WriteObject(System.IO.TextWriter,log4net.Repository.ILoggerRepository,System.Object)">
            <summary>
            Write an object to a <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="repository">a <see cref="T:log4net.Repository.ILoggerRepository"/> to use for object conversion</param>
            <param name="value">the value to write to the writer</param>
            <remarks>
            <para>
            Writes the Object to a writer. If the <see cref="T:log4net.Repository.ILoggerRepository"/> specified
            is not null then it is used to render the object to text, otherwise
            the object's ToString method is called.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PatternConverter.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="T:log4net.Util.PatternParser">
            <summary>
            Most of the work of the <see cref="T:log4net.Layout.PatternLayout"/> class
            is delegated to the PatternParser class.
            </summary>
            <remarks>
            <para>
            The <c>PatternParser</c> processes a pattern string and
            returns a chain of <see cref="T:log4net.Util.PatternConverter"/> objects.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.PatternParser.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="pattern">The pattern to parse.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PatternParser" /> class 
            with the specified pattern string.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternParser.Parse">
            <summary>
            Parses the pattern into a chain of pattern converters.
            </summary>
            <returns>The head of a chain of pattern converters.</returns>
            <remarks>
            <para>
            Parses the pattern into a chain of pattern converters.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PatternParser.PatternConverters">
            <summary>
            Get the converter registry used by this parser
            </summary>
            <value>
            The converter registry used by this parser
            </value>
            <remarks>
            <para>
            Get the converter registry used by this parser
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternParser.BuildCache">
            <summary>
            Build the unified cache of converters from the static and instance maps
            </summary>
            <returns>the list of all the converter names</returns>
            <remarks>
            <para>
            Build the unified cache of converters from the static and instance maps
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternParser.StringLengthComparer">
            <summary>
            Sort strings by length
            </summary>
            <remarks>
            <para>
            <see cref="T:System.Collections.IComparer" /> that orders strings by string length.
            The longest strings are placed first
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternParser.ParseInternal(System.String,System.String[])">
            <summary>
            Internal method to parse the specified pattern to find specified matches
            </summary>
            <param name="pattern">the pattern to parse</param>
            <param name="matches">the converter names to match in the pattern</param>
            <remarks>
            <para>
            The matches param must be sorted such that longer strings come before shorter ones.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternParser.ProcessLiteral(System.String)">
            <summary>
            Process a parsed literal
            </summary>
            <param name="text">the literal text</param>
        </member>
        <member name="M:log4net.Util.PatternParser.ProcessConverter(System.String,System.String,log4net.Util.FormattingInfo)">
            <summary>
            Process a parsed converter pattern
            </summary>
            <param name="converterName">the name of the converter</param>
            <param name="option">the optional option for the converter</param>
            <param name="formattingInfo">the formatting info for the converter</param>
        </member>
        <member name="M:log4net.Util.PatternParser.AddConverter(log4net.Util.PatternConverter)">
            <summary>
            Resets the internal state of the parser and adds the specified pattern converter 
            to the chain.
            </summary>
            <param name="pc">The pattern converter to add.</param>
        </member>
        <member name="F:log4net.Util.PatternParser.m_head">
            <summary>
            The first pattern converter in the chain
            </summary>
        </member>
        <member name="F:log4net.Util.PatternParser.m_tail">
            <summary>
             the last pattern converter in the chain
            </summary>
        </member>
        <member name="F:log4net.Util.PatternParser.m_pattern">
            <summary>
            The pattern
            </summary>
        </member>
        <member name="F:log4net.Util.PatternParser.m_patternConverters">
            <summary>
            Internal map of converter identifiers to converter types
            </summary>
            <remarks>
            <para>
            This map overrides the static s_globalRulesRegistry map.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternParser.declaringType">
            <summary>
            The fully qualified type of the PatternParser class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternString">
            <summary>
            This class implements a patterned string.
            </summary>
            <remarks>
            <para>
            This string has embedded patterns that are resolved and expanded
            when the string is formatted.
            </para>
            <para>
            This class functions similarly to the <see cref="T:log4net.Layout.PatternLayout"/>
            in that it accepts a pattern and renders it to a string. Unlike the 
            <see cref="T:log4net.Layout.PatternLayout"/> however the <c>PatternString</c>
            does not render the properties of a specific <see cref="T:log4net.Core.LoggingEvent"/> but
            of the process in general.
            </para>
            <para>
            The recognized conversion pattern names are:
            </para>
            <list type="table">
                <listheader>
                    <term>Conversion Pattern Name</term>
                    <description>Effect</description>
                </listheader>
                <item>
                    <term>appdomain</term>
                    <description>
                        <para>
                        Used to output the friendly name of the current AppDomain.
                        </para>
                    </description>
                </item>
                <item>
                    <term>appsetting</term>
                    <description>
                        <para>
                        Used to output the value of a specific appSetting key in the application
                        configuration file.
                        </para>
                    </description>
                </item>
                <item>
                    <term>date</term>
                    <description>
            			<para>
            			Used to output the current date and time in the local time zone. 
            			To output the date in universal time use the <c>%utcdate</c> pattern.
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%date{HH:mm:ss,fff}</b> or
            			<b>%date{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter"/>).
            			</para>
            			<para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:DateTime.ToString(string)"/>.
            			</para>
            			<para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter"/>, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter"/> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter"/>. For example, 
            			<b>%date{ISO8601}</b> or <b>%date{ABSOLUTE}</b>.
            			</para>
            			<para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:DateTime.ToString(string)"/>.
            			</para>
                    </description>
                </item>
                <item>
                    <term>env</term>
                    <description>
                        <para>
            			Used to output the a specific environment variable. The key to 
            			lookup must be specified within braces and directly following the
            			pattern specifier, e.g. <b>%env{COMPUTERNAME}</b> would include the value
            			of the <c>COMPUTERNAME</c> environment variable.
                        </para>
                        <para>
                        The <c>env</c> pattern is not supported on the .NET Compact Framework.
                        </para>
                    </description>
                </item>
                <item>
                    <term>identity</term>
                    <description>
            			<para>
            			Used to output the user name for the currently active user
            			(Principal.Identity.Name).
            			</para>
                    </description>
                </item>
                <item>
                    <term>newline</term>
                    <description>
            			<para>
            			Outputs the platform dependent line separator character or
            			characters.
            			</para>
            			<para>
            			This conversion pattern name offers the same performance as using 
            			non-portable line separator strings such as	"\n", or "\r\n". 
            			Thus, it is the preferred way of specifying a line separator.
            			</para> 
                    </description>
                </item>
                <item>
                    <term>processid</term>
                    <description>
                        <para>
            			Used to output the system process ID for the current process.
                        </para>
                    </description>
                </item>
                <item>
                    <term>property</term>
                    <description>
            			<para>
            			Used to output a specific context property. The key to 
            			lookup must be specified within braces and directly following the
            			pattern specifier, e.g. <b>%property{user}</b> would include the value
            			from the property that is keyed by the string 'user'. Each property value
            			that is to be included in the log must be specified separately.
            			Properties are stored in logging contexts. By default 
            			the <c>log4net:HostName</c> property is set to the name of machine on 
            			which the event was originally logged.
            			</para>
            			<para>
            			If no key is specified, e.g. <b>%property</b> then all the keys and their
            			values are printed in a comma separated list.
            			</para>
            			<para>
            			The properties of an event are combined from a number of different
            			contexts. These are listed below in the order in which they are searched.
            			</para>
            			<list type="definition">
            				<item>
            					<term>the thread properties</term>
            					<description>
            					The <see cref="P:log4net.ThreadContext.Properties"/> that are set on the current
            					thread. These properties are shared by all events logged on this thread.
            					</description>
            				</item>
            				<item>
            					<term>the global properties</term>
            					<description>
            					The <see cref="P:log4net.GlobalContext.Properties"/> that are set globally. These 
            					properties are shared by all the threads in the AppDomain.
            					</description>
            				</item>
            			</list>
                    </description>
                </item>
                <item>
                    <term>random</term>
                    <description>
                        <para>
                        Used to output a random string of characters. The string is made up of
                        uppercase letters and numbers. By default the string is 4 characters long.
                        The length of the string can be specified within braces directly following the
            			pattern specifier, e.g. <b>%random{8}</b> would output an 8 character string.
                        </para>
                    </description>
                </item>
                <item>
                    <term>username</term>
                    <description>
            			<para>
            			Used to output the WindowsIdentity for the currently
            			active user.
            			</para>
                    </description>
                </item>
                <item>
                    <term>utcdate</term>
                    <description>
            			<para>
            			Used to output the date of the logging event in universal time. 
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%utcdate{HH:mm:ss,fff}</b> or
            			<b>%utcdate{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter"/>).
            			</para>
            			<para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:DateTime.ToString(string)"/>.
            			</para>
            			<para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter"/>, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter"/> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter"/>. For example, 
            			<b>%utcdate{ISO8601}</b> or <b>%utcdate{ABSOLUTE}</b>.
            			</para>
            			<para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:DateTime.ToString(string)"/>.
            			</para>
                    </description>
                </item>
            	<item>
            		<term>%</term>
            		<description>
            			<para>
            			The sequence %% outputs a single percent sign.
            			</para>
            		</description>
            	</item>
            </list>
            <para>
            Additional pattern converters may be registered with a specific <see cref="T:log4net.Util.PatternString"/>
            instance using <see cref="M:AddConverter(ConverterInfo)"/> or
            <see cref="M:AddConverter(string, Type)" />.
            </para>
            <para>
            See the <see cref="T:log4net.Layout.PatternLayout"/> for details on the 
            <i>format modifiers</i> supported by the patterns.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.PatternString.s_globalRulesRegistry">
            <summary>
            Internal map of converter identifiers to converter types.
            </summary>
        </member>
        <member name="F:log4net.Util.PatternString.m_pattern">
            <summary>
            the pattern
            </summary>
        </member>
        <member name="F:log4net.Util.PatternString.m_head">
            <summary>
            the head of the pattern converter chain
            </summary>
        </member>
        <member name="F:log4net.Util.PatternString.m_instanceRulesRegistry">
            <summary>
            patterns defined on this PatternString only
            </summary>
        </member>
        <member name="M:log4net.Util.PatternString.#cctor">
            <summary>
            Initialize the global registry
            </summary>
        </member>
        <member name="M:log4net.Util.PatternString.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Initialize a new instance of <see cref="T:log4net.Util.PatternString"/>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.#ctor(System.String)">
            <summary>
            Constructs a PatternString
            </summary>
            <param name="pattern">The pattern to use with this PatternString</param>
            <remarks>
            <para>
            Initialize a new instance of <see cref="T:log4net.Util.PatternString"/> with the pattern specified.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PatternString.ConversionPattern">
            <summary>
            Gets or sets the pattern formatting string
            </summary>
            <value>
            The pattern formatting string
            </value>
            <remarks>
            <para>
            The <b>ConversionPattern</b> option. This is the string which
            controls formatting and consists of a mix of literal content and
            conversion specifiers.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.ActivateOptions">
            <summary>
            Initialize object options
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternString.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternString.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternString.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.CreatePatternParser(System.String)">
            <summary>
            Create the <see cref="T:log4net.Util.PatternParser"/> used to parse the pattern
            </summary>
            <param name="pattern">the pattern to parse</param>
            <returns>The <see cref="T:log4net.Util.PatternParser"/></returns>
            <remarks>
            <para>
            Returns PatternParser used to parse the conversion string. Subclasses
            may override this to return a subclass of PatternParser which recognize
            custom conversion pattern name.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.Format(System.IO.TextWriter)">
            <summary>
            Produces a formatted string as specified by the conversion pattern.
            </summary>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <remarks>
            <para>
            Format the pattern to the <paramref name="writer"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.Format">
            <summary>
            Format the pattern as a string
            </summary>
            <returns>the pattern formatted as a string</returns>
            <remarks>
            <para>
            Format the pattern to a string.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.AddConverter(log4net.Util.ConverterInfo)">
            <summary>
            Add a converter to this PatternString
            </summary>
            <param name="converterInfo">the converter info</param>
            <remarks>
            <para>
            This version of the method is used by the configurator.
            Programmatic users should use the alternative <see cref="M:AddConverter(string,Type)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.AddConverter(System.String,System.Type)">
            <summary>
            Add a converter to this PatternString
            </summary>
            <param name="name">the name of the conversion pattern for this converter</param>
            <param name="type">the type of the converter</param>
            <remarks>
            <para>
            Add a converter to this PatternString
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.AppDomainPatternConverter">
            <summary>
            Write the name of the current AppDomain to the output
            </summary>
            <remarks>
            <para>
            Write the name of the current AppDomain to the output writer
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.AppDomainPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the name of the current AppDomain to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
            <para>
            Writes name of the current AppDomain to the output <paramref name="writer"/>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.AppSettingPatternConverter">
            <summary>
            AppSetting pattern converter
            </summary>
            <remarks>
            <para>
            This pattern converter reads appSettings from the application configuration file.
            </para>
            <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option"/> is specified then that will be used to
            lookup a single appSettings value. If no <see cref="P:log4net.Util.PatternConverter.Option"/> is specified
            then all appSettings will be dumped as a list of key value pairs.
            </para>
            <para>
            A typical use is to specify a base directory for log files, e.g.
            <example>
            <![CDATA[
            <log4net>
               <appender name="MyAppender" type="log4net.Appender.RollingFileAppender">
                 <file type="log4net.Util.PatternString" value="appsetting{LogDirectory}MyApp.log"/>
                  ...
              </appender>
            </log4net>
            ]]>
            </example>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.AppSettingPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the property value to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">null, state is not set</param>
            <remarks>
            <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option"/>
            property.
            </para>
            <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option"/> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.DatePatternConverter">
            <summary>
            Write the current date to the output
            </summary>
            <remarks>
            <para>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter"/> to format 
            the current date and time to the writer as a string.
            </para>
            <para>
            The value of the <see cref="P:log4net.Util.PatternConverter.Option"/> determines 
            the formatting of the date. The following values are allowed:
            <list type="definition">
            	<listheader>
            		<term>Option value</term>
            		<description>Output</description>
            	</listheader>
            	<item>
            		<term>ISO8601</term>
            		<description>
            		Uses the <see cref="T:log4net.DateFormatter.Iso8601DateFormatter"/> formatter. 
            		Formats using the <c>"yyyy-MM-dd HH:mm:ss,fff"</c> pattern.
            		</description>
            	</item>
            	<item>
            		<term>DATE</term>
            		<description>
            		Uses the <see cref="T:log4net.DateFormatter.DateTimeDateFormatter"/> formatter. 
            		Formats using the <c>"dd MMM yyyy HH:mm:ss,fff"</c> for example, <c>"06 Nov 1994 15:49:37,459"</c>.
            		</description>
            	</item>
            	<item>
            		<term>ABSOLUTE</term>
            		<description>
            		Uses the <see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter"/> formatter. 
            		Formats using the <c>"HH:mm:ss,fff"</c> for example, <c>"15:49:37,459"</c>.
            		</description>
            	</item>
            	<item>
            		<term>other</term>
            		<description>
            		Any other pattern string uses the <see cref="T:log4net.DateFormatter.SimpleDateFormatter"/> formatter. 
            		This formatter passes the pattern string to the <see cref="T:System.DateTime"/> 
            		<see cref="M:DateTime.ToString(string)"/> method.
            		For details on valid patterns see 
            		<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemglobalizationdatetimeformatinfoclasstopic.asp">DateTimeFormatInfo Class</a>.
            		</description>
            	</item>
            </list>
            </para>
            <para>
            The date and time is in the local time zone and is rendered in that zone.
            To output the time in Universal time see <see cref="T:log4net.Util.PatternStringConverters.UtcDatePatternConverter"/>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.DatePatternConverter.m_dateFormatter">
            <summary>
            The <see cref="T:log4net.DateFormatter.IDateFormatter"/> used to render the date to a string
            </summary>
            <remarks>
            <para>
            The <see cref="T:log4net.DateFormatter.IDateFormatter"/> used to render the date to a string
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions">
            <summary>
            Initialize the converter options
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.DatePatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the current date to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">null, state is not set</param>
            <remarks>
            <para>
            Pass the current date and time to the <see cref="T:log4net.DateFormatter.IDateFormatter"/>
            for it to render it to the writer.
            </para>
            <para>
            The date and time passed is in the local time zone.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.DatePatternConverter.declaringType">
            <summary>
            The fully qualified type of the DatePatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.EnvironmentFolderPathPatternConverter">
            <summary>
            Write an <see cref="T:System.Environment.SpecialFolder" /> folder path to the output
            </summary>
            <remarks>
            <para>
            Write an special path environment folder path to the output writer.
            The value of the <see cref="P:log4net.Util.PatternConverter.Option"/> determines 
            the name of the variable to output. <see cref="P:log4net.Util.PatternConverter.Option"/>
            should be a value in the <see cref="T:System.Environment.SpecialFolder" /> enumeration.
            </para>
            </remarks>
            <author>Ron Grabowski</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.EnvironmentFolderPathPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write an special path environment folder path to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
            <para>
            Writes the special path environment folder path to the output <paramref name="writer"/>.
            The name of the special path environment folder path to output must be set
            using the <see cref="P:log4net.Util.PatternConverter.Option"/>
            property.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.EnvironmentFolderPathPatternConverter.declaringType">
            <summary>
            The fully qualified type of the EnvironmentFolderPathPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.EnvironmentPatternConverter">
            <summary>
            Write an environment variable to the output
            </summary>
            <remarks>
            <para>
            Write an environment variable to the output writer.
            The value of the <see cref="P:log4net.Util.PatternConverter.Option"/> determines 
            the name of the variable to output.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.EnvironmentPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write an environment variable to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
            <para>
            Writes the environment variable to the output <paramref name="writer"/>.
            The name of the environment variable to output must be set
            using the <see cref="P:log4net.Util.PatternConverter.Option"/>
            property.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.EnvironmentPatternConverter.declaringType">
            <summary>
            The fully qualified type of the EnvironmentPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.IdentityPatternConverter">
            <summary>
            Write the current thread identity to the output
            </summary>
            <remarks>
            <para>
            Write the current thread identity to the output writer
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.IdentityPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the current thread identity to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
            <para>
            Writes the current thread identity to the output <paramref name="writer"/>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.IdentityPatternConverter.declaringType">
            <summary>
            The fully qualified type of the IdentityPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.LiteralPatternConverter">
            <summary>
            Pattern converter for literal string instances in the pattern
            </summary>
            <remarks>
            <para>
            Writes the literal string value specified in the 
            <see cref="P:log4net.Util.PatternConverter.Option"/> property to 
            the output.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.LiteralPatternConverter.SetNext(log4net.Util.PatternConverter)">
            <summary>
            Set the next converter in the chain
            </summary>
            <param name="pc">The next pattern converter in the chain</param>
            <returns>The next pattern converter</returns>
            <remarks>
            <para>
            Special case the building of the pattern converter chain
            for <see cref="T:log4net.Util.PatternStringConverters.LiteralPatternConverter"/> instances. Two adjacent
            literals in the pattern can be represented by a single combined
            pattern converter. This implementation detects when a 
            <see cref="T:log4net.Util.PatternStringConverters.LiteralPatternConverter"/> is added to the chain
            after this converter and combines its value with this converter's
            literal value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.LiteralPatternConverter.Format(System.IO.TextWriter,System.Object)">
            <summary>
            Write the literal to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, not set</param>
            <remarks>
            <para>
            Override the formatting behavior to ignore the FormattingInfo
            because we have a literal instead.
            </para>
            <para>
            Writes the value of <see cref="P:log4net.Util.PatternConverter.Option"/>
            to the output <paramref name="writer"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.LiteralPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Convert this pattern into the rendered message
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">null, not set</param>
            <remarks>
            <para>
            This method is not used.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.NewLinePatternConverter">
            <summary>
            Writes a newline to the output
            </summary>
            <remarks>
            <para>
            Writes the system dependent line terminator to the output.
            This behavior can be overridden by setting the <see cref="P:log4net.Util.PatternConverter.Option"/>:
            </para>
            <list type="definition">
              <listheader>
                <term>Option Value</term>
                <description>Output</description>
              </listheader>
              <item>
                <term>DOS</term>
                <description>DOS or Windows line terminator <c>"\r\n"</c></description>
              </item>
              <item>
                <term>UNIX</term>
                <description>UNIX line terminator <c>"\n"</c></description>
              </item>
            </list>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions">
            <summary>
            Initialize the converter
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.ProcessIdPatternConverter">
            <summary>
            Write the current process ID to the output
            </summary>
            <remarks>
            <para>
            Write the current process ID to the output writer
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.ProcessIdPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the current process ID to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
            <para>
            Write the current process ID to the output <paramref name="writer"/>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.ProcessIdPatternConverter.declaringType">
            <summary>
            The fully qualified type of the ProcessIdPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.PropertyPatternConverter">
            <summary>
            Property pattern converter
            </summary>
            <remarks>
            <para>
            This pattern converter reads the thread and global properties.
            The thread properties take priority over global properties.
            See <see cref="P:log4net.ThreadContext.Properties"/> for details of the 
            thread properties. See <see cref="P:log4net.GlobalContext.Properties"/> for
            details of the global properties.
            </para>
            <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option"/> is specified then that will be used to
            lookup a single property. If no <see cref="P:log4net.Util.PatternConverter.Option"/> is specified
            then all properties will be dumped as a list of key value pairs.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.PropertyPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the property value to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">null, state is not set</param>
            <remarks>
            <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option"/>
            property.
            </para>
            <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option"/> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.RandomStringPatternConverter">
            <summary>
            A Pattern converter that generates a string of random characters
            </summary>
            <remarks>
            <para>
            The converter generates a string of random characters. By default
            the string is length 4. This can be changed by setting the <see cref="P:log4net.Util.PatternConverter.Option"/>
            to the string value of the length required.
            </para>
            <para>
            The random characters in the string are limited to uppercase letters
            and numbers only.
            </para>
            <para>
            The random number generator used by this class is not cryptographically secure.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.RandomStringPatternConverter.s_random">
            <summary>
            Shared random number generator
            </summary>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.RandomStringPatternConverter.m_length">
            <summary>
            Length of random string to generate. Default length 4.
            </summary>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions">
            <summary>
            Initialize the converter options
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write a randoim string to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
            <para>
            Write a randoim string to the output <paramref name="writer"/>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.RandomStringPatternConverter.declaringType">
            <summary>
            The fully qualified type of the RandomStringPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.UserNamePatternConverter">
            <summary>
            Write the current threads username to the output
            </summary>
            <remarks>
            <para>
            Write the current threads username to the output writer
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.UserNamePatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the current threads username to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
            <para>
            Write the current threads username to the output <paramref name="writer"/>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.UserNamePatternConverter.declaringType">
            <summary>
            The fully qualified type of the UserNamePatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.UtcDatePatternConverter">
            <summary>
            Write the UTC date time to the output
            </summary>
            <remarks>
            <para>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter"/> to format 
            the current date and time in Universal time.
            </para>
            <para>
            See the <see cref="T:log4net.Util.PatternStringConverters.DatePatternConverter"/> for details on the date pattern syntax.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.PatternStringConverters.DatePatternConverter"/>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.UtcDatePatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the current date and time to the output
            </summary>
            <param name="writer"><see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">null, state is not set</param>
            <remarks>
            <para>
            Pass the current date and time to the <see cref="T:log4net.DateFormatter.IDateFormatter"/>
            for it to render it to the writer.
            </para>
            <para>
            The date is in Universal time when it is rendered.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.PatternStringConverters.DatePatternConverter"/>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.UtcDatePatternConverter.declaringType">
            <summary>
            The fully qualified type of the UtcDatePatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PropertiesDictionary">
            <summary>
            String keyed object map.
            </summary>
            <remarks>
            <para>
            While this collection is serializable only member 
            objects that are serializable will
            be serialized along with this collection.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PropertiesDictionary" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.#ctor(log4net.Util.ReadOnlyPropertiesDictionary)">
            <summary>
            Constructor
            </summary>
            <param name="propertiesDictionary">properties to copy</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PropertiesDictionary" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.PropertiesDictionary" /> class 
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <remarks>
            <para>
            Because this class is sealed the serialization constructor is private.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.Item(System.String)">
            <summary>
            Gets or sets the value of the  property with the specified key.
            </summary>
            <value>
            The value of the property with the specified key.
            </value>
            <param name="key">The key of the property to get or set.</param>
            <remarks>
            <para>
            The property value will only be serialized if it is serializable.
            If it cannot be serialized it will be silently ignored if
            a serialization operation is performed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.Remove(System.String)">
            <summary>
            Remove the entry with the specified key from this dictionary
            </summary>
            <param name="key">the key for the entry to remove</param>
            <remarks>
            <para>
            Remove the entry with the specified key from this dictionary
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IDictionary.GetEnumerator"/>
            </summary>
            <returns>an enumerator</returns>
            <remarks>
            <para>
            Returns a <see cref="T:System.Collections.IDictionaryEnumerator"/> over the contest of this collection.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Remove(System.Object)"/>
            </summary>
            <param name="key">the key to remove</param>
            <remarks>
            <para>
            Remove the entry with the specified key from this dictionary
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Contains(System.Object)"/>
            </summary>
            <param name="key">the key to lookup in the collection</param>
            <returns><c>true</c> if the collection contains the specified key</returns>
            <remarks>
            <para>
            Test if this collection contains a specified key.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.Clear">
            <summary>
            Remove all properties from the properties collection
            </summary>
            <remarks>
            <para>
            Remove all properties from the properties collection
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)"/>
            </summary>
            <param name="key">the key</param>
            <param name="value">the value to store for the key</param>
            <remarks>
            <para>
            Store a value for the specified <see cref="T:System.String"/> <paramref name="key"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="key"/> is not a string</exception>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.IDictionary.IsReadOnly"/>
            </summary>
            <value>
            <c>false</c>
            </value>
            <remarks>
            <para>
            This collection is modifiable. This property always
            returns <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Item(System.Object)"/>
            </summary>
            <value>
            The value for the key specified.
            </value>
            <remarks>
            <para>
            Get or set a value for the specified <see cref="T:System.String"/> <paramref name="key"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="key"/> is not a string</exception>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#Values">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Values"/>
            </summary>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#Keys">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Keys"/>
            </summary>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#IsFixedSize">
            <summary>
            See <see cref="P:System.Collections.IDictionary.IsFixedSize"/>
            </summary>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            See <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#ICollection#IsSynchronized">
            <summary>
            See <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            </summary>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#ICollection#SyncRoot">
            <summary>
            See <see cref="P:System.Collections.ICollection.SyncRoot"/>
            </summary>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="T:log4net.Util.PropertyEntry">
            <summary>
            A class to hold the key and data for a property set in the config file
            </summary>
            <remarks>
            <para>
            A class to hold the key and data for a property set in the config file
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PropertyEntry.Key">
            <summary>
            Property Key
            </summary>
            <value>
            Property Key
            </value>
            <remarks>
            <para>
            Property Key.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PropertyEntry.Value">
            <summary>
            Property Value
            </summary>
            <value>
            Property Value
            </value>
            <remarks>
            <para>
            Property Value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertyEntry.ToString">
            <summary>
            Override <c>Object.ToString</c> to return sensible debug info
            </summary>
            <returns>string info about this object</returns>
        </member>
        <member name="T:log4net.Util.ProtectCloseTextWriter">
            <summary>
            A <see cref="T:System.IO.TextWriter"/> that ignores the <see cref="M:log4net.Util.ProtectCloseTextWriter.Close"/> message
            </summary>
            <remarks>
            <para>
            This writer is used in special cases where it is necessary 
            to protect a writer from being closed by a client.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.ProtectCloseTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Constructor
            </summary>
            <param name="writer">the writer to actually write to</param>
            <remarks>
            <para>
            Create a new ProtectCloseTextWriter using a writer
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ProtectCloseTextWriter.Attach(System.IO.TextWriter)">
            <summary>
            Attach this instance to a different underlying <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="writer">the writer to attach to</param>
            <remarks>
            <para>
            Attach this instance to a different underlying <see cref="T:System.IO.TextWriter"/>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ProtectCloseTextWriter.Close">
            <summary>
            Does not close the underlying output writer.
            </summary>
            <remarks>
            <para>
            Does not close the underlying output writer.
            This method does nothing.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.QuietTextWriter">
            <summary>
            <see cref="T:System.IO.TextWriter"/> that does not leak exceptions
            </summary>
            <remarks>
            <para>
            <see cref="T:log4net.Util.QuietTextWriter"/> does not throw exceptions when things go wrong. 
            Instead, it delegates error handling to its <see cref="T:log4net.Core.IErrorHandler"/>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.QuietTextWriter.#ctor(System.IO.TextWriter,log4net.Core.IErrorHandler)">
            <summary>
            Constructor
            </summary>
            <param name="writer">the writer to actually write to</param>
            <param name="errorHandler">the error handler to report error to</param>
            <remarks>
            <para>
            Create a new QuietTextWriter using a writer and error handler
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.QuietTextWriter.ErrorHandler">
            <summary>
            Gets or sets the error handler that all errors are passed to.
            </summary>
            <value>
            The error handler that all errors are passed to.
            </value>
            <remarks>
            <para>
            Gets or sets the error handler that all errors are passed to.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.QuietTextWriter.Closed">
            <summary>
            Gets a value indicating whether this writer is closed.
            </summary>
            <value>
            <c>true</c> if this writer is closed, otherwise <c>false</c>.
            </value>
            <remarks>
            <para>
            Gets a value indicating whether this writer is closed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.QuietTextWriter.Write(System.Char)">
            <summary>
            Writes a character to the underlying writer
            </summary>
            <param name="value">the char to write</param>
            <remarks>
            <para>
            Writes a character to the underlying writer
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.QuietTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a buffer to the underlying writer
            </summary>
            <param name="buffer">the buffer to write</param>
            <param name="index">the start index to write from</param>
            <param name="count">the number of characters to write</param>
            <remarks>
            <para>
            Writes a buffer to the underlying writer
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.QuietTextWriter.Write(System.String)">
            <summary>
            Writes a string to the output.
            </summary>
            <param name="value">The string data to write to the output.</param>
            <remarks>
            <para>
            Writes a string to the output.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.QuietTextWriter.Close">
            <summary>
            Closes the underlying output writer.
            </summary>
            <remarks>
            <para>
            Closes the underlying output writer.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.QuietTextWriter.m_errorHandler">
            <summary>
            The error handler instance to pass all errors to
            </summary>
        </member>
        <member name="F:log4net.Util.QuietTextWriter.m_closed">
            <summary>
            Flag to indicate if this writer is closed
            </summary>
        </member>
        <member name="T:log4net.Util.ReaderWriterLock">
            <summary>
            Defines a lock that supports single writers and multiple readers
            </summary>
            <remarks>
            <para>
            <c>ReaderWriterLock</c> is used to synchronize access to a resource. 
            At any given time, it allows either concurrent read access for 
            multiple threads, or write access for a single thread. In a 
            situation where a resource is changed infrequently, a 
            <c>ReaderWriterLock</c> provides better throughput than a simple 
            one-at-a-time lock, such as <see cref="T:System.Threading.Monitor"/>.
            </para>
            <para>
            If a platform does not support a <c>System.Threading.ReaderWriterLock</c> 
            implementation then all readers and writers are serialized. Therefore 
            the caller must not rely on multiple simultaneous readers.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.ReaderWriterLock.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReaderWriterLock" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReaderWriterLock.AcquireReaderLock">
            <summary>
            Acquires a reader lock
            </summary>
            <remarks>
            <para>
            <see cref="M:log4net.Util.ReaderWriterLock.AcquireReaderLock"/> blocks if a different thread has the writer 
            lock, or if at least one thread is waiting for the writer lock.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReaderWriterLock.ReleaseReaderLock">
            <summary>
            Decrements the lock count
            </summary>
            <remarks>
            <para>
            <see cref="M:log4net.Util.ReaderWriterLock.ReleaseReaderLock"/> decrements the lock count. When the count 
            reaches zero, the lock is released.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReaderWriterLock.AcquireWriterLock">
            <summary>
            Acquires the writer lock
            </summary>
            <remarks>
            <para>
            This method blocks if another thread has a reader lock or writer lock.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReaderWriterLock.ReleaseWriterLock">
            <summary>
            Decrements the lock count on the writer lock
            </summary>
            <remarks>
            <para>
            ReleaseWriterLock decrements the writer lock count. 
            When the count reaches zero, the writer lock is released.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ReadOnlyPropertiesDictionary">
            <summary>
            String keyed object map that is read only.
            </summary>
            <remarks>
            <para>
            This collection is readonly and cannot be modified.
            </para>
            <para>
            While this collection is serializable only member 
            objects that are serializable will
            be serialized along with this collection.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Util.ReadOnlyPropertiesDictionary.m_hashtable">
            <summary>
            The Hashtable used to store the properties data
            </summary>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReadOnlyPropertiesDictionary" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.#ctor(log4net.Util.ReadOnlyPropertiesDictionary)">
            <summary>
            Copy Constructor
            </summary>
            <param name="propertiesDictionary">properties to copy</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReadOnlyPropertiesDictionary" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReadOnlyPropertiesDictionary" /> class 
            with serialized data.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.GetKeys">
            <summary>
            Gets the key names.
            </summary>
            <returns>An array of all the keys.</returns>
            <remarks>
            <para>
            Gets the key names.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.Item(System.String)">
            <summary>
            Gets or sets the value of the  property with the specified key.
            </summary>
            <value>
            The value of the property with the specified key.
            </value>
            <param name="key">The key of the property to get or set.</param>
            <remarks>
            <para>
            The property value will only be serialized if it is serializable.
            If it cannot be serialized it will be silently ignored if
            a serialization operation is performed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.Contains(System.String)">
            <summary>
            Test if the dictionary contains a specified key
            </summary>
            <param name="key">the key to look for</param>
            <returns>true if the dictionary contains the specified key</returns>
            <remarks>
            <para>
            Test if the dictionary contains a specified key
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.InnerHashtable">
            <summary>
            The hashtable used to store the properties
            </summary>
            <value>
            The internal collection used to store the properties
            </value>
            <remarks>
            <para>
            The hashtable used to store the properties
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> provided.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
            <remarks>
            <para>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> provided.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IDictionary.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Remove(System.Object)"/>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Contains(System.Object)"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.Clear">
            <summary>
            Remove all properties from the properties collection
            </summary>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.IDictionary.IsReadOnly"/>
            </summary>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Item(System.Object)"/>
            </summary>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Values">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Values"/>
            </summary>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Keys">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Keys"/>
            </summary>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#IsFixedSize">
            <summary>
            See <see cref="P:System.Collections.IDictionary.IsFixedSize"/>
            </summary>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            See <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#ICollection#IsSynchronized">
            <summary>
            See <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            </summary>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.Count">
            <summary>
            The number of properties in this collection
            </summary>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#ICollection#SyncRoot">
            <summary>
            See <see cref="P:System.Collections.ICollection.SyncRoot"/>
            </summary>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="T:log4net.Util.ReusableStringWriter">
            <summary>
            A <see cref="T:System.IO.StringWriter"/> that can be <see cref="M:log4net.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)"/> and reused
            </summary>
            <remarks>
            <para>
            A <see cref="T:System.IO.StringWriter"/> that can be <see cref="M:log4net.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)"/> and reused.
            This uses a single buffer for string operations.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.ReusableStringWriter.#ctor(System.IFormatProvider)">
            <summary>
            Create an instance of <see cref="T:log4net.Util.ReusableStringWriter"/>
            </summary>
            <param name="formatProvider">the format provider to use</param>
            <remarks>
            <para>
            Create an instance of <see cref="T:log4net.Util.ReusableStringWriter"/>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReusableStringWriter.Dispose(System.Boolean)">
            <summary>
            Override Dispose to prevent closing of writer
            </summary>
            <param name="disposing">flag</param>
            <remarks>
            <para>
            Override Dispose to prevent closing of writer
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)">
            <summary>
            Reset this string writer so that it can be reused.
            </summary>
            <param name="maxCapacity">the maximum buffer capacity before it is trimmed</param>
            <param name="defaultSize">the default size to make the buffer</param>
            <remarks>
            <para>
            Reset this string writer so that it can be reused.
            The internal buffers are cleared and reset.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.SystemInfo">
            <summary>
            Utility class for system specific information.
            </summary>
            <remarks>
            <para>
            Utility class of static methods for system specific information.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Alexey Solofnenko</author>
        </member>
        <member name="M:log4net.Util.SystemInfo.#ctor">
            <summary>
            Private constructor to prevent instances.
            </summary>
            <remarks>
            <para>
            Only static methods are exposed from this type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.#cctor">
            <summary>
            Initialize default values for private static fields.
            </summary>
            <remarks>
            <para>
            Only static methods are exposed from this type.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.NewLine">
            <summary>
            Gets the system dependent line terminator.
            </summary>
            <value>
            The system dependent line terminator.
            </value>
            <remarks>
            <para>
            Gets the system dependent line terminator.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.ApplicationBaseDirectory">
            <summary>
            Gets the base directory for this <see cref="T:System.AppDomain"/>.
            </summary>
            <value>The base directory path for the current <see cref="T:System.AppDomain"/>.</value>
            <remarks>
            <para>
            Gets the base directory for this <see cref="T:System.AppDomain"/>.
            </para>
            <para>
            The value returned may be either a local file path or a URI.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.ConfigurationFileLocation">
            <summary>
            Gets the path to the configuration file for the current <see cref="T:System.AppDomain"/>.
            </summary>
            <value>The path to the configuration file for the current <see cref="T:System.AppDomain"/>.</value>
            <remarks>
            <para>
            The .NET Compact Framework 1.0 does not have a concept of a configuration
            file. For this runtime, we use the entry assembly location as the root for
            the configuration file name.
            </para>
            <para>
            The value returned may be either a local file path or a URI.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.EntryAssemblyLocation">
            <summary>
            Gets the path to the file that first executed in the current <see cref="T:System.AppDomain"/>.
            </summary>
            <value>The path to the entry assembly.</value>
            <remarks>
            <para>
            Gets the path to the file that first executed in the current <see cref="T:System.AppDomain"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.CurrentThreadId">
            <summary>
            Gets the ID of the current thread.
            </summary>
            <value>The ID of the current thread.</value>
            <remarks>
            <para>
            On the .NET framework, the <c>AppDomain.GetCurrentThreadId</c> method
            is used to obtain the thread ID for the current thread. This is the 
            operating system ID for the thread.
            </para>
            <para>
            On the .NET Compact Framework 1.0 it is not possible to get the 
            operating system thread ID for the current thread. The native method 
            <c>GetCurrentThreadId</c> is implemented inline in a header file
            and cannot be called.
            </para>
            <para>
            On the .NET Framework 2.0 the <c>Thread.ManagedThreadId</c> is used as this
            gives a stable id unrelated to the operating system thread ID which may 
            change if the runtime is using fibers.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.HostName">
            <summary>
            Get the host name or machine name for the current machine
            </summary>
            <value>
            The hostname or machine name
            </value>
            <remarks>
            <para>
            Get the host name or machine name for the current machine
            </para>
            <para>
            The host name (<see cref="M:System.Net.Dns.GetHostName"/>) or
            the machine name (<c>Environment.MachineName</c>) for
            the current machine, or if neither of these are available
            then <c>NOT AVAILABLE</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.ApplicationFriendlyName">
            <summary>
            Get this application's friendly name
            </summary>
            <value>
            The friendly name of this application as a string
            </value>
            <remarks>
            <para>
            If available the name of the application is retrieved from
            the <c>AppDomain</c> using <c>AppDomain.CurrentDomain.FriendlyName</c>.
            </para>
            <para>
            Otherwise the file name of the entry assembly is used.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.ProcessStartTime">
            <summary>
            Get the start time for the current process.
            </summary>
            <remarks>
            <para>
            This is the time at which the log4net library was loaded into the
            AppDomain. Due to reports of a hang in the call to <c>System.Diagnostics.Process.StartTime</c>
            this is not the start time for the current process.
            </para>
            <para>
            The log4net library should be loaded by an application early during its
            startup, therefore this start time should be a good approximation for
            the actual start time.
            </para>
            <para>
            Note that AppDomains may be loaded and unloaded within the
            same process without the process terminating, however this start time
            will be set per AppDomain.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.ProcessStartTimeUtc">
            <summary>
            Get the UTC start time for the current process.
            </summary>
            <remarks>
            <para>
            This is the UTC time at which the log4net library was loaded into the
            AppDomain. Due to reports of a hang in the call to <c>System.Diagnostics.Process.StartTime</c>
            this is not the start time for the current process.
            </para>
            <para>
            The log4net library should be loaded by an application early during its
            startup, therefore this start time should be a good approximation for
            the actual start time.
            </para>
            <para>
            Note that AppDomains may be loaded and unloaded within the
            same process without the process terminating, however this start time
            will be set per AppDomain.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.NullText">
            <summary>
            Text to output when a <c>null</c> is encountered.
            </summary>
            <remarks>
            <para>
            Use this value to indicate a <c>null</c> has been encountered while
            outputting a string representation of an item.
            </para>
            <para>
            The default value is <c>(null)</c>. This value can be overridden by specifying
            a value for the <c>log4net.NullText</c> appSetting in the application's
            .config file.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.NotAvailableText">
            <summary>
            Text to output when an unsupported feature is requested.
            </summary>
            <remarks>
            <para>
            Use this value when an unsupported feature is requested.
            </para>
            <para>
            The default value is <c>NOT AVAILABLE</c>. This value can be overridden by specifying
            a value for the <c>log4net.NotAvailableText</c> appSetting in the application's
            .config file.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.AssemblyLocationInfo(System.Reflection.Assembly)">
            <summary>
            Gets the assembly location path for the specified assembly.
            </summary>
            <param name="myAssembly">The assembly to get the location for.</param>
            <returns>The location of the assembly.</returns>
            <remarks>
            <para>
            This method does not guarantee to return the correct path
            to the assembly. If only tries to give an indication as to
            where the assembly was loaded from.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.AssemblyQualifiedName(System.Type)">
            <summary>
            Gets the fully qualified name of the <see cref="T:System.Type" />, including 
            the name of the assembly from which the <see cref="T:System.Type" /> was 
            loaded.
            </summary>
            <param name="type">The <see cref="T:System.Type" /> to get the fully qualified name for.</param>
            <returns>The fully qualified name for the <see cref="T:System.Type" />.</returns>
            <remarks>
            <para>
            This is equivalent to the <c>Type.AssemblyQualifiedName</c> property,
            but this method works on the .NET Compact Framework 1.0 as well as
            the full .NET runtime.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.AssemblyShortName(System.Reflection.Assembly)">
            <summary>
            Gets the short name of the <see cref="T:System.Reflection.Assembly" />.
            </summary>
            <param name="myAssembly">The <see cref="T:System.Reflection.Assembly" /> to get the name for.</param>
            <returns>The short name of the <see cref="T:System.Reflection.Assembly" />.</returns>
            <remarks>
            <para>
            The short name of the assembly is the <see cref="P:System.Reflection.Assembly.FullName" /> 
            without the version, culture, or public key. i.e. it is just the 
            assembly's file name without the extension.
            </para>
            <para>
            Use this rather than <c>Assembly.GetName().Name</c> because that
            is not available on the Compact Framework.
            </para>
            <para>
            Because of a FileIOPermission security demand we cannot do
            the obvious Assembly.GetName().Name. We are allowed to get
            the <see cref="P:System.Reflection.Assembly.FullName" /> of the assembly so we 
            start from there and strip out just the assembly name.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.AssemblyFileName(System.Reflection.Assembly)">
            <summary>
            Gets the file name portion of the <see cref="T:System.Reflection.Assembly" />, including the extension.
            </summary>
            <param name="myAssembly">The <see cref="T:System.Reflection.Assembly" /> to get the file name for.</param>
            <returns>The file name of the assembly.</returns>
            <remarks>
            <para>
            Gets the file name portion of the <see cref="T:System.Reflection.Assembly" />, including the extension.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.GetTypeFromString(System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads the type specified in the type string.
            </summary>
            <param name="relativeType">A sibling type to use to load the type.</param>
            <param name="typeName">The name of the type to load.</param>
            <param name="throwOnError">Flag set to <c>true</c> to throw an exception if the type cannot be loaded.</param>
            <param name="ignoreCase"><c>true</c> to ignore the case of the type name; otherwise, <c>false</c></param>
            <returns>The type loaded or <c>null</c> if it could not be loaded.</returns>
            <remarks>
            <para>
            If the type name is fully qualified, i.e. if contains an assembly name in 
            the type name, the type will be loaded from the system using 
            <see cref="M:Type.GetType(string,bool)"/>.
            </para>
            <para>
            If the type name is not fully qualified, it will be loaded from the assembly
            containing the specified relative type. If the type is not found in the assembly 
            then all the loaded assemblies will be searched for the type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.GetTypeFromString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads the type specified in the type string.
            </summary>
            <param name="typeName">The name of the type to load.</param>
            <param name="throwOnError">Flag set to <c>true</c> to throw an exception if the type cannot be loaded.</param>
            <param name="ignoreCase"><c>true</c> to ignore the case of the type name; otherwise, <c>false</c></param>
            <returns>The type loaded or <c>null</c> if it could not be loaded.</returns>		
            <remarks>
            <para>
            If the type name is fully qualified, i.e. if contains an assembly name in 
            the type name, the type will be loaded from the system using 
            <see cref="M:Type.GetType(string,bool)"/>.
            </para>
            <para>
            If the type name is not fully qualified it will be loaded from the
            assembly that is directly calling this method. If the type is not found 
            in the assembly then all the loaded assemblies will be searched for the type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.GetTypeFromString(System.Reflection.Assembly,System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads the type specified in the type string.
            </summary>
            <param name="relativeAssembly">An assembly to load the type from.</param>
            <param name="typeName">The name of the type to load.</param>
            <param name="throwOnError">Flag set to <c>true</c> to throw an exception if the type cannot be loaded.</param>
            <param name="ignoreCase"><c>true</c> to ignore the case of the type name; otherwise, <c>false</c></param>
            <returns>The type loaded or <c>null</c> if it could not be loaded.</returns>
            <remarks>
            <para>
            If the type name is fully qualified, i.e. if contains an assembly name in 
            the type name, the type will be loaded from the system using 
            <see cref="M:Type.GetType(string,bool)"/>.
            </para>
            <para>
            If the type name is not fully qualified it will be loaded from the specified
            assembly. If the type is not found in the assembly then all the loaded assemblies 
            will be searched for the type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.NewGuid">
            <summary>
            Generate a new guid
            </summary>
            <returns>A new Guid</returns>
            <remarks>
            <para>
            Generate a new guid
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            Create an <see cref="T:System.ArgumentOutOfRangeException"/>
            </summary>
            <param name="parameterName">The name of the parameter that caused the exception</param>
            <param name="actualValue">The value of the argument that causes this exception</param>
            <param name="message">The message that describes the error</param>
            <returns>the ArgumentOutOfRangeException object</returns>
            <remarks>
            <para>
            Create a new instance of the <see cref="T:System.ArgumentOutOfRangeException"/> class 
            with a specified error message, the parameter name, and the value 
            of the argument.
            </para>
            <para>
            The Compact Framework does not support the 3 parameter constructor for the
            <see cref="T:System.ArgumentOutOfRangeException"/> type. This method provides an
            implementation that works for all platforms.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.TryParse(System.String,System.Int32@)">
            <summary>
            Parse a string into an <see cref="T:System.Int32"/> value
            </summary>
            <param name="s">the string to parse</param>
            <param name="val">out param where the parsed value is placed</param>
            <returns><c>true</c> if the string was able to be parsed into an integer</returns>
            <remarks>
            <para>
            Attempts to parse the string into an integer. If the string cannot
            be parsed then this method returns <c>false</c>. The method does not throw an exception.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.TryParse(System.String,System.Int64@)">
            <summary>
            Parse a string into an <see cref="T:System.Int64"/> value
            </summary>
            <param name="s">the string to parse</param>
            <param name="val">out param where the parsed value is placed</param>
            <returns><c>true</c> if the string was able to be parsed into an integer</returns>
            <remarks>
            <para>
            Attempts to parse the string into an integer. If the string cannot
            be parsed then this method returns <c>false</c>. The method does not throw an exception.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.TryParse(System.String,System.Int16@)">
            <summary>
            Parse a string into an <see cref="T:System.Int16"/> value
            </summary>
            <param name="s">the string to parse</param>
            <param name="val">out param where the parsed value is placed</param>
            <returns><c>true</c> if the string was able to be parsed into an integer</returns>
            <remarks>
            <para>
            Attempts to parse the string into an integer. If the string cannot
            be parsed then this method returns <c>false</c>. The method does not throw an exception.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.GetAppSetting(System.String)">
            <summary>
            Lookup an application setting
            </summary>
            <param name="key">the application settings key to lookup</param>
            <returns>the value for the key, or <c>null</c></returns>
            <remarks>
            <para>
            Configuration APIs are not supported under the Compact Framework
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.ConvertToFullPath(System.String)">
            <summary>
            Convert a path into a fully qualified local file path.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>The fully qualified path.</returns>
            <remarks>
            <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
            <para>
            The path specified must be a local file path, a URI is not supported.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.CreateCaseInsensitiveHashtable">
            <summary>
            Creates a new case-insensitive instance of the <see cref="T:System.Collections.Hashtable"/> class with the default initial capacity. 
            </summary>
            <returns>A new case-insensitive instance of the <see cref="T:System.Collections.Hashtable"/> class with the default initial capacity</returns>
            <remarks>
            <para>
            The new Hashtable instance uses the default load factor, the CaseInsensitiveHashCodeProvider, and the CaseInsensitiveComparer.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.EqualsIgnoringCase(System.String,System.String)">
            <summary>
            Tests two strings for equality, the ignoring case.
            </summary>
            <remarks>
            If the platform permits, culture information is ignored completely (ordinal comparison).
            The aim of this method is to provide a fast comparison that deals with <c>null</c> and ignores different casing.
            It is not supposed to deal with various, culture-specific habits.
            Use it to compare against pure ASCII constants, like keywords etc.
            </remarks>
            <param name="a">The one string.</param>
            <param name="b">The other string.</param>
            <returns><c>true</c> if the strings are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:log4net.Util.SystemInfo.EmptyTypes">
            <summary>
            Gets an empty array of types.
            </summary>
            <remarks>
            <para>
            The <c>Type.EmptyTypes</c> field is not available on
            the .NET Compact Framework 1.0.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.SystemInfo.declaringType">
            <summary>
            The fully qualified type of the SystemInfo class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Util.SystemInfo.s_hostName">
            <summary>
            Cache the host name for the current machine
            </summary>
        </member>
        <member name="F:log4net.Util.SystemInfo.s_appFriendlyName">
            <summary>
            Cache the application friendly name
            </summary>
        </member>
        <member name="F:log4net.Util.SystemInfo.s_nullText">
            <summary>
            Text to output when a <c>null</c> is encountered.
            </summary>
        </member>
        <member name="F:log4net.Util.SystemInfo.s_notAvailableText">
            <summary>
            Text to output when an unsupported feature is requested.
            </summary>
        </member>
        <member name="F:log4net.Util.SystemInfo.s_processStartTimeUtc">
            <summary>
            Start time for the current process.
            </summary>
        </member>
        <member name="T:log4net.Util.SystemStringFormat">
            <summary>
            Utility class that represents a format string.
            </summary>
            <remarks>
            <para>
            Utility class that represents a format string.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.SystemStringFormat.#ctor(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Initialise the <see cref="T:log4net.Util.SystemStringFormat"/>
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items.</param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
        </member>
        <member name="M:log4net.Util.SystemStringFormat.ToString">
            <summary>
            Format the string and arguments
            </summary>
            <returns>the formatted string</returns>
        </member>
        <member name="M:log4net.Util.SystemStringFormat.StringFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified <see cref="T:System.String"/> with the text equivalent 
            of the value of a corresponding <see cref="T:System.Object"/> instance in a specified array.
            A specified parameter supplies culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items.</param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
            <returns>
            A copy of format in which the format items have been replaced by the <see cref="T:System.String"/> 
            equivalent of the corresponding instances of <see cref="T:System.Object"/> in args.
            </returns>
            <remarks>
            <para>
            This method does not throw exceptions. If an exception thrown while formatting the result the
            exception and arguments are returned in the result string.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemStringFormat.StringFormatError(System.Exception,System.String,System.Object[])">
            <summary>
            Process an error during StringFormat
            </summary>
        </member>
        <member name="M:log4net.Util.SystemStringFormat.RenderArray(System.Array,System.Text.StringBuilder)">
            <summary>
            Dump the contents of an array into a string builder
            </summary>
        </member>
        <member name="M:log4net.Util.SystemStringFormat.RenderObject(System.Object,System.Text.StringBuilder)">
            <summary>
            Dump an object to a string
            </summary>
        </member>
        <member name="F:log4net.Util.SystemStringFormat.declaringType">
            <summary>
            The fully qualified type of the SystemStringFormat class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.TextWriterAdapter">
            <summary>
            Adapter that extends <see cref="T:System.IO.TextWriter"/> and forwards all
            messages to an instance of <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <remarks>
            <para>
            Adapter that extends <see cref="T:System.IO.TextWriter"/> and forwards all
            messages to an instance of <see cref="T:System.IO.TextWriter"/>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.TextWriterAdapter.m_writer">
            <summary>
            The writer to forward messages to
            </summary>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.#ctor(System.IO.TextWriter)">
            <summary>
            Create an instance of <see cref="T:log4net.Util.TextWriterAdapter"/> that forwards all
            messages to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to forward to</param>
            <remarks>
            <para>
            Create an instance of <see cref="T:log4net.Util.TextWriterAdapter"/> that forwards all
            messages to a <see cref="T:System.IO.TextWriter"/>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.TextWriterAdapter.Writer">
            <summary>
            Gets or sets the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
            <value>
            The underlying <see cref="T:System.IO.TextWriter" />.
            </value>
            <remarks>
            <para>
            Gets or sets the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.TextWriterAdapter.Encoding">
            <summary>
            The Encoding in which the output is written
            </summary>
            <value>
            The <see cref="P:log4net.Util.TextWriterAdapter.Encoding"/>
            </value>
            <remarks>
            <para>
            The Encoding in which the output is written
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.TextWriterAdapter.FormatProvider">
            <summary>
            Gets an object that controls formatting
            </summary>
            <value>
            The format provider
            </value>
            <remarks>
            <para>
            Gets an object that controls formatting
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.TextWriterAdapter.NewLine">
            <summary>
            Gets or sets the line terminator string used by the TextWriter
            </summary>
            <value>
            The line terminator to use
            </value>
            <remarks>
            <para>
            Gets or sets the line terminator string used by the TextWriter
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.Close">
            <summary>
            Closes the writer and releases any system resources associated with the writer
            </summary>
            <remarks>
            <para>
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.Dispose(System.Boolean)">
            <summary>
            Dispose this writer
            </summary>
            <param name="disposing">flag indicating if we are being disposed</param>
            <remarks>
            <para>
            Dispose this writer
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.Flush">
            <summary>
            Flushes any buffered output
            </summary>
            <remarks>
            <para>
            Clears all buffers for the writer and causes any buffered data to be written 
            to the underlying device
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.Write(System.Char)">
            <summary>
            Writes a character to the wrapped TextWriter
            </summary>
            <param name="value">the value to write to the TextWriter</param>
            <remarks>
            <para>
            Writes a character to the wrapped TextWriter
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a character buffer to the wrapped TextWriter
            </summary>
            <param name="buffer">the data buffer</param>
            <param name="index">the start index</param>
            <param name="count">the number of characters to write</param>
            <remarks>
            <para>
            Writes a character buffer to the wrapped TextWriter
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.Write(System.String)">
            <summary>
            Writes a string to the wrapped TextWriter
            </summary>
            <param name="value">the value to write to the TextWriter</param>
            <remarks>
            <para>
            Writes a string to the wrapped TextWriter
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ThreadContextProperties">
            <summary>
            Implementation of Properties collection for the <see cref="T:log4net.ThreadContext"/>
            </summary>
            <remarks>
            <para>
            Class implements a collection of properties that is specific to each thread.
            The class is not synchronized as each thread has its own <see cref="T:log4net.Util.PropertiesDictionary"/>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.ThreadContextProperties._dictionary">
            <summary>
            Each thread will automatically have its instance.
            </summary>
        </member>
        <member name="M:log4net.Util.ThreadContextProperties.#ctor">
            <summary>
            Internal constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextProperties" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ThreadContextProperties.Item(System.String)">
            <summary>
            Gets or sets the value of a property
            </summary>
            <value>
            The value for the property with the specified key
            </value>
            <remarks>
            <para>
            Gets or sets the value of a property
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextProperties.Remove(System.String)">
            <summary>
            Remove a property
            </summary>
            <param name="key">the key for the entry to remove</param>
            <remarks>
            <para>
            Remove a property
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextProperties.GetKeys">
            <summary>
            Get the keys stored in the properties.
            </summary>
            <para>
            Gets the keys stored in the properties.
            </para>
            <returns>a set of the defined keys</returns>
        </member>
        <member name="M:log4net.Util.ThreadContextProperties.Clear">
            <summary>
            Clear all properties
            </summary>
            <remarks>
            <para>
            Clear all properties
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextProperties.GetProperties(System.Boolean)">
            <summary>
            Get the <c>PropertiesDictionary</c> for this thread.
            </summary>
            <param name="create">create the dictionary if it does not exist, otherwise return null if does not exist</param>
            <returns>the properties for this thread</returns>
            <remarks>
            <para>
            The collection returned is only to be used on the calling thread. If the
            caller needs to share the collection between different threads then the 
            caller must clone the collection before doing so.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ThreadContextStack">
            <summary>
            Implementation of Stack for the <see cref="T:log4net.ThreadContext"/>
            </summary>
            <remarks>
            <para>
            Implementation of Stack for the <see cref="T:log4net.ThreadContext"/>
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.ThreadContextStack.m_stack">
            <summary>
            The stack store.
            </summary>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.#ctor">
            <summary>
            Internal constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStack" /> class. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ThreadContextStack.Count">
            <summary>
            The number of messages in the stack
            </summary>
            <value>
            The current number of messages in the stack
            </value>
            <remarks>
            <para>
            The current number of messages in the stack. That is
            the number of times <see cref="M:log4net.Util.ThreadContextStack.Push(System.String)"/> has been called
            minus the number of times <see cref="M:log4net.Util.ThreadContextStack.Pop"/> has been called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.Clear">
            <summary>
            Clears all the contextual information held in this stack.
            </summary>
            <remarks>
            <para>
            Clears all the contextual information held in this stack.
            Only call this if you think that this tread is being reused after
            a previous call execution which may not have completed correctly.
            You do not need to use this method if you always guarantee to call
            the <see cref="M:System.IDisposable.Dispose"/> method of the <see cref="T:System.IDisposable"/>
            returned from <see cref="M:log4net.Util.ThreadContextStack.Push(System.String)"/> even in exceptional circumstances,
            for example by using the <c>using(log4net.ThreadContext.Stacks["NDC"].Push("Stack_Message"))</c> 
            syntax.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.Pop">
            <summary>
            Removes the top context from this stack.
            </summary>
            <returns>The message in the context that was removed from the top of this stack.</returns>
            <remarks>
            <para>
            Remove the top context from this stack, and return
            it to the caller. If this stack is empty then an
            empty string (not <see langword="null"/>) is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.Push(System.String)">
            <summary>
            Pushes a new context message into this stack.
            </summary>
            <param name="message">The new context message.</param>
            <returns>
            An <see cref="T:System.IDisposable"/> that can be used to clean up the context stack.
            </returns>
            <remarks>
            <para>
            Pushes a new context onto this stack. An <see cref="T:System.IDisposable"/>
            is returned that can be used to clean up this stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            context.
            </para>
            </remarks>
            <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code lang="C#">
            using(log4net.ThreadContext.Stacks["NDC"].Push("Stack_Message"))
            {
            	log.Warn("This should have an ThreadContext Stack message");
            }
            </code>
            </example>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.GetFullMessage">
            <summary>
            Gets the current context information for this stack.
            </summary>
            <returns>The current context information.</returns>
        </member>
        <member name="P:log4net.Util.ThreadContextStack.InternalStack">
            <summary>
            Gets and sets the internal stack used by this <see cref="T:log4net.Util.ThreadContextStack"/>
            </summary>
            <value>The internal storage stack</value>
            <remarks>
            <para>
            This property is provided only to support backward compatability 
            of the <see cref="T:log4net.NDC"/>. Tytpically the internal stack should not
            be modified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.ToString">
            <summary>
            Gets the current context information for this stack.
            </summary>
            <returns>Gets the current context information</returns>
            <remarks>
            <para>
            Gets the current context information for this stack.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.log4net#Core#IFixingRequired#GetFixedObject">
            <summary>
            Get a portable version of this object
            </summary>
            <returns>the portable instance of this object</returns>
            <remarks>
            <para>
            Get a cross thread portable version of this object
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ThreadContextStack.StackFrame">
            <summary>
            Inner class used to represent a single context frame in the stack.
            </summary>
            <remarks>
            <para>
            Inner class used to represent a single context frame in the stack.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.StackFrame.#ctor(System.String,log4net.Util.ThreadContextStack.StackFrame)">
            <summary>
            Constructor
            </summary>
            <param name="message">The message for this context.</param>
            <param name="parent">The parent context in the chain.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStack.StackFrame" /> class
            with the specified message and parent context.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ThreadContextStack.StackFrame.Message">
            <summary>
            Get the message.
            </summary>
            <value>The message.</value>
            <remarks>
            <para>
            Get the message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ThreadContextStack.StackFrame.FullMessage">
            <summary>
            Gets the full text of the context down to the root level.
            </summary>
            <value>
            The full text of the context down to the root level.
            </value>
            <remarks>
            <para>
            Gets the full text of the context down to the root level.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ThreadContextStack.AutoPopStackFrame">
            <summary>
            Struct returned from the <see cref="M:log4net.Util.ThreadContextStack.Push(System.String)"/> method.
            </summary>
            <remarks>
            <para>
            This struct implements the <see cref="T:System.IDisposable"/> and is designed to be used
            with the <see langword="using"/> pattern to remove the stack frame at the end of the scope.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.ThreadContextStack.AutoPopStackFrame.m_frameStack">
            <summary>
            The ThreadContextStack internal stack
            </summary>
        </member>
        <member name="F:log4net.Util.ThreadContextStack.AutoPopStackFrame.m_frameDepth">
            <summary>
            The depth to trim the stack to when this instance is disposed
            </summary>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.AutoPopStackFrame.#ctor(System.Collections.Stack,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="frameStack">The internal stack used by the ThreadContextStack.</param>
            <param name="frameDepth">The depth to return the stack to when this object is disposed.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStack.AutoPopStackFrame" /> class with
            the specified stack and return depth.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.AutoPopStackFrame.Dispose">
            <summary>
            Returns the stack to the correct depth.
            </summary>
            <remarks>
            <para>
            Returns the stack to the correct depth.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ThreadContextStacks">
            <summary>
            Implementation of Stacks collection for the <see cref="T:log4net.ThreadContext"/>
            </summary>
            <remarks>
            <para>
            Implementation of Stacks collection for the <see cref="T:log4net.ThreadContext"/>
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.ThreadContextStacks.#ctor(log4net.Util.ContextPropertiesBase)">
            <summary>
            Internal constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStacks" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ThreadContextStacks.Item(System.String)">
            <summary>
            Gets the named thread context stack
            </summary>
            <value>
            The named stack
            </value>
            <remarks>
            <para>
            Gets the named thread context stack
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.ThreadContextStacks.declaringType">
            <summary>
            The fully qualified type of the ThreadContextStacks class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.Transform">
            <summary>
            Utility class for transforming strings.
            </summary>
            <remarks>
            <para>
            Utility class for transforming strings.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.Transform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.Transform" /> class. 
            </summary>
            <remarks>
            <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.Transform.WriteEscapedXmlString(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Write a string to an <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="textData">the string to write</param>
            <param name="invalidCharReplacement">The string to replace non XML compliant chars with</param>
            <remarks>
            <para>
            The test is escaped either using XML escape entities
            or using CDATA sections.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.Transform.MaskXmlInvalidCharacters(System.String,System.String)">
            <summary>
            Replace invalid XML characters in text string
            </summary>
            <param name="textData">the XML text input string</param>
            <param name="mask">the string to use in place of invalid characters</param>
            <returns>A string that does not contain invalid XML characters.</returns>
            <remarks>
            <para>
            Certain Unicode code points are not allowed in the XML InfoSet, for
            details see: <a href="http://www.w3.org/TR/REC-xml/#charsets">http://www.w3.org/TR/REC-xml/#charsets</a>.
            </para>
            <para>
            This method replaces any illegal characters in the input string
            with the mask string specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.Transform.CountSubstrings(System.String,System.String)">
            <summary>
            Count the number of times that the substring occurs in the text
            </summary>
            <param name="text">the text to search</param>
            <param name="substring">the substring to find</param>
            <returns>the number of times the substring occurs in the text</returns>
            <remarks>
            <para>
            The substring is assumed to be non repeating within itself.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.Transform.INVALIDCHARS">
            <summary>
            Characters illegal in XML 1.0
            </summary>
        </member>
        <member name="T:log4net.Util.TypeConverters.BooleanConverter">
            <summary>
            Type converter for Boolean.
            </summary>
            <remarks>
            <para>
            Supports conversion from string to <c>bool</c> type.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry"/>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom"/>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertTo"/>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.BooleanConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
            <para>
            Returns <c>true</c> if the <paramref name="sourceType"/> is
            the <see cref="T:System.String"/> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.BooleanConverter.ConvertFrom(System.Object)">
            <summary>
            Convert the source object to the type supported by this object
            </summary>
            <param name="source">the object to convert</param>
            <returns>the converted object</returns>
            <remarks>
            <para>
            Uses the <see cref="M:System.Boolean.Parse(System.String)"/> method to convert the
            <see cref="T:System.String"/> argument to a <see cref="T:System.Boolean"/>.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source"/> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.BooleanConverter.CanConvertFrom(System.Type)"/>
            method.
            </exception>
        </member>
        <member name="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            <summary>
            Exception base type for conversion errors.
            </summary>
            <remarks>
            <para>
            This type extends <see cref="T:System.ApplicationException"/>. It
            does not add any new functionality but does differentiate the
            type of exception being thrown.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class
            with the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class 
            with serialized data.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.Create(System.Type,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </summary>
            <param name="destinationType">The conversion destination type.</param>
            <param name="sourceValue">The value to convert.</param>
            <returns>An instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" />.</returns>
            <remarks>
            <para>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.Create(System.Type,System.Object,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </summary>
            <param name="destinationType">The conversion destination type.</param>
            <param name="sourceValue">The value to convert.</param>
            <param name="innerException">A nested exception to include.</param>
            <returns>An instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" />.</returns>
            <remarks>
            <para>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.TypeConverters.ConverterRegistry">
            <summary>
            Register of type converters for specific types.
            </summary>
            <remarks>
            <para>
            Maintains a registry of type converters used to convert between
            types.
            </para>
            <para>
            Use the <see cref="M:AddConverter(Type, object)"/> and 
            <see cref="M:AddConverter(Type, Type)"/> methods to register new converters.
            The <see cref="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertTo(System.Type,System.Type)"/> and <see cref="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertFrom(System.Type)"/> methods
            lookup appropriate converters to use.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom"/>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertTo"/>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.#ctor">
            <summary>
            Private constructor
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConverterRegistry" /> class.
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.#cctor">
            <summary>
            Static constructor.
            </summary>
            <remarks>
            <para>
            This constructor defines the intrinsic type converters.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.AddConverter(System.Type,System.Object)">
            <summary>
            Adds a converter for a specific type.
            </summary>
            <param name="destinationType">The type being converted to.</param>
            <param name="converter">The type converter to use to convert to the destination type.</param>
            <remarks>
            <para>
            Adds a converter instance for a specific type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.AddConverter(System.Type,System.Type)">
            <summary>
            Adds a converter for a specific type.
            </summary>
            <param name="destinationType">The type being converted to.</param>
            <param name="converterType">The type of the type converter to use to convert to the destination type.</param>
            <remarks>
            <para>
            Adds a converter <see cref="T:System.Type"/> for a specific type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertTo(System.Type,System.Type)">
            <summary>
            Gets the type converter to use to convert values to the destination type.
            </summary>
            <param name="sourceType">The type being converted from.</param>
            <param name="destinationType">The type being converted to.</param>
            <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
            <remarks>
            <para>
            Gets the type converter to use to convert values to the destination type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertFrom(System.Type)">
            <summary>
            Gets the type converter to use to convert values to the destination type.
            </summary>
            <param name="destinationType">The type being converted to.</param>
            <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
            <remarks>
            <para>
            Gets the type converter to use to convert values to the destination type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.GetConverterFromAttribute(System.Type)">
            <summary>
            Lookups the type converter to use as specified by the attributes on the 
            destination type.
            </summary>
            <param name="destinationType">The type being converted to.</param>
            <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.CreateConverterInstance(System.Type)">
            <summary>
            Creates the instance of the type converter.
            </summary>
            <param name="converterType">The type of the type converter.</param>
            <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
            <remarks>
            <para>
            The type specified for the type converter must implement 
            the <see cref="T:log4net.Util.TypeConverters.IConvertFrom"/> or <see cref="T:log4net.Util.TypeConverters.IConvertTo"/> interfaces 
            and must have a public default (no argument) constructor.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.TypeConverters.ConverterRegistry.declaringType">
            <summary>
            The fully qualified type of the ConverterRegistry class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Util.TypeConverters.ConverterRegistry.s_type2converter">
            <summary>
            Mapping from <see cref="T:System.Type" /> to type converter.
            </summary>
        </member>
        <member name="T:log4net.Util.TypeConverters.EncodingConverter">
            <summary>
            Supports conversion from string to <see cref="T:System.Text.Encoding"/> type.
            </summary>
            <remarks>
            <para>
            Supports conversion from string to <see cref="T:System.Text.Encoding"/> type.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry"/>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom"/>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertTo"/>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.EncodingConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
            <para>
            Returns <c>true</c> if the <paramref name="sourceType"/> is
            the <see cref="T:System.String"/> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.EncodingConverter.ConvertFrom(System.Object)">
            <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
            <param name="source">the object to convert to an encoding</param>
            <returns>the encoding</returns>
            <remarks>
            <para>
            Uses the <see cref="M:Encoding.GetEncoding(string)"/> method to 
            convert the <see cref="T:System.String"/> argument to an <see cref="T:System.Text.Encoding"/>.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source"/> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.EncodingConverter.CanConvertFrom(System.Type)"/>
            method.
            </exception>
        </member>
        <member name="T:log4net.Util.TypeConverters.IConvertFrom">
            <summary>
            Interface supported by type converters
            </summary>
            <remarks>
            <para>
            This interface supports conversion from arbitrary types
            to a single target type. See <see cref="T:log4net.Util.TypeConverters.TypeConverterAttribute"/>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.IConvertFrom.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
            <para>
            Test if the <paramref name="sourceType"/> can be converted to the
            type supported by this converter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(System.Object)">
            <summary>
            Convert the source object to the type supported by this object
            </summary>
            <param name="source">the object to convert</param>
            <returns>the converted object</returns>
            <remarks>
            <para>
            Converts the <paramref name="source"/> to the type supported
            by this converter.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.TypeConverters.IConvertTo">
            <summary>
            Interface supported by type converters
            </summary>
            <remarks>
            <para>
            This interface supports conversion from a single type to arbitrary types.
            See <see cref="T:log4net.Util.TypeConverters.TypeConverterAttribute"/>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.IConvertTo.CanConvertTo(System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type
            </summary>
            <param name="targetType">A Type that represents the type you want to convert to</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
            <para>
            Test if the type supported by this converter can be converted to the
            <paramref name="targetType"/>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.IConvertTo.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the arguments
            </summary>
            <param name="source">the object to convert</param>
            <param name="targetType">The Type to convert the value parameter to</param>
            <returns>the converted object</returns>
            <remarks>
            <para>
            Converts the <paramref name="source"/> (which must be of the type supported
            by this converter) to the <paramref name="targetType"/> specified..
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.TypeConverters.IPAddressConverter">
            <summary>
            Supports conversion from string to <see cref="T:System.Net.IPAddress"/> type.
            </summary>
            <remarks>
            <para>
            Supports conversion from string to <see cref="T:System.Net.IPAddress"/> type.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry"/>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom"/>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.IPAddressConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
            <para>
            Returns <c>true</c> if the <paramref name="sourceType"/> is
            the <see cref="T:System.String"/> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.IPAddressConverter.ConvertFrom(System.Object)">
            <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
            <param name="source">the object to convert to an IPAddress</param>
            <returns>the IPAddress</returns>
            <remarks>
            <para>
            Uses the <see cref="M:System.Net.IPAddress.Parse(System.String)"/> method to convert the
            <see cref="T:System.String"/> argument to an <see cref="T:System.Net.IPAddress"/>.
            If that fails then the string is resolved as a DNS hostname.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source"/> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.IPAddressConverter.CanConvertFrom(System.Type)"/>
            method.
            </exception>
        </member>
        <member name="F:log4net.Util.TypeConverters.IPAddressConverter.validIpAddressChars">
            <summary>
            Valid characters in an IPv4 or IPv6 address string. (Does not support subnets)
            </summary>
        </member>
        <member name="T:log4net.Util.TypeConverters.PatternLayoutConverter">
            <summary>
            Supports conversion from string to <see cref="T:log4net.Layout.PatternLayout"/> type.
            </summary>
            <remarks>
            <para>
            Supports conversion from string to <see cref="T:log4net.Layout.PatternLayout"/> type.
            </para>
            <para>
            The string is used as the <see cref="P:log4net.Layout.PatternLayout.ConversionPattern"/> 
            of the <see cref="T:log4net.Layout.PatternLayout"/>.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry"/>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom"/>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertTo"/>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.PatternLayoutConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
            <para>
            Returns <c>true</c> if the <paramref name="sourceType"/> is
            the <see cref="T:System.String"/> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.PatternLayoutConverter.ConvertFrom(System.Object)">
            <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
            <param name="source">the object to convert to a PatternLayout</param>
            <returns>the PatternLayout</returns>
            <remarks>
            <para>
            Creates and returns a new <see cref="T:log4net.Layout.PatternLayout"/> using
            the <paramref name="source"/> <see cref="T:System.String"/> as the
            <see cref="P:log4net.Layout.PatternLayout.ConversionPattern"/>.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source"/> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.PatternLayoutConverter.CanConvertFrom(System.Type)"/>
            method.
            </exception>
        </member>
        <member name="T:log4net.Util.TypeConverters.PatternStringConverter">
            <summary>
            Convert between string and <see cref="T:log4net.Util.PatternString"/>
            </summary>
            <remarks>
            <para>
            Supports conversion from string to <see cref="T:log4net.Util.PatternString"/> type, 
            and from a <see cref="T:log4net.Util.PatternString"/> type to a string.
            </para>
            <para>
            The string is used as the <see cref="P:log4net.Util.PatternString.ConversionPattern"/> 
            of the <see cref="T:log4net.Util.PatternString"/>.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry"/>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom"/>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertTo"/>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertTo(System.Type)">
            <summary>
            Can the target type be converted to the type supported by this object
            </summary>
            <param name="targetType">A <see cref="T:System.Type"/> that represents the type you want to convert to</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
            <para>
            Returns <c>true</c> if the <paramref name="targetType"/> is
            assignable from a <see cref="T:System.String"/> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.PatternStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the arguments
            </summary>
            <param name="source">the object to convert</param>
            <param name="targetType">The Type to convert the value parameter to</param>
            <returns>the converted object</returns>
            <remarks>
            <para>
            Uses the <see cref="M:PatternString.Format()"/> method to convert the
            <see cref="T:log4net.Util.PatternString"/> argument to a <see cref="T:System.String"/>.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source"/> object cannot be converted to the
            <paramref name="targetType"/>. To check for this condition use the 
            <see cref="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertTo(System.Type)"/> method.
            </exception>
        </member>
        <member name="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
            <para>
            Returns <c>true</c> if the <paramref name="sourceType"/> is
            the <see cref="T:System.String"/> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.PatternStringConverter.ConvertFrom(System.Object)">
            <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
            <param name="source">the object to convert to a PatternString</param>
            <returns>the PatternString</returns>
            <remarks>
            <para>
            Creates and returns a new <see cref="T:log4net.Util.PatternString"/> using
            the <paramref name="source"/> <see cref="T:System.String"/> as the
            <see cref="P:log4net.Util.PatternString.ConversionPattern"/>.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source"/> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertFrom(System.Type)"/>
            method.
            </exception>
        </member>
        <member name="T:log4net.Util.TypeConverters.TypeConverter">
            <summary>
            Supports conversion from string to <see cref="T:System.Type"/> type.
            </summary>
            <remarks>
            <para>
            Supports conversion from string to <see cref="T:System.Type"/> type.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry"/>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom"/>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertTo"/>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.TypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
            <para>
            Returns <c>true</c> if the <paramref name="sourceType"/> is
            the <see cref="T:System.String"/> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.TypeConverter.ConvertFrom(System.Object)">
            <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
            <param name="source">the object to convert to a Type</param>
            <returns>the Type</returns>
            <remarks>
            <para>
            Uses the <see cref="M:Type.GetType(string,bool)"/> method to convert the
            <see cref="T:System.String"/> argument to a <see cref="T:System.Type"/>.
            Additional effort is made to locate partially specified types
            by searching the loaded assemblies.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source"/> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.TypeConverter.CanConvertFrom(System.Type)"/>
            method.
            </exception>
        </member>
        <member name="T:log4net.Util.TypeConverters.TypeConverterAttribute">
            <summary>
            Attribute used to associate a type converter
            </summary>
            <remarks>
            <para>
            Class and Interface level attribute that specifies a type converter
            to use with the associated type.
            </para>
            <para>
            To associate a type converter with a target type apply a
            <c>TypeConverterAttribute</c> to the target type. Specify the
            type of the type converter on the attribute.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Util.TypeConverters.TypeConverterAttribute.m_typeName">
            <summary>
            The string type name of the type converter
            </summary>
        </member>
        <member name="M:log4net.Util.TypeConverters.TypeConverterAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.TypeConverterAttribute.#ctor(System.String)">
            <summary>
            Create a new type converter attribute for the specified type name
            </summary>
            <param name="typeName">The string type name of the type converter</param>
            <remarks>
            <para>
            The type specified must implement the <see cref="T:log4net.Util.TypeConverters.IConvertFrom"/> 
            or the <see cref="T:log4net.Util.TypeConverters.IConvertTo"/> interfaces.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.TypeConverterAttribute.#ctor(System.Type)">
            <summary>
            Create a new type converter attribute for the specified type
            </summary>
            <param name="converterType">The type of the type converter</param>
            <remarks>
            <para>
            The type specified must implement the <see cref="T:log4net.Util.TypeConverters.IConvertFrom"/> 
            or the <see cref="T:log4net.Util.TypeConverters.IConvertTo"/> interfaces.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.TypeConverters.TypeConverterAttribute.ConverterTypeName">
            <summary>
            The string type name of the type converter 
            </summary>
            <value>
            The string type name of the type converter 
            </value>
            <remarks>
            <para>
            The type specified must implement the <see cref="T:log4net.Util.TypeConverters.IConvertFrom"/> 
            or the <see cref="T:log4net.Util.TypeConverters.IConvertTo"/> interfaces.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.WindowsSecurityContext">
            <summary>
            Impersonate a Windows Account
            </summary>
            <remarks>
            <para>
            This <see cref="T:log4net.Core.SecurityContext"/> impersonates a Windows account.
            </para>
            <para>
            How the impersonation is done depends on the value of <see cref="M:log4net.Util.WindowsSecurityContext.Impersonate(System.Object)"/>.
            This allows the context to either impersonate a set of user credentials specified 
            using username, domain name and password or to revert to the process credentials.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.WindowsSecurityContext.ImpersonationMode">
            <summary>
            The impersonation modes for the <see cref="T:log4net.Util.WindowsSecurityContext"/>
            </summary>
            <remarks>
            <para>
            See the <see cref="P:log4net.Util.WindowsSecurityContext.Credentials"/> property for
            details.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User">
            <summary>
            Impersonate a user using the credentials supplied
            </summary>
        </member>
        <member name="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.Process">
            <summary>
            Revert this the thread to the credentials of the process
            </summary>
        </member>
        <member name="M:log4net.Util.WindowsSecurityContext.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.WindowsSecurityContext.Credentials">
            <summary>
            Gets or sets the impersonation mode for this security context
            </summary>
            <value>
            The impersonation mode for this security context
            </value>
            <remarks>
            <para>
            Impersonate either a user with user credentials or
            revert this thread to the credentials of the process.
            The value is one of the <see cref="T:log4net.Util.WindowsSecurityContext.ImpersonationMode"/>
            enum.
            </para>
            <para>
            The default value is <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User"/>
            </para>
            <para>
            When the mode is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User"/>
            the user's credentials are established using the
            <see cref="P:log4net.Util.WindowsSecurityContext.UserName"/>, <see cref="P:log4net.Util.WindowsSecurityContext.DomainName"/> and <see cref="P:log4net.Util.WindowsSecurityContext.Password"/>
            values.
            </para>
            <para>
            When the mode is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.Process"/>
            no other properties need to be set. If the calling thread is 
            impersonating then it will be reverted back to the process credentials.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.WindowsSecurityContext.UserName">
            <summary>
            Gets or sets the Windows username for this security context
            </summary>
            <value>
            The Windows username for this security context
            </value>
            <remarks>
            <para>
            This property must be set if <see cref="P:log4net.Util.WindowsSecurityContext.Credentials"/>
            is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User"/> (the default setting).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.WindowsSecurityContext.DomainName">
            <summary>
            Gets or sets the Windows domain name for this security context
            </summary>
            <value>
            The Windows domain name for this security context
            </value>
            <remarks>
            <para>
            The default value for <see cref="P:log4net.Util.WindowsSecurityContext.DomainName"/> is the local machine name
            taken from the <see cref="P:System.Environment.MachineName"/> property.
            </para>
            <para>
            This property must be set if <see cref="P:log4net.Util.WindowsSecurityContext.Credentials"/>
            is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User"/> (the default setting).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.WindowsSecurityContext.Password">
            <summary>
            Sets the password for the Windows account specified by the <see cref="P:log4net.Util.WindowsSecurityContext.UserName"/> and <see cref="P:log4net.Util.WindowsSecurityContext.DomainName"/> properties.
            </summary>
            <value>
            The password for the Windows account specified by the <see cref="P:log4net.Util.WindowsSecurityContext.UserName"/> and <see cref="P:log4net.Util.WindowsSecurityContext.DomainName"/> properties.
            </value>
            <remarks>
            <para>
            This property must be set if <see cref="P:log4net.Util.WindowsSecurityContext.Credentials"/>
            is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User"/> (the default setting).
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.WindowsSecurityContext.ActivateOptions">
            <summary>
            Initialize the SecurityContext based on the options set.
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:log4net.Util.WindowsSecurityContext.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.WindowsSecurityContext.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.WindowsSecurityContext.ActivateOptions"/> must be called again.
            </para>
            <para>
            The security context will try to Logon the specified user account and
            capture a primary token for impersonation.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The required <see cref="P:log4net.Util.WindowsSecurityContext.UserName" />, 
            <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> or <see cref="P:log4net.Util.WindowsSecurityContext.Password" /> properties were not specified.</exception>
        </member>
        <member name="M:log4net.Util.WindowsSecurityContext.Impersonate(System.Object)">
            <summary>
            Impersonate the Windows account specified by the <see cref="P:log4net.Util.WindowsSecurityContext.UserName"/> and <see cref="P:log4net.Util.WindowsSecurityContext.DomainName"/> properties.
            </summary>
            <param name="state">caller provided state</param>
            <returns>
            An <see cref="T:System.IDisposable"/> instance that will revoke the impersonation of this SecurityContext
            </returns>
            <remarks>
            <para>
            Depending on the <see cref="P:log4net.Util.WindowsSecurityContext.Credentials"/> property either
            impersonate a user using credentials supplied or revert 
            to the process credentials.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.WindowsSecurityContext.LogonUser(System.String,System.String,System.String)">
            <summary>
            Create a <see cref="T:System.Security.Principal.WindowsIdentity"/> given the userName, domainName and password.
            </summary>
            <param name="userName">the user name</param>
            <param name="domainName">the domain name</param>
            <param name="password">the password</param>
            <returns>the <see cref="T:System.Security.Principal.WindowsIdentity"/> for the account specified</returns>
            <remarks>
            <para>
            Uses the Windows API call LogonUser to get a principal token for the account. This
            token is used to initialize the WindowsIdentity.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.WindowsSecurityContext.DisposableImpersonationContext">
            <summary>
            Adds <see cref="T:System.IDisposable"/> to <see cref="T:System.Security.Principal.WindowsImpersonationContext"/>
            </summary>
            <remarks>
            <para>
            Helper class to expose the <see cref="T:System.Security.Principal.WindowsImpersonationContext"/>
            through the <see cref="T:System.IDisposable"/> interface.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.WindowsSecurityContext.DisposableImpersonationContext.#ctor(System.Security.Principal.WindowsImpersonationContext)">
            <summary>
            Constructor
            </summary>
            <param name="impersonationContext">the impersonation context being wrapped</param>
            <remarks>
            <para>
            Constructor
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.WindowsSecurityContext.DisposableImpersonationContext.Dispose">
            <summary>
            Revert the impersonation
            </summary>
            <remarks>
            <para>
            Revert the impersonation
            </para>
            </remarks>
        </member>
    </members>
</doc>
