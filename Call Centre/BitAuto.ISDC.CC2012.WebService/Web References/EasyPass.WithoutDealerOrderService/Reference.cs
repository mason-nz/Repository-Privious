//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1026
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.1026 版自动生成。
// 
#pragma warning disable 1591

namespace BitAuto.ISDC.CC2012.WebService.EasyPass.WithoutDealerOrderService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WithoutDealerOrderServiceSoap", Namespace="http://bitauto.com/")]
    public partial class WithoutDealerOrderService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SetRushBoughtOrdersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewCarOrderListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReplaceOrderListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCarDealerXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDealerListByLocationIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetNewCarOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetReplacementOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetShiJiaOrderListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetShiJiaOrderOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WithoutDealerOrderService() {
            this.Url = global::BitAuto.ISDC.CC2012.WebService.Properties.Settings.Default.BitAuto_ISDC_CC2012_WebService_EasyPass_WithoutDealerOrderService_WithoutDealerOrderService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetRushBoughtOrdersCompletedEventHandler SetRushBoughtOrdersCompleted;
        
        /// <remarks/>
        public event GetNewCarOrderListCompletedEventHandler GetNewCarOrderListCompleted;
        
        /// <remarks/>
        public event GetReplaceOrderListCompletedEventHandler GetReplaceOrderListCompleted;
        
        /// <remarks/>
        public event GetCarDealerXMLCompletedEventHandler GetCarDealerXMLCompleted;
        
        /// <remarks/>
        public event GetDealerListByLocationIdCompletedEventHandler GetDealerListByLocationIdCompleted;
        
        /// <remarks/>
        public event SetNewCarOrderCompletedEventHandler SetNewCarOrderCompleted;
        
        /// <remarks/>
        public event SetReplacementOrderCompletedEventHandler SetReplacementOrderCompleted;
        
        /// <remarks/>
        public event GetShiJiaOrderListCompletedEventHandler GetShiJiaOrderListCompleted;
        
        /// <remarks/>
        public event SetShiJiaOrderCompletedEventHandler SetShiJiaOrderCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bitauto.com/SetRushBoughtOrders", RequestNamespace="http://bitauto.com/", ResponseNamespace="http://bitauto.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SetRushBoughtOrders(string AuthorizeCode, int OrderBusinessOpportunityID, int DealerId, int DasAccountID, out string ErrorMsg) {
            object[] results = this.Invoke("SetRushBoughtOrders", new object[] {
                        AuthorizeCode,
                        OrderBusinessOpportunityID,
                        DealerId,
                        DasAccountID});
            ErrorMsg = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SetRushBoughtOrdersAsync(string AuthorizeCode, int OrderBusinessOpportunityID, int DealerId, int DasAccountID) {
            this.SetRushBoughtOrdersAsync(AuthorizeCode, OrderBusinessOpportunityID, DealerId, DasAccountID, null);
        }
        
        /// <remarks/>
        public void SetRushBoughtOrdersAsync(string AuthorizeCode, int OrderBusinessOpportunityID, int DealerId, int DasAccountID, object userState) {
            if ((this.SetRushBoughtOrdersOperationCompleted == null)) {
                this.SetRushBoughtOrdersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRushBoughtOrdersOperationCompleted);
            }
            this.InvokeAsync("SetRushBoughtOrders", new object[] {
                        AuthorizeCode,
                        OrderBusinessOpportunityID,
                        DealerId,
                        DasAccountID}, this.SetRushBoughtOrdersOperationCompleted, userState);
        }
        
        private void OnSetRushBoughtOrdersOperationCompleted(object arg) {
            if ((this.SetRushBoughtOrdersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRushBoughtOrdersCompleted(this, new SetRushBoughtOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bitauto.com/GetNewCarOrderList", RequestNamespace="http://bitauto.com/", ResponseNamespace="http://bitauto.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetNewCarOrderList(string AuthorizeCode, int lastMaxId) {
            object[] results = this.Invoke("GetNewCarOrderList", new object[] {
                        AuthorizeCode,
                        lastMaxId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewCarOrderListAsync(string AuthorizeCode, int lastMaxId) {
            this.GetNewCarOrderListAsync(AuthorizeCode, lastMaxId, null);
        }
        
        /// <remarks/>
        public void GetNewCarOrderListAsync(string AuthorizeCode, int lastMaxId, object userState) {
            if ((this.GetNewCarOrderListOperationCompleted == null)) {
                this.GetNewCarOrderListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewCarOrderListOperationCompleted);
            }
            this.InvokeAsync("GetNewCarOrderList", new object[] {
                        AuthorizeCode,
                        lastMaxId}, this.GetNewCarOrderListOperationCompleted, userState);
        }
        
        private void OnGetNewCarOrderListOperationCompleted(object arg) {
            if ((this.GetNewCarOrderListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewCarOrderListCompleted(this, new GetNewCarOrderListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bitauto.com/GetReplaceOrderList", RequestNamespace="http://bitauto.com/", ResponseNamespace="http://bitauto.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetReplaceOrderList(string AuthorizeCode, int lastMaxId) {
            object[] results = this.Invoke("GetReplaceOrderList", new object[] {
                        AuthorizeCode,
                        lastMaxId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetReplaceOrderListAsync(string AuthorizeCode, int lastMaxId) {
            this.GetReplaceOrderListAsync(AuthorizeCode, lastMaxId, null);
        }
        
        /// <remarks/>
        public void GetReplaceOrderListAsync(string AuthorizeCode, int lastMaxId, object userState) {
            if ((this.GetReplaceOrderListOperationCompleted == null)) {
                this.GetReplaceOrderListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReplaceOrderListOperationCompleted);
            }
            this.InvokeAsync("GetReplaceOrderList", new object[] {
                        AuthorizeCode,
                        lastMaxId}, this.GetReplaceOrderListOperationCompleted, userState);
        }
        
        private void OnGetReplaceOrderListOperationCompleted(object arg) {
            if ((this.GetReplaceOrderListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReplaceOrderListCompleted(this, new GetReplaceOrderListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bitauto.com/GetCarDealerXML", RequestNamespace="http://bitauto.com/", ResponseNamespace="http://bitauto.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCarDealerXML(string AuthorizeCode, int carId) {
            object[] results = this.Invoke("GetCarDealerXML", new object[] {
                        AuthorizeCode,
                        carId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCarDealerXMLAsync(string AuthorizeCode, int carId) {
            this.GetCarDealerXMLAsync(AuthorizeCode, carId, null);
        }
        
        /// <remarks/>
        public void GetCarDealerXMLAsync(string AuthorizeCode, int carId, object userState) {
            if ((this.GetCarDealerXMLOperationCompleted == null)) {
                this.GetCarDealerXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarDealerXMLOperationCompleted);
            }
            this.InvokeAsync("GetCarDealerXML", new object[] {
                        AuthorizeCode,
                        carId}, this.GetCarDealerXMLOperationCompleted, userState);
        }
        
        private void OnGetCarDealerXMLOperationCompleted(object arg) {
            if ((this.GetCarDealerXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCarDealerXMLCompleted(this, new GetCarDealerXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bitauto.com/GetDealerListByLocationId", RequestNamespace="http://bitauto.com/", ResponseNamespace="http://bitauto.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDealerListByLocationId(string AuthorizeCode, int carId, int locationId, int businessLevel) {
            object[] results = this.Invoke("GetDealerListByLocationId", new object[] {
                        AuthorizeCode,
                        carId,
                        locationId,
                        businessLevel});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDealerListByLocationIdAsync(string AuthorizeCode, int carId, int locationId, int businessLevel) {
            this.GetDealerListByLocationIdAsync(AuthorizeCode, carId, locationId, businessLevel, null);
        }
        
        /// <remarks/>
        public void GetDealerListByLocationIdAsync(string AuthorizeCode, int carId, int locationId, int businessLevel, object userState) {
            if ((this.GetDealerListByLocationIdOperationCompleted == null)) {
                this.GetDealerListByLocationIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDealerListByLocationIdOperationCompleted);
            }
            this.InvokeAsync("GetDealerListByLocationId", new object[] {
                        AuthorizeCode,
                        carId,
                        locationId,
                        businessLevel}, this.GetDealerListByLocationIdOperationCompleted, userState);
        }
        
        private void OnGetDealerListByLocationIdOperationCompleted(object arg) {
            if ((this.GetDealerListByLocationIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDealerListByLocationIdCompleted(this, new GetDealerListByLocationIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bitauto.com/SetNewCarOrder", RequestNamespace="http://bitauto.com/", ResponseNamespace="http://bitauto.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SetNewCarOrder(
                    string AuthorizeCode, 
                    int OrderBusinessOpportunityID, 
                    int DealerId, 
                    int OrderQuantity, 
                    string OrderRemark, 
                    int UserGender, 
                    string UserName, 
                    string UserPhone, 
                    string UserMobile, 
                    string UserMail, 
                    int LocationID, 
                    string LocationName, 
                    string UserAddress, 
                    int CarID, 
                    decimal CarPrice, 
                    string CarColor, 
                    string CarFullName, 
                    string CarPromotions, 
                    short processFlag, 
                    string processMemo, 
                    int DasAccountID, 
                    out string ErrorMsg) {
            object[] results = this.Invoke("SetNewCarOrder", new object[] {
                        AuthorizeCode,
                        OrderBusinessOpportunityID,
                        DealerId,
                        OrderQuantity,
                        OrderRemark,
                        UserGender,
                        UserName,
                        UserPhone,
                        UserMobile,
                        UserMail,
                        LocationID,
                        LocationName,
                        UserAddress,
                        CarID,
                        CarPrice,
                        CarColor,
                        CarFullName,
                        CarPromotions,
                        processFlag,
                        processMemo,
                        DasAccountID});
            ErrorMsg = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SetNewCarOrderAsync(
                    string AuthorizeCode, 
                    int OrderBusinessOpportunityID, 
                    int DealerId, 
                    int OrderQuantity, 
                    string OrderRemark, 
                    int UserGender, 
                    string UserName, 
                    string UserPhone, 
                    string UserMobile, 
                    string UserMail, 
                    int LocationID, 
                    string LocationName, 
                    string UserAddress, 
                    int CarID, 
                    decimal CarPrice, 
                    string CarColor, 
                    string CarFullName, 
                    string CarPromotions, 
                    short processFlag, 
                    string processMemo, 
                    int DasAccountID) {
            this.SetNewCarOrderAsync(AuthorizeCode, OrderBusinessOpportunityID, DealerId, OrderQuantity, OrderRemark, UserGender, UserName, UserPhone, UserMobile, UserMail, LocationID, LocationName, UserAddress, CarID, CarPrice, CarColor, CarFullName, CarPromotions, processFlag, processMemo, DasAccountID, null);
        }
        
        /// <remarks/>
        public void SetNewCarOrderAsync(
                    string AuthorizeCode, 
                    int OrderBusinessOpportunityID, 
                    int DealerId, 
                    int OrderQuantity, 
                    string OrderRemark, 
                    int UserGender, 
                    string UserName, 
                    string UserPhone, 
                    string UserMobile, 
                    string UserMail, 
                    int LocationID, 
                    string LocationName, 
                    string UserAddress, 
                    int CarID, 
                    decimal CarPrice, 
                    string CarColor, 
                    string CarFullName, 
                    string CarPromotions, 
                    short processFlag, 
                    string processMemo, 
                    int DasAccountID, 
                    object userState) {
            if ((this.SetNewCarOrderOperationCompleted == null)) {
                this.SetNewCarOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetNewCarOrderOperationCompleted);
            }
            this.InvokeAsync("SetNewCarOrder", new object[] {
                        AuthorizeCode,
                        OrderBusinessOpportunityID,
                        DealerId,
                        OrderQuantity,
                        OrderRemark,
                        UserGender,
                        UserName,
                        UserPhone,
                        UserMobile,
                        UserMail,
                        LocationID,
                        LocationName,
                        UserAddress,
                        CarID,
                        CarPrice,
                        CarColor,
                        CarFullName,
                        CarPromotions,
                        processFlag,
                        processMemo,
                        DasAccountID}, this.SetNewCarOrderOperationCompleted, userState);
        }
        
        private void OnSetNewCarOrderOperationCompleted(object arg) {
            if ((this.SetNewCarOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetNewCarOrderCompleted(this, new SetNewCarOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bitauto.com/SetReplacementOrder", RequestNamespace="http://bitauto.com/", ResponseNamespace="http://bitauto.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SetReplacementOrder(
                    string AuthorizeCode, 
                    int OrderBusinessOpportunityID, 
                    int DealerId, 
                    decimal OrderPrice, 
                    int OrderQuantity, 
                    string OrderRemark, 
                    int UserGender, 
                    string UserName, 
                    string UserPhone, 
                    string UserMobile, 
                    string UserMail, 
                    int LocationID, 
                    string LocationName, 
                    string UserAddress, 
                    int CarID, 
                    decimal CarPrice, 
                    string CarColor, 
                    string CarFullName, 
                    string CarPromotions, 
                    int ReplacementCarId, 
                    short ReplacementCarBuyYear, 
                    short ReplacementCarBuyMonth, 
                    string ReplacementCarColor, 
                    int ReplacementCarUsedMiles, 
                    int ReplacementCarLocationID, 
                    decimal salePrice, 
                    short processFlag, 
                    string processMemo, 
                    int DasAccountID, 
                    out string ErrorMsg) {
            object[] results = this.Invoke("SetReplacementOrder", new object[] {
                        AuthorizeCode,
                        OrderBusinessOpportunityID,
                        DealerId,
                        OrderPrice,
                        OrderQuantity,
                        OrderRemark,
                        UserGender,
                        UserName,
                        UserPhone,
                        UserMobile,
                        UserMail,
                        LocationID,
                        LocationName,
                        UserAddress,
                        CarID,
                        CarPrice,
                        CarColor,
                        CarFullName,
                        CarPromotions,
                        ReplacementCarId,
                        ReplacementCarBuyYear,
                        ReplacementCarBuyMonth,
                        ReplacementCarColor,
                        ReplacementCarUsedMiles,
                        ReplacementCarLocationID,
                        salePrice,
                        processFlag,
                        processMemo,
                        DasAccountID});
            ErrorMsg = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SetReplacementOrderAsync(
                    string AuthorizeCode, 
                    int OrderBusinessOpportunityID, 
                    int DealerId, 
                    decimal OrderPrice, 
                    int OrderQuantity, 
                    string OrderRemark, 
                    int UserGender, 
                    string UserName, 
                    string UserPhone, 
                    string UserMobile, 
                    string UserMail, 
                    int LocationID, 
                    string LocationName, 
                    string UserAddress, 
                    int CarID, 
                    decimal CarPrice, 
                    string CarColor, 
                    string CarFullName, 
                    string CarPromotions, 
                    int ReplacementCarId, 
                    short ReplacementCarBuyYear, 
                    short ReplacementCarBuyMonth, 
                    string ReplacementCarColor, 
                    int ReplacementCarUsedMiles, 
                    int ReplacementCarLocationID, 
                    decimal salePrice, 
                    short processFlag, 
                    string processMemo, 
                    int DasAccountID) {
            this.SetReplacementOrderAsync(AuthorizeCode, OrderBusinessOpportunityID, DealerId, OrderPrice, OrderQuantity, OrderRemark, UserGender, UserName, UserPhone, UserMobile, UserMail, LocationID, LocationName, UserAddress, CarID, CarPrice, CarColor, CarFullName, CarPromotions, ReplacementCarId, ReplacementCarBuyYear, ReplacementCarBuyMonth, ReplacementCarColor, ReplacementCarUsedMiles, ReplacementCarLocationID, salePrice, processFlag, processMemo, DasAccountID, null);
        }
        
        /// <remarks/>
        public void SetReplacementOrderAsync(
                    string AuthorizeCode, 
                    int OrderBusinessOpportunityID, 
                    int DealerId, 
                    decimal OrderPrice, 
                    int OrderQuantity, 
                    string OrderRemark, 
                    int UserGender, 
                    string UserName, 
                    string UserPhone, 
                    string UserMobile, 
                    string UserMail, 
                    int LocationID, 
                    string LocationName, 
                    string UserAddress, 
                    int CarID, 
                    decimal CarPrice, 
                    string CarColor, 
                    string CarFullName, 
                    string CarPromotions, 
                    int ReplacementCarId, 
                    short ReplacementCarBuyYear, 
                    short ReplacementCarBuyMonth, 
                    string ReplacementCarColor, 
                    int ReplacementCarUsedMiles, 
                    int ReplacementCarLocationID, 
                    decimal salePrice, 
                    short processFlag, 
                    string processMemo, 
                    int DasAccountID, 
                    object userState) {
            if ((this.SetReplacementOrderOperationCompleted == null)) {
                this.SetReplacementOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetReplacementOrderOperationCompleted);
            }
            this.InvokeAsync("SetReplacementOrder", new object[] {
                        AuthorizeCode,
                        OrderBusinessOpportunityID,
                        DealerId,
                        OrderPrice,
                        OrderQuantity,
                        OrderRemark,
                        UserGender,
                        UserName,
                        UserPhone,
                        UserMobile,
                        UserMail,
                        LocationID,
                        LocationName,
                        UserAddress,
                        CarID,
                        CarPrice,
                        CarColor,
                        CarFullName,
                        CarPromotions,
                        ReplacementCarId,
                        ReplacementCarBuyYear,
                        ReplacementCarBuyMonth,
                        ReplacementCarColor,
                        ReplacementCarUsedMiles,
                        ReplacementCarLocationID,
                        salePrice,
                        processFlag,
                        processMemo,
                        DasAccountID}, this.SetReplacementOrderOperationCompleted, userState);
        }
        
        private void OnSetReplacementOrderOperationCompleted(object arg) {
            if ((this.SetReplacementOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetReplacementOrderCompleted(this, new SetReplacementOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bitauto.com/GetShiJiaOrderList", RequestNamespace="http://bitauto.com/", ResponseNamespace="http://bitauto.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetShiJiaOrderList(string AuthorizeCode, int lastMaxId) {
            object[] results = this.Invoke("GetShiJiaOrderList", new object[] {
                        AuthorizeCode,
                        lastMaxId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetShiJiaOrderListAsync(string AuthorizeCode, int lastMaxId) {
            this.GetShiJiaOrderListAsync(AuthorizeCode, lastMaxId, null);
        }
        
        /// <remarks/>
        public void GetShiJiaOrderListAsync(string AuthorizeCode, int lastMaxId, object userState) {
            if ((this.GetShiJiaOrderListOperationCompleted == null)) {
                this.GetShiJiaOrderListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetShiJiaOrderListOperationCompleted);
            }
            this.InvokeAsync("GetShiJiaOrderList", new object[] {
                        AuthorizeCode,
                        lastMaxId}, this.GetShiJiaOrderListOperationCompleted, userState);
        }
        
        private void OnGetShiJiaOrderListOperationCompleted(object arg) {
            if ((this.GetShiJiaOrderListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetShiJiaOrderListCompleted(this, new GetShiJiaOrderListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bitauto.com/SetShiJiaOrder", RequestNamespace="http://bitauto.com/", ResponseNamespace="http://bitauto.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SetShiJiaOrder(
                    string AuthCode, 
                    int OrderBusinessOpportunityID, 
                    string OrderRemark, 
                    int UserGender, 
                    string UserName, 
                    string UserPhone, 
                    string UserMobile, 
                    string UserMail, 
                    int LocationID, 
                    string LocationName, 
                    string UserAddress, 
                    System.DateTime OrderBusinessOpportunityCreateTime, 
                    int CarID, 
                    string CarFullName, 
                    int DealerId, 
                    int processFlag, 
                    string processMemo, 
                    int DasAccountID, 
                    out string ErrorMsg) {
            object[] results = this.Invoke("SetShiJiaOrder", new object[] {
                        AuthCode,
                        OrderBusinessOpportunityID,
                        OrderRemark,
                        UserGender,
                        UserName,
                        UserPhone,
                        UserMobile,
                        UserMail,
                        LocationID,
                        LocationName,
                        UserAddress,
                        OrderBusinessOpportunityCreateTime,
                        CarID,
                        CarFullName,
                        DealerId,
                        processFlag,
                        processMemo,
                        DasAccountID});
            ErrorMsg = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SetShiJiaOrderAsync(
                    string AuthCode, 
                    int OrderBusinessOpportunityID, 
                    string OrderRemark, 
                    int UserGender, 
                    string UserName, 
                    string UserPhone, 
                    string UserMobile, 
                    string UserMail, 
                    int LocationID, 
                    string LocationName, 
                    string UserAddress, 
                    System.DateTime OrderBusinessOpportunityCreateTime, 
                    int CarID, 
                    string CarFullName, 
                    int DealerId, 
                    int processFlag, 
                    string processMemo, 
                    int DasAccountID) {
            this.SetShiJiaOrderAsync(AuthCode, OrderBusinessOpportunityID, OrderRemark, UserGender, UserName, UserPhone, UserMobile, UserMail, LocationID, LocationName, UserAddress, OrderBusinessOpportunityCreateTime, CarID, CarFullName, DealerId, processFlag, processMemo, DasAccountID, null);
        }
        
        /// <remarks/>
        public void SetShiJiaOrderAsync(
                    string AuthCode, 
                    int OrderBusinessOpportunityID, 
                    string OrderRemark, 
                    int UserGender, 
                    string UserName, 
                    string UserPhone, 
                    string UserMobile, 
                    string UserMail, 
                    int LocationID, 
                    string LocationName, 
                    string UserAddress, 
                    System.DateTime OrderBusinessOpportunityCreateTime, 
                    int CarID, 
                    string CarFullName, 
                    int DealerId, 
                    int processFlag, 
                    string processMemo, 
                    int DasAccountID, 
                    object userState) {
            if ((this.SetShiJiaOrderOperationCompleted == null)) {
                this.SetShiJiaOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetShiJiaOrderOperationCompleted);
            }
            this.InvokeAsync("SetShiJiaOrder", new object[] {
                        AuthCode,
                        OrderBusinessOpportunityID,
                        OrderRemark,
                        UserGender,
                        UserName,
                        UserPhone,
                        UserMobile,
                        UserMail,
                        LocationID,
                        LocationName,
                        UserAddress,
                        OrderBusinessOpportunityCreateTime,
                        CarID,
                        CarFullName,
                        DealerId,
                        processFlag,
                        processMemo,
                        DasAccountID}, this.SetShiJiaOrderOperationCompleted, userState);
        }
        
        private void OnSetShiJiaOrderOperationCompleted(object arg) {
            if ((this.SetShiJiaOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetShiJiaOrderCompleted(this, new SetShiJiaOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetRushBoughtOrdersCompletedEventHandler(object sender, SetRushBoughtOrdersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRushBoughtOrdersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRushBoughtOrdersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetNewCarOrderListCompletedEventHandler(object sender, GetNewCarOrderListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewCarOrderListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewCarOrderListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReplaceOrderListCompletedEventHandler(object sender, GetReplaceOrderListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReplaceOrderListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReplaceOrderListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCarDealerXMLCompletedEventHandler(object sender, GetCarDealerXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCarDealerXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCarDealerXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDealerListByLocationIdCompletedEventHandler(object sender, GetDealerListByLocationIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDealerListByLocationIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDealerListByLocationIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetNewCarOrderCompletedEventHandler(object sender, SetNewCarOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetNewCarOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetNewCarOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetReplacementOrderCompletedEventHandler(object sender, SetReplacementOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetReplacementOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetReplacementOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetShiJiaOrderListCompletedEventHandler(object sender, GetShiJiaOrderListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetShiJiaOrderListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetShiJiaOrderListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetShiJiaOrderCompletedEventHandler(object sender, SetShiJiaOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetShiJiaOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetShiJiaOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591