//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1026
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.1026 版自动生成。
// 
#pragma warning disable 1591

namespace BitAuto.ISDC.CC2012.WebService.TaoChe.CstMemberService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TranstarToBitautoCRMSoap", Namespace="http://tempuri.org/")]
    public partial class TranstarToBitautoCRM : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddTranstarUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyTranstarVendorAccountStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTranstarUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUBByUserIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSuperVendorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTranstarInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinkmanOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUBInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccontInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUBRecordByTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFeedbackOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddVendorSchedulingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateVendorSchedulingOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteVendorSchedulingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDealerValidateCarSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDealerValidateCarSourceByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllCarSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetValidateDealerByMonthOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDealerUBLogDetailByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAndEditEPDealerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEPDealerStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAndEditEPSchedulingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TranstarToBitautoCRM() {
            this.Url = global::BitAuto.ISDC.CC2012.WebService.Properties.Settings.Default.BitAuto_ISDC_CC2012_WebService_TaoChe_CstMemberService_TranstarToBitautoCRM;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddTranstarUserInfoCompletedEventHandler AddTranstarUserInfoCompleted;
        
        /// <remarks/>
        public event ModifyTranstarVendorAccountStatusCompletedEventHandler ModifyTranstarVendorAccountStatusCompleted;
        
        /// <remarks/>
        public event UpdateTranstarUserInfoCompletedEventHandler UpdateTranstarUserInfoCompleted;
        
        /// <remarks/>
        public event AddUBByUserIdCompletedEventHandler AddUBByUserIdCompleted;
        
        /// <remarks/>
        public event GetSuperVendorCompletedEventHandler GetSuperVendorCompleted;
        
        /// <remarks/>
        public event GetTranstarInfoCompletedEventHandler GetTranstarInfoCompleted;
        
        /// <remarks/>
        public event GetLinkmanCompletedEventHandler GetLinkmanCompleted;
        
        /// <remarks/>
        public event GetUBInfoCompletedEventHandler GetUBInfoCompleted;
        
        /// <remarks/>
        public event GetAccontInfoCompletedEventHandler GetAccontInfoCompleted;
        
        /// <remarks/>
        public event GetUBRecordByTimeCompletedEventHandler GetUBRecordByTimeCompleted;
        
        /// <remarks/>
        public event GetFeedbackCompletedEventHandler GetFeedbackCompleted;
        
        /// <remarks/>
        public event AddVendorSchedulingCompletedEventHandler AddVendorSchedulingCompleted;
        
        /// <remarks/>
        public event UpdateVendorSchedulingCompletedEventHandler UpdateVendorSchedulingCompleted;
        
        /// <remarks/>
        public event DeleteVendorSchedulingCompletedEventHandler DeleteVendorSchedulingCompleted;
        
        /// <remarks/>
        public event GetDealerValidateCarSourceCompletedEventHandler GetDealerValidateCarSourceCompleted;
        
        /// <remarks/>
        public event GetDealerValidateCarSourceByDateCompletedEventHandler GetDealerValidateCarSourceByDateCompleted;
        
        /// <remarks/>
        public event GetAllCarSourceCompletedEventHandler GetAllCarSourceCompleted;
        
        /// <remarks/>
        public event GetValidateDealerByMonthCompletedEventHandler GetValidateDealerByMonthCompleted;
        
        /// <remarks/>
        public event GetDealerUBLogDetailByDateCompletedEventHandler GetDealerUBLogDetailByDateCompleted;
        
        /// <remarks/>
        public event AddAndEditEPDealerCompletedEventHandler AddAndEditEPDealerCompleted;
        
        /// <remarks/>
        public event UpdateEPDealerStatusCompletedEventHandler UpdateEPDealerStatusCompleted;
        
        /// <remarks/>
        public event AddAndEditEPSchedulingCompletedEventHandler AddAndEditEPSchedulingCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddTranstarUserInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddTranstarUserInfo(string sVendorFullName, string sVendorShortName, int nVendorClass, int DVTId, string sBrand, int nCityId, string sPostCode, string sAddress, string sLinkManName, string sLinkMobile, string sEmail, out string sMsg) {
            object[] results = this.Invoke("AddTranstarUserInfo", new object[] {
                        sVendorFullName,
                        sVendorShortName,
                        nVendorClass,
                        DVTId,
                        sBrand,
                        nCityId,
                        sPostCode,
                        sAddress,
                        sLinkManName,
                        sLinkMobile,
                        sEmail});
            sMsg = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddTranstarUserInfoAsync(string sVendorFullName, string sVendorShortName, int nVendorClass, int DVTId, string sBrand, int nCityId, string sPostCode, string sAddress, string sLinkManName, string sLinkMobile, string sEmail) {
            this.AddTranstarUserInfoAsync(sVendorFullName, sVendorShortName, nVendorClass, DVTId, sBrand, nCityId, sPostCode, sAddress, sLinkManName, sLinkMobile, sEmail, null);
        }
        
        /// <remarks/>
        public void AddTranstarUserInfoAsync(string sVendorFullName, string sVendorShortName, int nVendorClass, int DVTId, string sBrand, int nCityId, string sPostCode, string sAddress, string sLinkManName, string sLinkMobile, string sEmail, object userState) {
            if ((this.AddTranstarUserInfoOperationCompleted == null)) {
                this.AddTranstarUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTranstarUserInfoOperationCompleted);
            }
            this.InvokeAsync("AddTranstarUserInfo", new object[] {
                        sVendorFullName,
                        sVendorShortName,
                        nVendorClass,
                        DVTId,
                        sBrand,
                        nCityId,
                        sPostCode,
                        sAddress,
                        sLinkManName,
                        sLinkMobile,
                        sEmail}, this.AddTranstarUserInfoOperationCompleted, userState);
        }
        
        private void OnAddTranstarUserInfoOperationCompleted(object arg) {
            if ((this.AddTranstarUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTranstarUserInfoCompleted(this, new AddTranstarUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ModifyTranstarVendorAccountStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ModifyTranstarVendorAccountStatus(int tvaid, int status, out string sMsg) {
            object[] results = this.Invoke("ModifyTranstarVendorAccountStatus", new object[] {
                        tvaid,
                        status});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyTranstarVendorAccountStatusAsync(int tvaid, int status) {
            this.ModifyTranstarVendorAccountStatusAsync(tvaid, status, null);
        }
        
        /// <remarks/>
        public void ModifyTranstarVendorAccountStatusAsync(int tvaid, int status, object userState) {
            if ((this.ModifyTranstarVendorAccountStatusOperationCompleted == null)) {
                this.ModifyTranstarVendorAccountStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyTranstarVendorAccountStatusOperationCompleted);
            }
            this.InvokeAsync("ModifyTranstarVendorAccountStatus", new object[] {
                        tvaid,
                        status}, this.ModifyTranstarVendorAccountStatusOperationCompleted, userState);
        }
        
        private void OnModifyTranstarVendorAccountStatusOperationCompleted(object arg) {
            if ((this.ModifyTranstarVendorAccountStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyTranstarVendorAccountStatusCompleted(this, new ModifyTranstarVendorAccountStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTranstarUserInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateTranstarUserInfo(int nDVAId, string sVendorFullName, string sVendorShortName, int nVendorClass, int DVTId, string sBrand, int nCityId, out string sMsg) {
            object[] results = this.Invoke("UpdateTranstarUserInfo", new object[] {
                        nDVAId,
                        sVendorFullName,
                        sVendorShortName,
                        nVendorClass,
                        DVTId,
                        sBrand,
                        nCityId});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTranstarUserInfoAsync(int nDVAId, string sVendorFullName, string sVendorShortName, int nVendorClass, int DVTId, string sBrand, int nCityId) {
            this.UpdateTranstarUserInfoAsync(nDVAId, sVendorFullName, sVendorShortName, nVendorClass, DVTId, sBrand, nCityId, null);
        }
        
        /// <remarks/>
        public void UpdateTranstarUserInfoAsync(int nDVAId, string sVendorFullName, string sVendorShortName, int nVendorClass, int DVTId, string sBrand, int nCityId, object userState) {
            if ((this.UpdateTranstarUserInfoOperationCompleted == null)) {
                this.UpdateTranstarUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTranstarUserInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateTranstarUserInfo", new object[] {
                        nDVAId,
                        sVendorFullName,
                        sVendorShortName,
                        nVendorClass,
                        DVTId,
                        sBrand,
                        nCityId}, this.UpdateTranstarUserInfoOperationCompleted, userState);
        }
        
        private void OnUpdateTranstarUserInfoOperationCompleted(object arg) {
            if ((this.UpdateTranstarUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTranstarUserInfoCompleted(this, new UpdateTranstarUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUBByUserId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddUBByUserId(int nDVAId, int ubCount, string des, string code, string crmKey, decimal rmbFee, decimal unitPrice, System.DateTime cardBeginTime, System.DateTime cardEndTime, out string sMsg) {
            object[] results = this.Invoke("AddUBByUserId", new object[] {
                        nDVAId,
                        ubCount,
                        des,
                        code,
                        crmKey,
                        rmbFee,
                        unitPrice,
                        cardBeginTime,
                        cardEndTime});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddUBByUserIdAsync(int nDVAId, int ubCount, string des, string code, string crmKey, decimal rmbFee, decimal unitPrice, System.DateTime cardBeginTime, System.DateTime cardEndTime) {
            this.AddUBByUserIdAsync(nDVAId, ubCount, des, code, crmKey, rmbFee, unitPrice, cardBeginTime, cardEndTime, null);
        }
        
        /// <remarks/>
        public void AddUBByUserIdAsync(int nDVAId, int ubCount, string des, string code, string crmKey, decimal rmbFee, decimal unitPrice, System.DateTime cardBeginTime, System.DateTime cardEndTime, object userState) {
            if ((this.AddUBByUserIdOperationCompleted == null)) {
                this.AddUBByUserIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUBByUserIdOperationCompleted);
            }
            this.InvokeAsync("AddUBByUserId", new object[] {
                        nDVAId,
                        ubCount,
                        des,
                        code,
                        crmKey,
                        rmbFee,
                        unitPrice,
                        cardBeginTime,
                        cardEndTime}, this.AddUBByUserIdOperationCompleted, userState);
        }
        
        private void OnAddUBByUserIdOperationCompleted(object arg) {
            if ((this.AddUBByUserIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUBByUserIdCompleted(this, new AddUBByUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSuperVendor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSuperVendor(out string sMsg) {
            object[] results = this.Invoke("GetSuperVendor", new object[0]);
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSuperVendorAsync() {
            this.GetSuperVendorAsync(null);
        }
        
        /// <remarks/>
        public void GetSuperVendorAsync(object userState) {
            if ((this.GetSuperVendorOperationCompleted == null)) {
                this.GetSuperVendorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSuperVendorOperationCompleted);
            }
            this.InvokeAsync("GetSuperVendor", new object[0], this.GetSuperVendorOperationCompleted, userState);
        }
        
        private void OnGetSuperVendorOperationCompleted(object arg) {
            if ((this.GetSuperVendorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSuperVendorCompleted(this, new GetSuperVendorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTranstarInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetTranstarInfo(int nDVAId, out string sMsg) {
            object[] results = this.Invoke("GetTranstarInfo", new object[] {
                        nDVAId});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetTranstarInfoAsync(int nDVAId) {
            this.GetTranstarInfoAsync(nDVAId, null);
        }
        
        /// <remarks/>
        public void GetTranstarInfoAsync(int nDVAId, object userState) {
            if ((this.GetTranstarInfoOperationCompleted == null)) {
                this.GetTranstarInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTranstarInfoOperationCompleted);
            }
            this.InvokeAsync("GetTranstarInfo", new object[] {
                        nDVAId}, this.GetTranstarInfoOperationCompleted, userState);
        }
        
        private void OnGetTranstarInfoOperationCompleted(object arg) {
            if ((this.GetTranstarInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTranstarInfoCompleted(this, new GetTranstarInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLinkman", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetLinkman(int nDVAId, out string sMsg) {
            object[] results = this.Invoke("GetLinkman", new object[] {
                        nDVAId});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetLinkmanAsync(int nDVAId) {
            this.GetLinkmanAsync(nDVAId, null);
        }
        
        /// <remarks/>
        public void GetLinkmanAsync(int nDVAId, object userState) {
            if ((this.GetLinkmanOperationCompleted == null)) {
                this.GetLinkmanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkmanOperationCompleted);
            }
            this.InvokeAsync("GetLinkman", new object[] {
                        nDVAId}, this.GetLinkmanOperationCompleted, userState);
        }
        
        private void OnGetLinkmanOperationCompleted(object arg) {
            if ((this.GetLinkmanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkmanCompleted(this, new GetLinkmanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUBInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetUBInfo(int nDVAId, out string sMsg) {
            object[] results = this.Invoke("GetUBInfo", new object[] {
                        nDVAId});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetUBInfoAsync(int nDVAId) {
            this.GetUBInfoAsync(nDVAId, null);
        }
        
        /// <remarks/>
        public void GetUBInfoAsync(int nDVAId, object userState) {
            if ((this.GetUBInfoOperationCompleted == null)) {
                this.GetUBInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUBInfoOperationCompleted);
            }
            this.InvokeAsync("GetUBInfo", new object[] {
                        nDVAId}, this.GetUBInfoOperationCompleted, userState);
        }
        
        private void OnGetUBInfoOperationCompleted(object arg) {
            if ((this.GetUBInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUBInfoCompleted(this, new GetUBInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccontInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetAccontInfo(int nDVAId, out string sMsg) {
            object[] results = this.Invoke("GetAccontInfo", new object[] {
                        nDVAId});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccontInfoAsync(int nDVAId) {
            this.GetAccontInfoAsync(nDVAId, null);
        }
        
        /// <remarks/>
        public void GetAccontInfoAsync(int nDVAId, object userState) {
            if ((this.GetAccontInfoOperationCompleted == null)) {
                this.GetAccontInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccontInfoOperationCompleted);
            }
            this.InvokeAsync("GetAccontInfo", new object[] {
                        nDVAId}, this.GetAccontInfoOperationCompleted, userState);
        }
        
        private void OnGetAccontInfoOperationCompleted(object arg) {
            if ((this.GetAccontInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccontInfoCompleted(this, new GetAccontInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUBRecordByTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetUBRecordByTime(int TvaId, System.DateTime changeTime, int nCount, out string sMsg, out int RecCount) {
            object[] results = this.Invoke("GetUBRecordByTime", new object[] {
                        TvaId,
                        changeTime,
                        nCount});
            sMsg = ((string)(results[1]));
            RecCount = ((int)(results[2]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetUBRecordByTimeAsync(int TvaId, System.DateTime changeTime, int nCount) {
            this.GetUBRecordByTimeAsync(TvaId, changeTime, nCount, null);
        }
        
        /// <remarks/>
        public void GetUBRecordByTimeAsync(int TvaId, System.DateTime changeTime, int nCount, object userState) {
            if ((this.GetUBRecordByTimeOperationCompleted == null)) {
                this.GetUBRecordByTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUBRecordByTimeOperationCompleted);
            }
            this.InvokeAsync("GetUBRecordByTime", new object[] {
                        TvaId,
                        changeTime,
                        nCount}, this.GetUBRecordByTimeOperationCompleted, userState);
        }
        
        private void OnGetUBRecordByTimeOperationCompleted(object arg) {
            if ((this.GetUBRecordByTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUBRecordByTimeCompleted(this, new GetUBRecordByTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFeedback", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetFeedback(System.DateTime time, out string sMsg) {
            object[] results = this.Invoke("GetFeedback", new object[] {
                        time});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetFeedbackAsync(System.DateTime time) {
            this.GetFeedbackAsync(time, null);
        }
        
        /// <remarks/>
        public void GetFeedbackAsync(System.DateTime time, object userState) {
            if ((this.GetFeedbackOperationCompleted == null)) {
                this.GetFeedbackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFeedbackOperationCompleted);
            }
            this.InvokeAsync("GetFeedback", new object[] {
                        time}, this.GetFeedbackOperationCompleted, userState);
        }
        
        private void OnGetFeedbackOperationCompleted(object arg) {
            if ((this.GetFeedbackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFeedbackCompleted(this, new GetFeedbackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddVendorScheduling", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddVendorScheduling(int nDVAId, int SaleType, System.DateTime StartTime, System.DateTime EndTime, out string sMsg) {
            object[] results = this.Invoke("AddVendorScheduling", new object[] {
                        nDVAId,
                        SaleType,
                        StartTime,
                        EndTime});
            sMsg = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddVendorSchedulingAsync(int nDVAId, int SaleType, System.DateTime StartTime, System.DateTime EndTime) {
            this.AddVendorSchedulingAsync(nDVAId, SaleType, StartTime, EndTime, null);
        }
        
        /// <remarks/>
        public void AddVendorSchedulingAsync(int nDVAId, int SaleType, System.DateTime StartTime, System.DateTime EndTime, object userState) {
            if ((this.AddVendorSchedulingOperationCompleted == null)) {
                this.AddVendorSchedulingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddVendorSchedulingOperationCompleted);
            }
            this.InvokeAsync("AddVendorScheduling", new object[] {
                        nDVAId,
                        SaleType,
                        StartTime,
                        EndTime}, this.AddVendorSchedulingOperationCompleted, userState);
        }
        
        private void OnAddVendorSchedulingOperationCompleted(object arg) {
            if ((this.AddVendorSchedulingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddVendorSchedulingCompleted(this, new AddVendorSchedulingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateVendorScheduling", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateVendorScheduling(int nDVSId, System.DateTime StartTime, System.DateTime EndTime, out string sMsg) {
            object[] results = this.Invoke("UpdateVendorScheduling", new object[] {
                        nDVSId,
                        StartTime,
                        EndTime});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateVendorSchedulingAsync(int nDVSId, System.DateTime StartTime, System.DateTime EndTime) {
            this.UpdateVendorSchedulingAsync(nDVSId, StartTime, EndTime, null);
        }
        
        /// <remarks/>
        public void UpdateVendorSchedulingAsync(int nDVSId, System.DateTime StartTime, System.DateTime EndTime, object userState) {
            if ((this.UpdateVendorSchedulingOperationCompleted == null)) {
                this.UpdateVendorSchedulingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVendorSchedulingOperationCompleted);
            }
            this.InvokeAsync("UpdateVendorScheduling", new object[] {
                        nDVSId,
                        StartTime,
                        EndTime}, this.UpdateVendorSchedulingOperationCompleted, userState);
        }
        
        private void OnUpdateVendorSchedulingOperationCompleted(object arg) {
            if ((this.UpdateVendorSchedulingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVendorSchedulingCompleted(this, new UpdateVendorSchedulingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteVendorScheduling", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteVendorScheduling(int nDVSId, int nStatus, out string sMsg) {
            object[] results = this.Invoke("DeleteVendorScheduling", new object[] {
                        nDVSId,
                        nStatus});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteVendorSchedulingAsync(int nDVSId, int nStatus) {
            this.DeleteVendorSchedulingAsync(nDVSId, nStatus, null);
        }
        
        /// <remarks/>
        public void DeleteVendorSchedulingAsync(int nDVSId, int nStatus, object userState) {
            if ((this.DeleteVendorSchedulingOperationCompleted == null)) {
                this.DeleteVendorSchedulingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteVendorSchedulingOperationCompleted);
            }
            this.InvokeAsync("DeleteVendorScheduling", new object[] {
                        nDVSId,
                        nStatus}, this.DeleteVendorSchedulingOperationCompleted, userState);
        }
        
        private void OnDeleteVendorSchedulingOperationCompleted(object arg) {
            if ((this.DeleteVendorSchedulingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteVendorSchedulingCompleted(this, new DeleteVendorSchedulingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDealerValidateCarSource", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDealerValidateCarSource(System.DateTime StartTime, System.DateTime EndTime, out string sMsg) {
            object[] results = this.Invoke("GetDealerValidateCarSource", new object[] {
                        StartTime,
                        EndTime});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDealerValidateCarSourceAsync(System.DateTime StartTime, System.DateTime EndTime) {
            this.GetDealerValidateCarSourceAsync(StartTime, EndTime, null);
        }
        
        /// <remarks/>
        public void GetDealerValidateCarSourceAsync(System.DateTime StartTime, System.DateTime EndTime, object userState) {
            if ((this.GetDealerValidateCarSourceOperationCompleted == null)) {
                this.GetDealerValidateCarSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDealerValidateCarSourceOperationCompleted);
            }
            this.InvokeAsync("GetDealerValidateCarSource", new object[] {
                        StartTime,
                        EndTime}, this.GetDealerValidateCarSourceOperationCompleted, userState);
        }
        
        private void OnGetDealerValidateCarSourceOperationCompleted(object arg) {
            if ((this.GetDealerValidateCarSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDealerValidateCarSourceCompleted(this, new GetDealerValidateCarSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDealerValidateCarSourceByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetDealerValidateCarSourceByDate(System.DateTime date, out string sMsg) {
            object[] results = this.Invoke("GetDealerValidateCarSourceByDate", new object[] {
                        date});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetDealerValidateCarSourceByDateAsync(System.DateTime date) {
            this.GetDealerValidateCarSourceByDateAsync(date, null);
        }
        
        /// <remarks/>
        public void GetDealerValidateCarSourceByDateAsync(System.DateTime date, object userState) {
            if ((this.GetDealerValidateCarSourceByDateOperationCompleted == null)) {
                this.GetDealerValidateCarSourceByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDealerValidateCarSourceByDateOperationCompleted);
            }
            this.InvokeAsync("GetDealerValidateCarSourceByDate", new object[] {
                        date}, this.GetDealerValidateCarSourceByDateOperationCompleted, userState);
        }
        
        private void OnGetDealerValidateCarSourceByDateOperationCompleted(object arg) {
            if ((this.GetDealerValidateCarSourceByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDealerValidateCarSourceByDateCompleted(this, new GetDealerValidateCarSourceByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllCarSource", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetAllCarSource(System.DateTime date, out string sMsg) {
            object[] results = this.Invoke("GetAllCarSource", new object[] {
                        date});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllCarSourceAsync(System.DateTime date) {
            this.GetAllCarSourceAsync(date, null);
        }
        
        /// <remarks/>
        public void GetAllCarSourceAsync(System.DateTime date, object userState) {
            if ((this.GetAllCarSourceOperationCompleted == null)) {
                this.GetAllCarSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCarSourceOperationCompleted);
            }
            this.InvokeAsync("GetAllCarSource", new object[] {
                        date}, this.GetAllCarSourceOperationCompleted, userState);
        }
        
        private void OnGetAllCarSourceOperationCompleted(object arg) {
            if ((this.GetAllCarSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllCarSourceCompleted(this, new GetAllCarSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetValidateDealerByMonth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetValidateDealerByMonth(string YearMonth, out string sMsg) {
            object[] results = this.Invoke("GetValidateDealerByMonth", new object[] {
                        YearMonth});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetValidateDealerByMonthAsync(string YearMonth) {
            this.GetValidateDealerByMonthAsync(YearMonth, null);
        }
        
        /// <remarks/>
        public void GetValidateDealerByMonthAsync(string YearMonth, object userState) {
            if ((this.GetValidateDealerByMonthOperationCompleted == null)) {
                this.GetValidateDealerByMonthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetValidateDealerByMonthOperationCompleted);
            }
            this.InvokeAsync("GetValidateDealerByMonth", new object[] {
                        YearMonth}, this.GetValidateDealerByMonthOperationCompleted, userState);
        }
        
        private void OnGetValidateDealerByMonthOperationCompleted(object arg) {
            if ((this.GetValidateDealerByMonthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetValidateDealerByMonthCompleted(this, new GetValidateDealerByMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDealerUBLogDetailByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDealerUBLogDetailByDate(System.DateTime BeginTime, System.DateTime EndTime, out string sMsg) {
            object[] results = this.Invoke("GetDealerUBLogDetailByDate", new object[] {
                        BeginTime,
                        EndTime});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDealerUBLogDetailByDateAsync(System.DateTime BeginTime, System.DateTime EndTime) {
            this.GetDealerUBLogDetailByDateAsync(BeginTime, EndTime, null);
        }
        
        /// <remarks/>
        public void GetDealerUBLogDetailByDateAsync(System.DateTime BeginTime, System.DateTime EndTime, object userState) {
            if ((this.GetDealerUBLogDetailByDateOperationCompleted == null)) {
                this.GetDealerUBLogDetailByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDealerUBLogDetailByDateOperationCompleted);
            }
            this.InvokeAsync("GetDealerUBLogDetailByDate", new object[] {
                        BeginTime,
                        EndTime}, this.GetDealerUBLogDetailByDateOperationCompleted, userState);
        }
        
        private void OnGetDealerUBLogDetailByDateOperationCompleted(object arg) {
            if ((this.GetDealerUBLogDetailByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDealerUBLogDetailByDateCompleted(this, new GetDealerUBLogDetailByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAndEditEPDealer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddAndEditEPDealer(int nEPId, string sVendorFullName, string sVendorShortName, int nVendorClass, string sBrand, int nCityId, string sPostCode, string sAddress, string sLinkManName, string sLinkMobile, string sEmail, out string sMsg) {
            object[] results = this.Invoke("AddAndEditEPDealer", new object[] {
                        nEPId,
                        sVendorFullName,
                        sVendorShortName,
                        nVendorClass,
                        sBrand,
                        nCityId,
                        sPostCode,
                        sAddress,
                        sLinkManName,
                        sLinkMobile,
                        sEmail});
            sMsg = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddAndEditEPDealerAsync(int nEPId, string sVendorFullName, string sVendorShortName, int nVendorClass, string sBrand, int nCityId, string sPostCode, string sAddress, string sLinkManName, string sLinkMobile, string sEmail) {
            this.AddAndEditEPDealerAsync(nEPId, sVendorFullName, sVendorShortName, nVendorClass, sBrand, nCityId, sPostCode, sAddress, sLinkManName, sLinkMobile, sEmail, null);
        }
        
        /// <remarks/>
        public void AddAndEditEPDealerAsync(int nEPId, string sVendorFullName, string sVendorShortName, int nVendorClass, string sBrand, int nCityId, string sPostCode, string sAddress, string sLinkManName, string sLinkMobile, string sEmail, object userState) {
            if ((this.AddAndEditEPDealerOperationCompleted == null)) {
                this.AddAndEditEPDealerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAndEditEPDealerOperationCompleted);
            }
            this.InvokeAsync("AddAndEditEPDealer", new object[] {
                        nEPId,
                        sVendorFullName,
                        sVendorShortName,
                        nVendorClass,
                        sBrand,
                        nCityId,
                        sPostCode,
                        sAddress,
                        sLinkManName,
                        sLinkMobile,
                        sEmail}, this.AddAndEditEPDealerOperationCompleted, userState);
        }
        
        private void OnAddAndEditEPDealerOperationCompleted(object arg) {
            if ((this.AddAndEditEPDealerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAndEditEPDealerCompleted(this, new AddAndEditEPDealerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEPDealerStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateEPDealerStatus(int nEPId, int status) {
            object[] results = this.Invoke("UpdateEPDealerStatus", new object[] {
                        nEPId,
                        status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEPDealerStatusAsync(int nEPId, int status) {
            this.UpdateEPDealerStatusAsync(nEPId, status, null);
        }
        
        /// <remarks/>
        public void UpdateEPDealerStatusAsync(int nEPId, int status, object userState) {
            if ((this.UpdateEPDealerStatusOperationCompleted == null)) {
                this.UpdateEPDealerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEPDealerStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateEPDealerStatus", new object[] {
                        nEPId,
                        status}, this.UpdateEPDealerStatusOperationCompleted, userState);
        }
        
        private void OnUpdateEPDealerStatusOperationCompleted(object arg) {
            if ((this.UpdateEPDealerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEPDealerStatusCompleted(this, new UpdateEPDealerStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAndEditEPScheduling", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddAndEditEPScheduling(int nEPId, string sCRMId, int nSaleType, int nType, System.DateTime StartTime, System.DateTime EndTime, out string sMsg) {
            object[] results = this.Invoke("AddAndEditEPScheduling", new object[] {
                        nEPId,
                        sCRMId,
                        nSaleType,
                        nType,
                        StartTime,
                        EndTime});
            sMsg = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddAndEditEPSchedulingAsync(int nEPId, string sCRMId, int nSaleType, int nType, System.DateTime StartTime, System.DateTime EndTime) {
            this.AddAndEditEPSchedulingAsync(nEPId, sCRMId, nSaleType, nType, StartTime, EndTime, null);
        }
        
        /// <remarks/>
        public void AddAndEditEPSchedulingAsync(int nEPId, string sCRMId, int nSaleType, int nType, System.DateTime StartTime, System.DateTime EndTime, object userState) {
            if ((this.AddAndEditEPSchedulingOperationCompleted == null)) {
                this.AddAndEditEPSchedulingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAndEditEPSchedulingOperationCompleted);
            }
            this.InvokeAsync("AddAndEditEPScheduling", new object[] {
                        nEPId,
                        sCRMId,
                        nSaleType,
                        nType,
                        StartTime,
                        EndTime}, this.AddAndEditEPSchedulingOperationCompleted, userState);
        }
        
        private void OnAddAndEditEPSchedulingOperationCompleted(object arg) {
            if ((this.AddAndEditEPSchedulingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAndEditEPSchedulingCompleted(this, new AddAndEditEPSchedulingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddTranstarUserInfoCompletedEventHandler(object sender, AddTranstarUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTranstarUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTranstarUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ModifyTranstarVendorAccountStatusCompletedEventHandler(object sender, ModifyTranstarVendorAccountStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyTranstarVendorAccountStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyTranstarVendorAccountStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateTranstarUserInfoCompletedEventHandler(object sender, UpdateTranstarUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTranstarUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTranstarUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddUBByUserIdCompletedEventHandler(object sender, AddUBByUserIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddUBByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddUBByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSuperVendorCompletedEventHandler(object sender, GetSuperVendorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSuperVendorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSuperVendorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTranstarInfoCompletedEventHandler(object sender, GetTranstarInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTranstarInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTranstarInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLinkmanCompletedEventHandler(object sender, GetLinkmanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkmanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinkmanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUBInfoCompletedEventHandler(object sender, GetUBInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUBInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUBInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAccontInfoCompletedEventHandler(object sender, GetAccontInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccontInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccontInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUBRecordByTimeCompletedEventHandler(object sender, GetUBRecordByTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUBRecordByTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUBRecordByTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int RecCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFeedbackCompletedEventHandler(object sender, GetFeedbackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFeedbackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFeedbackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddVendorSchedulingCompletedEventHandler(object sender, AddVendorSchedulingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddVendorSchedulingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddVendorSchedulingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateVendorSchedulingCompletedEventHandler(object sender, UpdateVendorSchedulingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateVendorSchedulingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateVendorSchedulingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteVendorSchedulingCompletedEventHandler(object sender, DeleteVendorSchedulingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteVendorSchedulingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteVendorSchedulingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDealerValidateCarSourceCompletedEventHandler(object sender, GetDealerValidateCarSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDealerValidateCarSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDealerValidateCarSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDealerValidateCarSourceByDateCompletedEventHandler(object sender, GetDealerValidateCarSourceByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDealerValidateCarSourceByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDealerValidateCarSourceByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllCarSourceCompletedEventHandler(object sender, GetAllCarSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllCarSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllCarSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetValidateDealerByMonthCompletedEventHandler(object sender, GetValidateDealerByMonthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetValidateDealerByMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetValidateDealerByMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDealerUBLogDetailByDateCompletedEventHandler(object sender, GetDealerUBLogDetailByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDealerUBLogDetailByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDealerUBLogDetailByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddAndEditEPDealerCompletedEventHandler(object sender, AddAndEditEPDealerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAndEditEPDealerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAndEditEPDealerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateEPDealerStatusCompletedEventHandler(object sender, UpdateEPDealerStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEPDealerStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEPDealerStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddAndEditEPSchedulingCompletedEventHandler(object sender, AddAndEditEPSchedulingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAndEditEPSchedulingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAndEditEPSchedulingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591